/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActiveClientState', null, global);
goog.exportSymbol('proto.AddUserRequest', null, global);
goog.exportSymbol('proto.AddUserResponse', null, global);
goog.exportSymbol('proto.Attachment', null, global);
goog.exportSymbol('proto.BatchUpdate', null, global);
goog.exportSymbol('proto.BlockNotification', null, global);
goog.exportSymbol('proto.BlockState', null, global);
goog.exportSymbol('proto.BlockStateChange', null, global);
goog.exportSymbol('proto.CallerIdSettingsMask', null, global);
goog.exportSymbol('proto.ChatMessage', null, global);
goog.exportSymbol('proto.ClientBuildType', null, global);
goog.exportSymbol('proto.ClientId', null, global);
goog.exportSymbol('proto.ClientIdentifier', null, global);
goog.exportSymbol('proto.ClientPresenceState', null, global);
goog.exportSymbol('proto.ClientPresenceStateType', null, global);
goog.exportSymbol('proto.ClientVersion', null, global);
goog.exportSymbol('proto.ConfigurationBit', null, global);
goog.exportSymbol('proto.ConfigurationBitType', null, global);
goog.exportSymbol('proto.Conversation', null, global);
goog.exportSymbol('proto.ConversationId', null, global);
goog.exportSymbol('proto.ConversationNotification', null, global);
goog.exportSymbol('proto.ConversationParticipantData', null, global);
goog.exportSymbol('proto.ConversationRename', null, global);
goog.exportSymbol('proto.ConversationSpec', null, global);
goog.exportSymbol('proto.ConversationState', null, global);
goog.exportSymbol('proto.ConversationStatus', null, global);
goog.exportSymbol('proto.ConversationType', null, global);
goog.exportSymbol('proto.ConversationView', null, global);
goog.exportSymbol('proto.ConversationViewModification', null, global);
goog.exportSymbol('proto.Country', null, global);
goog.exportSymbol('proto.CreateConversationRequest', null, global);
goog.exportSymbol('proto.CreateConversationResponse', null, global);
goog.exportSymbol('proto.DeleteAction', null, global);
goog.exportSymbol('proto.DeleteActionNotification', null, global);
goog.exportSymbol('proto.DeleteConversationRequest', null, global);
goog.exportSymbol('proto.DeleteConversationResponse', null, global);
goog.exportSymbol('proto.DeleteType', null, global);
goog.exportSymbol('proto.DeliveryMedium', null, global);
goog.exportSymbol('proto.DeliveryMediumOption', null, global);
goog.exportSymbol('proto.DeliveryMediumType', null, global);
goog.exportSymbol('proto.DesktopOffSetting', null, global);
goog.exportSymbol('proto.DesktopOffState', null, global);
goog.exportSymbol('proto.DesktopSoundSetting', null, global);
goog.exportSymbol('proto.DeviceStatus', null, global);
goog.exportSymbol('proto.DndSetting', null, global);
goog.exportSymbol('proto.DoNotDisturbSetting', null, global);
goog.exportSymbol('proto.EasterEgg', null, global);
goog.exportSymbol('proto.EasterEggNotification', null, global);
goog.exportSymbol('proto.EasterEggRequest', null, global);
goog.exportSymbol('proto.EasterEggResponse', null, global);
goog.exportSymbol('proto.EmbedItem', null, global);
goog.exportSymbol('proto.EmbedItem.GeoCoordinates', null, global);
goog.exportSymbol('proto.EmbedItem.Image', null, global);
goog.exportSymbol('proto.EmbedItem.PostalAddress', null, global);
goog.exportSymbol('proto.Entity', null, global);
goog.exportSymbol('proto.Entity.PastHangoutState', null, global);
goog.exportSymbol('proto.EntityLookupSpec', null, global);
goog.exportSymbol('proto.EntityProperties', null, global);
goog.exportSymbol('proto.EntityResult', null, global);
goog.exportSymbol('proto.Event', null, global);
goog.exportSymbol('proto.EventAnnotation', null, global);
goog.exportSymbol('proto.EventContinuationToken', null, global);
goog.exportSymbol('proto.EventNotification', null, global);
goog.exportSymbol('proto.EventRequestHeader', null, global);
goog.exportSymbol('proto.EventType', null, global);
goog.exportSymbol('proto.ExistingMedia', null, global);
goog.exportSymbol('proto.FieldMask', null, global);
goog.exportSymbol('proto.FocusDevice', null, global);
goog.exportSymbol('proto.FocusType', null, global);
goog.exportSymbol('proto.ForceHistory', null, global);
goog.exportSymbol('proto.Formatting', null, global);
goog.exportSymbol('proto.Gender', null, global);
goog.exportSymbol('proto.GetConversationRequest', null, global);
goog.exportSymbol('proto.GetConversationResponse', null, global);
goog.exportSymbol('proto.GetEntityByIdRequest', null, global);
goog.exportSymbol('proto.GetEntityByIdResponse', null, global);
goog.exportSymbol('proto.GetGroupConversationUrlRequest', null, global);
goog.exportSymbol('proto.GetGroupConversationUrlResponse', null, global);
goog.exportSymbol('proto.GetSelfInfoRequest', null, global);
goog.exportSymbol('proto.GetSelfInfoResponse', null, global);
goog.exportSymbol('proto.GetSuggestedEntitiesRequest', null, global);
goog.exportSymbol('proto.GetSuggestedEntitiesResponse', null, global);
goog.exportSymbol('proto.GroupLinkSharingModification', null, global);
goog.exportSymbol('proto.GroupLinkSharingStatus', null, global);
goog.exportSymbol('proto.HangoutEvent', null, global);
goog.exportSymbol('proto.HangoutEventType', null, global);
goog.exportSymbol('proto.HashModifier', null, global);
goog.exportSymbol('proto.I18nData', null, global);
goog.exportSymbol('proto.InvitationAffinity', null, global);
goog.exportSymbol('proto.InvitationStatus', null, global);
goog.exportSymbol('proto.InviteeID', null, global);
goog.exportSymbol('proto.ItemType', null, global);
goog.exportSymbol('proto.LastSeen', null, global);
goog.exportSymbol('proto.LinkData', null, global);
goog.exportSymbol('proto.Location', null, global);
goog.exportSymbol('proto.MembershipChange', null, global);
goog.exportSymbol('proto.MembershipChangeType', null, global);
goog.exportSymbol('proto.MessageContent', null, global);
goog.exportSymbol('proto.ModifyOTRStatusRequest', null, global);
goog.exportSymbol('proto.ModifyOTRStatusResponse', null, global);
goog.exportSymbol('proto.MoodContent', null, global);
goog.exportSymbol('proto.MoodMessage', null, global);
goog.exportSymbol('proto.MoodSetting', null, global);
goog.exportSymbol('proto.MoodState', null, global);
goog.exportSymbol('proto.NetworkType', null, global);
goog.exportSymbol('proto.NotificationLevel', null, global);
goog.exportSymbol('proto.NotificationSettings', null, global);
goog.exportSymbol('proto.OTRModification', null, global);
goog.exportSymbol('proto.OffTheRecordStatus', null, global);
goog.exportSymbol('proto.OffTheRecordToggle', null, global);
goog.exportSymbol('proto.OffnetworkAddress', null, global);
goog.exportSymbol('proto.OffnetworkAddressType', null, global);
goog.exportSymbol('proto.ParticipantId', null, global);
goog.exportSymbol('proto.ParticipantType', null, global);
goog.exportSymbol('proto.Phone', null, global);
goog.exportSymbol('proto.PhoneData', null, global);
goog.exportSymbol('proto.PhoneDiscoverabilityStatus', null, global);
goog.exportSymbol('proto.PhoneNumber', null, global);
goog.exportSymbol('proto.PhoneValidationResult', null, global);
goog.exportSymbol('proto.PhoneVerificationStatus', null, global);
goog.exportSymbol('proto.Photo', null, global);
goog.exportSymbol('proto.PhotoUrlStatus', null, global);
goog.exportSymbol('proto.Place', null, global);
goog.exportSymbol('proto.PlusPhoto', null, global);
goog.exportSymbol('proto.PlusPhoto.MediaType', null, global);
goog.exportSymbol('proto.PlusPhoto.Thumbnail', null, global);
goog.exportSymbol('proto.Presence', null, global);
goog.exportSymbol('proto.PresenceNotification', null, global);
goog.exportSymbol('proto.PresenceResult', null, global);
goog.exportSymbol('proto.PresenceStateSetting', null, global);
goog.exportSymbol('proto.ProfileType', null, global);
goog.exportSymbol('proto.QueryPresenceRequest', null, global);
goog.exportSymbol('proto.QueryPresenceResponse', null, global);
goog.exportSymbol('proto.RemoveUserRequest', null, global);
goog.exportSymbol('proto.RemoveUserResponse', null, global);
goog.exportSymbol('proto.RenameConversationRequest', null, global);
goog.exportSymbol('proto.RenameConversationResponse', null, global);
goog.exportSymbol('proto.ReplyToInviteNotification', null, global);
goog.exportSymbol('proto.ReplyToInviteType', null, global);
goog.exportSymbol('proto.RequestHeader', null, global);
goog.exportSymbol('proto.ResponseHeader', null, global);
goog.exportSymbol('proto.ResponseStatus', null, global);
goog.exportSymbol('proto.RichPresenceEnabledState', null, global);
goog.exportSymbol('proto.RichPresenceEnabledStateNotification', null, global);
goog.exportSymbol('proto.RichPresenceState', null, global);
goog.exportSymbol('proto.RichPresenceType', null, global);
goog.exportSymbol('proto.SearchEntitiesRequest', null, global);
goog.exportSymbol('proto.SearchEntitiesResponse', null, global);
goog.exportSymbol('proto.Segment', null, global);
goog.exportSymbol('proto.SegmentType', null, global);
goog.exportSymbol('proto.SelfPresenceNotification', null, global);
goog.exportSymbol('proto.SendChatMessageRequest', null, global);
goog.exportSymbol('proto.SendChatMessageResponse', null, global);
goog.exportSymbol('proto.SendOffnetworkInvitationRequest', null, global);
goog.exportSymbol('proto.SendOffnetworkInvitationResponse', null, global);
goog.exportSymbol('proto.SetActiveClientRequest', null, global);
goog.exportSymbol('proto.SetActiveClientResponse', null, global);
goog.exportSymbol('proto.SetConversationLevelRequest', null, global);
goog.exportSymbol('proto.SetConversationLevelResponse', null, global);
goog.exportSymbol('proto.SetConversationNotificationLevelNotification', null, global);
goog.exportSymbol('proto.SetConversationNotificationLevelRequest', null, global);
goog.exportSymbol('proto.SetConversationNotificationLevelResponse', null, global);
goog.exportSymbol('proto.SetFocusNotification', null, global);
goog.exportSymbol('proto.SetFocusRequest', null, global);
goog.exportSymbol('proto.SetFocusResponse', null, global);
goog.exportSymbol('proto.SetGroupLinkSharingEnabledRequest', null, global);
goog.exportSymbol('proto.SetGroupLinkSharingEnabledResponse', null, global);
goog.exportSymbol('proto.SetNotificationSettingNotification', null, global);
goog.exportSymbol('proto.SetPresenceRequest', null, global);
goog.exportSymbol('proto.SetPresenceResponse', null, global);
goog.exportSymbol('proto.SetTypingNotification', null, global);
goog.exportSymbol('proto.SetTypingRequest', null, global);
goog.exportSymbol('proto.SetTypingResponse', null, global);
goog.exportSymbol('proto.SoundState', null, global);
goog.exportSymbol('proto.SourceType', null, global);
goog.exportSymbol('proto.StateUpdate', null, global);
goog.exportSymbol('proto.StateUpdateHeader', null, global);
goog.exportSymbol('proto.SuggestedContact', null, global);
goog.exportSymbol('proto.SuggestedContactGroup', null, global);
goog.exportSymbol('proto.SuggestedContactGroupHash', null, global);
goog.exportSymbol('proto.SyncAllNewEventsRequest', null, global);
goog.exportSymbol('proto.SyncAllNewEventsResponse', null, global);
goog.exportSymbol('proto.SyncFilter', null, global);
goog.exportSymbol('proto.SyncRecentConversationsRequest', null, global);
goog.exportSymbol('proto.SyncRecentConversationsResponse', null, global);
goog.exportSymbol('proto.TypingType', null, global);
goog.exportSymbol('proto.UpdateWatermarkRequest', null, global);
goog.exportSymbol('proto.UpdateWatermarkResponse', null, global);
goog.exportSymbol('proto.UserConversationState', null, global);
goog.exportSymbol('proto.UserEventState', null, global);
goog.exportSymbol('proto.UserReadState', null, global);
goog.exportSymbol('proto.WatermarkNotification', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DoNotDisturbSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DoNotDisturbSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DoNotDisturbSetting.displayName = 'proto.DoNotDisturbSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DoNotDisturbSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.DoNotDisturbSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DoNotDisturbSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoNotDisturbSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    doNotDisturb: jspb.Message.getField(msg, 1),
    expirationTimestamp: jspb.Message.getField(msg, 2),
    version: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DoNotDisturbSetting}
 */
proto.DoNotDisturbSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DoNotDisturbSetting;
  return proto.DoNotDisturbSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DoNotDisturbSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DoNotDisturbSetting}
 */
proto.DoNotDisturbSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoNotDisturb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DoNotDisturbSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DoNotDisturbSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DoNotDisturbSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoNotDisturbSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bool do_not_disturb = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DoNotDisturbSetting.prototype.getDoNotDisturb = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DoNotDisturbSetting.prototype.setDoNotDisturb = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DoNotDisturbSetting.prototype.clearDoNotDisturb = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DoNotDisturbSetting.prototype.hasDoNotDisturb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 expiration_timestamp = 2;
 * @return {number}
 */
proto.DoNotDisturbSetting.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DoNotDisturbSetting.prototype.setExpirationTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DoNotDisturbSetting.prototype.clearExpirationTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DoNotDisturbSetting.prototype.hasExpirationTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.DoNotDisturbSetting.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DoNotDisturbSetting.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DoNotDisturbSetting.prototype.clearVersion = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DoNotDisturbSetting.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NotificationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NotificationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NotificationSettings.displayName = 'proto.NotificationSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NotificationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.NotificationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NotificationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotificationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    dndSettings: (f = msg.getDndSettings()) && proto.DoNotDisturbSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NotificationSettings}
 */
proto.NotificationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NotificationSettings;
  return proto.NotificationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NotificationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NotificationSettings}
 */
proto.NotificationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DoNotDisturbSetting;
      reader.readMessage(value,proto.DoNotDisturbSetting.deserializeBinaryFromReader);
      msg.setDndSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NotificationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NotificationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NotificationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotificationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDndSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DoNotDisturbSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional DoNotDisturbSetting dnd_settings = 1;
 * @return {?proto.DoNotDisturbSetting}
 */
proto.NotificationSettings.prototype.getDndSettings = function() {
  return /** @type{?proto.DoNotDisturbSetting} */ (
    jspb.Message.getWrapperField(this, proto.DoNotDisturbSetting, 1));
};


/** @param {?proto.DoNotDisturbSetting|undefined} value */
proto.NotificationSettings.prototype.setDndSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NotificationSettings.prototype.clearDndSettings = function() {
  this.setDndSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NotificationSettings.prototype.hasDndSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationId.displayName = 'proto.ConversationId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationId.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationId}
 */
proto.ConversationId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationId;
  return proto.ConversationId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationId}
 */
proto.ConversationId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ConversationId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ConversationId.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ConversationId.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationId.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParticipantId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParticipantId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParticipantId.displayName = 'proto.ParticipantId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParticipantId.prototype.toObject = function(opt_includeInstance) {
  return proto.ParticipantId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParticipantId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParticipantId.toObject = function(includeInstance, msg) {
  var f, obj = {
    gaiaId: jspb.Message.getField(msg, 1),
    chatId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParticipantId}
 */
proto.ParticipantId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParticipantId;
  return proto.ParticipantId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParticipantId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParticipantId}
 */
proto.ParticipantId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGaiaId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParticipantId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ParticipantId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ParticipantId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParticipantId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gaia_id = 1;
 * @return {string}
 */
proto.ParticipantId.prototype.getGaiaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ParticipantId.prototype.setGaiaId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ParticipantId.prototype.clearGaiaId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ParticipantId.prototype.hasGaiaId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chat_id = 2;
 * @return {string}
 */
proto.ParticipantId.prototype.getChatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ParticipantId.prototype.setChatId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ParticipantId.prototype.clearChatId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ParticipantId.prototype.hasChatId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeviceStatus.displayName = 'proto.DeviceStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    mobile: jspb.Message.getField(msg, 1),
    desktop: jspb.Message.getField(msg, 2),
    tablet: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceStatus}
 */
proto.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceStatus;
  return proto.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceStatus}
 */
proto.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMobile(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesktop(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTablet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool mobile = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.getMobile = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DeviceStatus.prototype.setMobile = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DeviceStatus.prototype.clearMobile = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceStatus.prototype.hasMobile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool desktop = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.getDesktop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DeviceStatus.prototype.setDesktop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DeviceStatus.prototype.clearDesktop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceStatus.prototype.hasDesktop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool tablet = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.getTablet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.DeviceStatus.prototype.setTablet = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DeviceStatus.prototype.clearTablet = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceStatus.prototype.hasTablet = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LastSeen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LastSeen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LastSeen.displayName = 'proto.LastSeen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LastSeen.prototype.toObject = function(opt_includeInstance) {
  return proto.LastSeen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LastSeen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LastSeen.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastSeenTimestampUsec: jspb.Message.getField(msg, 1),
    usecSinceLastSeen: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LastSeen}
 */
proto.LastSeen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LastSeen;
  return proto.LastSeen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LastSeen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LastSeen}
 */
proto.LastSeen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSeenTimestampUsec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsecSinceLastSeen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LastSeen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LastSeen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LastSeen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LastSeen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 last_seen_timestamp_usec = 1;
 * @return {number}
 */
proto.LastSeen.prototype.getLastSeenTimestampUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LastSeen.prototype.setLastSeenTimestampUsec = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LastSeen.prototype.clearLastSeenTimestampUsec = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LastSeen.prototype.hasLastSeenTimestampUsec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 usec_since_last_seen = 2;
 * @return {number}
 */
proto.LastSeen.prototype.getUsecSinceLastSeen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LastSeen.prototype.setUsecSinceLastSeen = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.LastSeen.prototype.clearUsecSinceLastSeen = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LastSeen.prototype.hasUsecSinceLastSeen = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Presence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Presence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Presence.displayName = 'proto.Presence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Presence.prototype.toObject = function(opt_includeInstance) {
  return proto.Presence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Presence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Presence.toObject = function(includeInstance, msg) {
  var f, obj = {
    reachable: jspb.Message.getField(msg, 1),
    available: jspb.Message.getField(msg, 2),
    deviceStatus: (f = msg.getDeviceStatus()) && proto.DeviceStatus.toObject(includeInstance, f),
    moodMessage: (f = msg.getMoodMessage()) && proto.MoodMessage.toObject(includeInstance, f),
    lastSeen: (f = msg.getLastSeen()) && proto.LastSeen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Presence}
 */
proto.Presence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Presence;
  return proto.Presence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Presence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Presence}
 */
proto.Presence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReachable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 6:
      var value = new proto.DeviceStatus;
      reader.readMessage(value,proto.DeviceStatus.deserializeBinaryFromReader);
      msg.setDeviceStatus(value);
      break;
    case 9:
      var value = new proto.MoodMessage;
      reader.readMessage(value,proto.MoodMessage.deserializeBinaryFromReader);
      msg.setMoodMessage(value);
      break;
    case 10:
      var value = new proto.LastSeen;
      reader.readMessage(value,proto.LastSeen.deserializeBinaryFromReader);
      msg.setLastSeen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Presence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Presence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Presence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Presence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDeviceStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.DeviceStatus.serializeBinaryToWriter
    );
  }
  f = message.getMoodMessage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.MoodMessage.serializeBinaryToWriter
    );
  }
  f = message.getLastSeen();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.LastSeen.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool reachable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Presence.prototype.getReachable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Presence.prototype.setReachable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Presence.prototype.clearReachable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presence.prototype.hasReachable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool available = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Presence.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Presence.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Presence.prototype.clearAvailable = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presence.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeviceStatus device_status = 6;
 * @return {?proto.DeviceStatus}
 */
proto.Presence.prototype.getDeviceStatus = function() {
  return /** @type{?proto.DeviceStatus} */ (
    jspb.Message.getWrapperField(this, proto.DeviceStatus, 6));
};


/** @param {?proto.DeviceStatus|undefined} value */
proto.Presence.prototype.setDeviceStatus = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Presence.prototype.clearDeviceStatus = function() {
  this.setDeviceStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presence.prototype.hasDeviceStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MoodMessage mood_message = 9;
 * @return {?proto.MoodMessage}
 */
proto.Presence.prototype.getMoodMessage = function() {
  return /** @type{?proto.MoodMessage} */ (
    jspb.Message.getWrapperField(this, proto.MoodMessage, 9));
};


/** @param {?proto.MoodMessage|undefined} value */
proto.Presence.prototype.setMoodMessage = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Presence.prototype.clearMoodMessage = function() {
  this.setMoodMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presence.prototype.hasMoodMessage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional LastSeen last_seen = 10;
 * @return {?proto.LastSeen}
 */
proto.Presence.prototype.getLastSeen = function() {
  return /** @type{?proto.LastSeen} */ (
    jspb.Message.getWrapperField(this, proto.LastSeen, 10));
};


/** @param {?proto.LastSeen|undefined} value */
proto.Presence.prototype.setLastSeen = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Presence.prototype.clearLastSeen = function() {
  this.setLastSeen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presence.prototype.hasLastSeen = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PresenceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PresenceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PresenceResult.displayName = 'proto.PresenceResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PresenceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.PresenceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PresenceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: (f = msg.getUserId()) && proto.ParticipantId.toObject(includeInstance, f),
    presence: (f = msg.getPresence()) && proto.Presence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PresenceResult}
 */
proto.PresenceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PresenceResult;
  return proto.PresenceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PresenceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PresenceResult}
 */
proto.PresenceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.Presence;
      reader.readMessage(value,proto.Presence.deserializeBinaryFromReader);
      msg.setPresence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PresenceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PresenceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PresenceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getPresence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Presence.serializeBinaryToWriter
    );
  }
};


/**
 * optional ParticipantId user_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.PresenceResult.prototype.getUserId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.PresenceResult.prototype.setUserId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PresenceResult.prototype.clearUserId = function() {
  this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PresenceResult.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Presence presence = 2;
 * @return {?proto.Presence}
 */
proto.PresenceResult.prototype.getPresence = function() {
  return /** @type{?proto.Presence} */ (
    jspb.Message.getWrapperField(this, proto.Presence, 2));
};


/** @param {?proto.Presence|undefined} value */
proto.PresenceResult.prototype.setPresence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PresenceResult.prototype.clearPresence = function() {
  this.setPresence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PresenceResult.prototype.hasPresence = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientIdentifier.displayName = 'proto.ClientIdentifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: jspb.Message.getField(msg, 1),
    headerId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientIdentifier}
 */
proto.ClientIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientIdentifier;
  return proto.ClientIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientIdentifier}
 */
proto.ClientIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string resource = 1;
 * @return {string}
 */
proto.ClientIdentifier.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientIdentifier.prototype.setResource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ClientIdentifier.prototype.clearResource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientIdentifier.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string header_id = 2;
 * @return {string}
 */
proto.ClientIdentifier.prototype.getHeaderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientIdentifier.prototype.setHeaderId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ClientIdentifier.prototype.clearHeaderId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientIdentifier.prototype.hasHeaderId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPresenceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPresenceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPresenceState.displayName = 'proto.ClientPresenceState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPresenceState.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPresenceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPresenceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPresenceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = msg.getIdentifier()) && proto.ClientIdentifier.toObject(includeInstance, f),
    state: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPresenceState}
 */
proto.ClientPresenceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPresenceState;
  return proto.ClientPresenceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPresenceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPresenceState}
 */
proto.ClientPresenceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientIdentifier;
      reader.readMessage(value,proto.ClientIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientPresenceStateType} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPresenceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPresenceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPresenceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPresenceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ClientPresenceStateType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ClientIdentifier identifier = 1;
 * @return {?proto.ClientIdentifier}
 */
proto.ClientPresenceState.prototype.getIdentifier = function() {
  return /** @type{?proto.ClientIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.ClientIdentifier, 1));
};


/** @param {?proto.ClientIdentifier|undefined} value */
proto.ClientPresenceState.prototype.setIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ClientPresenceState.prototype.clearIdentifier = function() {
  this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientPresenceState.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientPresenceStateType state = 2;
 * @return {!proto.ClientPresenceStateType}
 */
proto.ClientPresenceState.prototype.getState = function() {
  return /** @type {!proto.ClientPresenceStateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientPresenceStateType} value */
proto.ClientPresenceState.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ClientPresenceState.prototype.clearState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientPresenceState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserEventState.displayName = 'proto.UserEventState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.UserEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: (f = msg.getUserId()) && proto.ParticipantId.toObject(includeInstance, f),
    clientGeneratedId: jspb.Message.getField(msg, 2),
    notificationLevel: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserEventState}
 */
proto.UserEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserEventState;
  return proto.UserEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserEventState}
 */
proto.UserEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientGeneratedId(value);
      break;
    case 3:
      var value = /** @type {!proto.NotificationLevel} */ (reader.readEnum());
      msg.setNotificationLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.NotificationLevel} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional ParticipantId user_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.UserEventState.prototype.getUserId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.UserEventState.prototype.setUserId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UserEventState.prototype.clearUserId = function() {
  this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserEventState.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_generated_id = 2;
 * @return {string}
 */
proto.UserEventState.prototype.getClientGeneratedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UserEventState.prototype.setClientGeneratedId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UserEventState.prototype.clearClientGeneratedId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserEventState.prototype.hasClientGeneratedId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NotificationLevel notification_level = 3;
 * @return {!proto.NotificationLevel}
 */
proto.UserEventState.prototype.getNotificationLevel = function() {
  return /** @type {!proto.NotificationLevel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.NotificationLevel} value */
proto.UserEventState.prototype.setNotificationLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UserEventState.prototype.clearNotificationLevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserEventState.prototype.hasNotificationLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Formatting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Formatting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Formatting.displayName = 'proto.Formatting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Formatting.prototype.toObject = function(opt_includeInstance) {
  return proto.Formatting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Formatting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Formatting.toObject = function(includeInstance, msg) {
  var f, obj = {
    bold: jspb.Message.getField(msg, 1),
    italic: jspb.Message.getField(msg, 2),
    strikethrough: jspb.Message.getField(msg, 3),
    underline: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Formatting}
 */
proto.Formatting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Formatting;
  return proto.Formatting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Formatting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Formatting}
 */
proto.Formatting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBold(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setItalic(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrikethrough(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnderline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Formatting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Formatting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Formatting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Formatting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool bold = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Formatting.prototype.getBold = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Formatting.prototype.setBold = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Formatting.prototype.clearBold = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Formatting.prototype.hasBold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool italic = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Formatting.prototype.getItalic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Formatting.prototype.setItalic = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Formatting.prototype.clearItalic = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Formatting.prototype.hasItalic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool strikethrough = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Formatting.prototype.getStrikethrough = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Formatting.prototype.setStrikethrough = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Formatting.prototype.clearStrikethrough = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Formatting.prototype.hasStrikethrough = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool underline = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Formatting.prototype.getUnderline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Formatting.prototype.setUnderline = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Formatting.prototype.clearUnderline = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Formatting.prototype.hasUnderline = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LinkData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LinkData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LinkData.displayName = 'proto.LinkData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LinkData.prototype.toObject = function(opt_includeInstance) {
  return proto.LinkData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LinkData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkData.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkTarget: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LinkData}
 */
proto.LinkData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LinkData;
  return proto.LinkData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LinkData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LinkData}
 */
proto.LinkData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LinkData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LinkData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LinkData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string link_target = 1;
 * @return {string}
 */
proto.LinkData.prototype.getLinkTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LinkData.prototype.setLinkTarget = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LinkData.prototype.clearLinkTarget = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LinkData.prototype.hasLinkTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Segment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Segment.displayName = 'proto.Segment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Segment.prototype.toObject = function(opt_includeInstance) {
  return proto.Segment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Segment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Segment.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    text: jspb.Message.getField(msg, 2),
    formatting: (f = msg.getFormatting()) && proto.Formatting.toObject(includeInstance, f),
    linkData: (f = msg.getLinkData()) && proto.LinkData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Segment}
 */
proto.Segment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Segment;
  return proto.Segment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Segment}
 */
proto.Segment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SegmentType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new proto.Formatting;
      reader.readMessage(value,proto.Formatting.deserializeBinaryFromReader);
      msg.setFormatting(value);
      break;
    case 4:
      var value = new proto.LinkData;
      reader.readMessage(value,proto.LinkData.deserializeBinaryFromReader);
      msg.setLinkData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Segment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Segment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Segment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SegmentType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFormatting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Formatting.serializeBinaryToWriter
    );
  }
  f = message.getLinkData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LinkData.serializeBinaryToWriter
    );
  }
};


/**
 * required SegmentType type = 1;
 * @return {!proto.SegmentType}
 */
proto.Segment.prototype.getType = function() {
  return /** @type {!proto.SegmentType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SegmentType} value */
proto.Segment.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Segment.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Segment.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.Segment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Segment.prototype.setText = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Segment.prototype.clearText = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Segment.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Formatting formatting = 3;
 * @return {?proto.Formatting}
 */
proto.Segment.prototype.getFormatting = function() {
  return /** @type{?proto.Formatting} */ (
    jspb.Message.getWrapperField(this, proto.Formatting, 3));
};


/** @param {?proto.Formatting|undefined} value */
proto.Segment.prototype.setFormatting = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Segment.prototype.clearFormatting = function() {
  this.setFormatting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Segment.prototype.hasFormatting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LinkData link_data = 4;
 * @return {?proto.LinkData}
 */
proto.Segment.prototype.getLinkData = function() {
  return /** @type{?proto.LinkData} */ (
    jspb.Message.getWrapperField(this, proto.LinkData, 4));
};


/** @param {?proto.LinkData|undefined} value */
proto.Segment.prototype.setLinkData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Segment.prototype.clearLinkData = function() {
  this.setLinkData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Segment.prototype.hasLinkData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlusPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlusPhoto.repeatedFields_, null);
};
goog.inherits(proto.PlusPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlusPhoto.displayName = 'proto.PlusPhoto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlusPhoto.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlusPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.PlusPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlusPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlusPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    thumbnail: (f = msg.getThumbnail()) && proto.PlusPhoto.Thumbnail.toObject(includeInstance, f),
    ownerObfuscatedId: jspb.Message.getField(msg, 2),
    albumId: jspb.Message.getField(msg, 3),
    photoId: jspb.Message.getField(msg, 4),
    url: jspb.Message.getField(msg, 6),
    originalContentUrl: jspb.Message.getField(msg, 10),
    mediaType: jspb.Message.getField(msg, 13),
    streamIdList: jspb.Message.getRepeatedField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlusPhoto}
 */
proto.PlusPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlusPhoto;
  return proto.PlusPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlusPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlusPhoto}
 */
proto.PlusPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlusPhoto.Thumbnail;
      reader.readMessage(value,proto.PlusPhoto.Thumbnail.deserializeBinaryFromReader);
      msg.setThumbnail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerObfuscatedId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlbumId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhotoId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalContentUrl(value);
      break;
    case 13:
      var value = /** @type {!proto.PlusPhoto.MediaType} */ (reader.readEnum());
      msg.setMediaType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlusPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlusPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlusPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlusPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThumbnail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlusPhoto.Thumbnail.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {!proto.PlusPhoto.MediaType} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getStreamIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.PlusPhoto.MediaType = {
  MEDIA_TYPE_UNKNOWN: 0,
  MEDIA_TYPE_PHOTO: 1,
  MEDIA_TYPE_ANIMATED_PHOTO: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlusPhoto.Thumbnail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlusPhoto.Thumbnail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlusPhoto.Thumbnail.displayName = 'proto.PlusPhoto.Thumbnail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlusPhoto.Thumbnail.prototype.toObject = function(opt_includeInstance) {
  return proto.PlusPhoto.Thumbnail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlusPhoto.Thumbnail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlusPhoto.Thumbnail.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getField(msg, 1),
    imageUrl: jspb.Message.getField(msg, 4),
    widthPx: jspb.Message.getField(msg, 10),
    heightPx: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlusPhoto.Thumbnail}
 */
proto.PlusPhoto.Thumbnail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlusPhoto.Thumbnail;
  return proto.PlusPhoto.Thumbnail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlusPhoto.Thumbnail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlusPhoto.Thumbnail}
 */
proto.PlusPhoto.Thumbnail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWidthPx(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeightPx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlusPhoto.Thumbnail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlusPhoto.Thumbnail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlusPhoto.Thumbnail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlusPhoto.Thumbnail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.PlusPhoto.Thumbnail.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlusPhoto.Thumbnail.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PlusPhoto.Thumbnail.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.Thumbnail.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string image_url = 4;
 * @return {string}
 */
proto.PlusPhoto.Thumbnail.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PlusPhoto.Thumbnail.prototype.setImageUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PlusPhoto.Thumbnail.prototype.clearImageUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.Thumbnail.prototype.hasImageUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 width_px = 10;
 * @return {number}
 */
proto.PlusPhoto.Thumbnail.prototype.getWidthPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.PlusPhoto.Thumbnail.prototype.setWidthPx = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.PlusPhoto.Thumbnail.prototype.clearWidthPx = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.Thumbnail.prototype.hasWidthPx = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 height_px = 11;
 * @return {number}
 */
proto.PlusPhoto.Thumbnail.prototype.getHeightPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.PlusPhoto.Thumbnail.prototype.setHeightPx = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.PlusPhoto.Thumbnail.prototype.clearHeightPx = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.Thumbnail.prototype.hasHeightPx = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Thumbnail thumbnail = 1;
 * @return {?proto.PlusPhoto.Thumbnail}
 */
proto.PlusPhoto.prototype.getThumbnail = function() {
  return /** @type{?proto.PlusPhoto.Thumbnail} */ (
    jspb.Message.getWrapperField(this, proto.PlusPhoto.Thumbnail, 1));
};


/** @param {?proto.PlusPhoto.Thumbnail|undefined} value */
proto.PlusPhoto.prototype.setThumbnail = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlusPhoto.prototype.clearThumbnail = function() {
  this.setThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasThumbnail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string owner_obfuscated_id = 2;
 * @return {string}
 */
proto.PlusPhoto.prototype.getOwnerObfuscatedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PlusPhoto.prototype.setOwnerObfuscatedId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PlusPhoto.prototype.clearOwnerObfuscatedId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasOwnerObfuscatedId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string album_id = 3;
 * @return {string}
 */
proto.PlusPhoto.prototype.getAlbumId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.PlusPhoto.prototype.setAlbumId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PlusPhoto.prototype.clearAlbumId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasAlbumId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string photo_id = 4;
 * @return {string}
 */
proto.PlusPhoto.prototype.getPhotoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PlusPhoto.prototype.setPhotoId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PlusPhoto.prototype.clearPhotoId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasPhotoId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.PlusPhoto.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.PlusPhoto.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.PlusPhoto.prototype.clearUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string original_content_url = 10;
 * @return {string}
 */
proto.PlusPhoto.prototype.getOriginalContentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.PlusPhoto.prototype.setOriginalContentUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.PlusPhoto.prototype.clearOriginalContentUrl = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasOriginalContentUrl = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MediaType media_type = 13;
 * @return {!proto.PlusPhoto.MediaType}
 */
proto.PlusPhoto.prototype.getMediaType = function() {
  return /** @type {!proto.PlusPhoto.MediaType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.PlusPhoto.MediaType} value */
proto.PlusPhoto.prototype.setMediaType = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.PlusPhoto.prototype.clearMediaType = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlusPhoto.prototype.hasMediaType = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated string stream_id = 14;
 * @return {!Array.<string>}
 */
proto.PlusPhoto.prototype.getStreamIdList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array.<string>} value */
proto.PlusPhoto.prototype.setStreamIdList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PlusPhoto.prototype.addStreamId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.PlusPhoto.prototype.clearStreamIdList = function() {
  this.setStreamIdList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Place = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Place, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Place.displayName = 'proto.Place';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Place.prototype.toObject = function(opt_includeInstance) {
  return proto.Place.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Place} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Place.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 3),
    address: (f = msg.getAddress()) && proto.EmbedItem.toObject(includeInstance, f),
    geo: (f = msg.getGeo()) && proto.EmbedItem.toObject(includeInstance, f),
    representativeImage: (f = msg.getRepresentativeImage()) && proto.EmbedItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Place}
 */
proto.Place.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Place;
  return proto.Place.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Place} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Place}
 */
proto.Place.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 24:
      var value = new proto.EmbedItem;
      reader.readMessage(value,proto.EmbedItem.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 25:
      var value = new proto.EmbedItem;
      reader.readMessage(value,proto.EmbedItem.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    case 185:
      var value = new proto.EmbedItem;
      reader.readMessage(value,proto.EmbedItem.deserializeBinaryFromReader);
      msg.setRepresentativeImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Place.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Place.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Place} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Place.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.EmbedItem.serializeBinaryToWriter
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.EmbedItem.serializeBinaryToWriter
    );
  }
  f = message.getRepresentativeImage();
  if (f != null) {
    writer.writeMessage(
      185,
      f,
      proto.EmbedItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.Place.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Place.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Place.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Place.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Place.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Place.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Place.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Place.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EmbedItem address = 24;
 * @return {?proto.EmbedItem}
 */
proto.Place.prototype.getAddress = function() {
  return /** @type{?proto.EmbedItem} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem, 24));
};


/** @param {?proto.EmbedItem|undefined} value */
proto.Place.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.Place.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Place.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional EmbedItem geo = 25;
 * @return {?proto.EmbedItem}
 */
proto.Place.prototype.getGeo = function() {
  return /** @type{?proto.EmbedItem} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem, 25));
};


/** @param {?proto.EmbedItem|undefined} value */
proto.Place.prototype.setGeo = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.Place.prototype.clearGeo = function() {
  this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Place.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional EmbedItem representative_image = 185;
 * @return {?proto.EmbedItem}
 */
proto.Place.prototype.getRepresentativeImage = function() {
  return /** @type{?proto.EmbedItem} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem, 185));
};


/** @param {?proto.EmbedItem|undefined} value */
proto.Place.prototype.setRepresentativeImage = function(value) {
  jspb.Message.setWrapperField(this, 185, value);
};


proto.Place.prototype.clearRepresentativeImage = function() {
  this.setRepresentativeImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Place.prototype.hasRepresentativeImage = function() {
  return jspb.Message.getField(this, 185) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EmbedItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.EmbedItem.repeatedFields_, null);
};
goog.inherits(proto.EmbedItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EmbedItem.displayName = 'proto.EmbedItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EmbedItem.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EmbedItem.prototype.toObject = function(opt_includeInstance) {
  return proto.EmbedItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EmbedItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeList: jspb.Message.getRepeatedField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    plusPhoto: (f = msg.getPlusPhoto()) && proto.PlusPhoto.toObject(includeInstance, f),
    place: (f = msg.getPlace()) && proto.Place.toObject(includeInstance, f),
    postalAddress: (f = msg.getPostalAddress()) && proto.EmbedItem.PostalAddress.toObject(includeInstance, f),
    geoCoordinates: (f = msg.getGeoCoordinates()) && proto.EmbedItem.GeoCoordinates.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.EmbedItem.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EmbedItem}
 */
proto.EmbedItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EmbedItem;
  return proto.EmbedItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EmbedItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EmbedItem}
 */
proto.EmbedItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ItemType} */ (reader.readEnum());
      msg.addType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 27639957:
      var value = new proto.PlusPhoto;
      reader.readMessage(value,proto.PlusPhoto.deserializeBinaryFromReader);
      msg.setPlusPhoto(value);
      break;
    case 35825640:
      var value = new proto.Place;
      reader.readMessage(value,proto.Place.deserializeBinaryFromReader);
      msg.setPlace(value);
      break;
    case 36003298:
      var value = new proto.EmbedItem.PostalAddress;
      reader.readMessage(value,proto.EmbedItem.PostalAddress.deserializeBinaryFromReader);
      msg.setPostalAddress(value);
      break;
    case 36736749:
      var value = new proto.EmbedItem.GeoCoordinates;
      reader.readMessage(value,proto.EmbedItem.GeoCoordinates.deserializeBinaryFromReader);
      msg.setGeoCoordinates(value);
      break;
    case 40265033:
      var value = new proto.EmbedItem.Image;
      reader.readMessage(value,proto.EmbedItem.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EmbedItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EmbedItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EmbedItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlusPhoto();
  if (f != null) {
    writer.writeMessage(
      27639957,
      f,
      proto.PlusPhoto.serializeBinaryToWriter
    );
  }
  f = message.getPlace();
  if (f != null) {
    writer.writeMessage(
      35825640,
      f,
      proto.Place.serializeBinaryToWriter
    );
  }
  f = message.getPostalAddress();
  if (f != null) {
    writer.writeMessage(
      36003298,
      f,
      proto.EmbedItem.PostalAddress.serializeBinaryToWriter
    );
  }
  f = message.getGeoCoordinates();
  if (f != null) {
    writer.writeMessage(
      36736749,
      f,
      proto.EmbedItem.GeoCoordinates.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      40265033,
      f,
      proto.EmbedItem.Image.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EmbedItem.PostalAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EmbedItem.PostalAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EmbedItem.PostalAddress.displayName = 'proto.EmbedItem.PostalAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EmbedItem.PostalAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.EmbedItem.PostalAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EmbedItem.PostalAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.PostalAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    streetAddress: jspb.Message.getField(msg, 35)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EmbedItem.PostalAddress}
 */
proto.EmbedItem.PostalAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EmbedItem.PostalAddress;
  return proto.EmbedItem.PostalAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EmbedItem.PostalAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EmbedItem.PostalAddress}
 */
proto.EmbedItem.PostalAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EmbedItem.PostalAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EmbedItem.PostalAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EmbedItem.PostalAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.PostalAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeString(
      35,
      f
    );
  }
};


/**
 * optional string street_address = 35;
 * @return {string}
 */
proto.EmbedItem.PostalAddress.prototype.getStreetAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/** @param {string} value */
proto.EmbedItem.PostalAddress.prototype.setStreetAddress = function(value) {
  jspb.Message.setField(this, 35, value);
};


proto.EmbedItem.PostalAddress.prototype.clearStreetAddress = function() {
  jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.PostalAddress.prototype.hasStreetAddress = function() {
  return jspb.Message.getField(this, 35) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EmbedItem.GeoCoordinates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EmbedItem.GeoCoordinates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EmbedItem.GeoCoordinates.displayName = 'proto.EmbedItem.GeoCoordinates';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EmbedItem.GeoCoordinates.prototype.toObject = function(opt_includeInstance) {
  return proto.EmbedItem.GeoCoordinates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EmbedItem.GeoCoordinates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.GeoCoordinates.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getOptionalFloatingPointField(msg, 36),
    longitude: jspb.Message.getOptionalFloatingPointField(msg, 37)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EmbedItem.GeoCoordinates}
 */
proto.EmbedItem.GeoCoordinates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EmbedItem.GeoCoordinates;
  return proto.EmbedItem.GeoCoordinates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EmbedItem.GeoCoordinates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EmbedItem.GeoCoordinates}
 */
proto.EmbedItem.GeoCoordinates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 36:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EmbedItem.GeoCoordinates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EmbedItem.GeoCoordinates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EmbedItem.GeoCoordinates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.GeoCoordinates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeDouble(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeDouble(
      37,
      f
    );
  }
};


/**
 * optional double latitude = 36;
 * @return {number}
 */
proto.EmbedItem.GeoCoordinates.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 36, 0.0));
};


/** @param {number} value */
proto.EmbedItem.GeoCoordinates.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 36, value);
};


proto.EmbedItem.GeoCoordinates.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.GeoCoordinates.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional double longitude = 37;
 * @return {number}
 */
proto.EmbedItem.GeoCoordinates.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 37, 0.0));
};


/** @param {number} value */
proto.EmbedItem.GeoCoordinates.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 37, value);
};


proto.EmbedItem.GeoCoordinates.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.GeoCoordinates.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 37) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EmbedItem.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EmbedItem.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EmbedItem.Image.displayName = 'proto.EmbedItem.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EmbedItem.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.EmbedItem.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EmbedItem.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EmbedItem.Image}
 */
proto.EmbedItem.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EmbedItem.Image;
  return proto.EmbedItem.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EmbedItem.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EmbedItem.Image}
 */
proto.EmbedItem.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EmbedItem.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EmbedItem.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EmbedItem.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmbedItem.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.EmbedItem.Image.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EmbedItem.Image.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EmbedItem.Image.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.Image.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ItemType type = 1;
 * @return {!Array.<!proto.ItemType>}
 */
proto.EmbedItem.prototype.getTypeList = function() {
  return /** @type {!Array.<!proto.ItemType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.ItemType>} value */
proto.EmbedItem.prototype.setTypeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.ItemType} value
 * @param {number=} opt_index
 */
proto.EmbedItem.prototype.addType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.EmbedItem.prototype.clearTypeList = function() {
  this.setTypeList([]);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.EmbedItem.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.EmbedItem.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EmbedItem.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlusPhoto plus_photo = 27639957;
 * @return {?proto.PlusPhoto}
 */
proto.EmbedItem.prototype.getPlusPhoto = function() {
  return /** @type{?proto.PlusPhoto} */ (
    jspb.Message.getWrapperField(this, proto.PlusPhoto, 27639957));
};


/** @param {?proto.PlusPhoto|undefined} value */
proto.EmbedItem.prototype.setPlusPhoto = function(value) {
  jspb.Message.setWrapperField(this, 27639957, value);
};


proto.EmbedItem.prototype.clearPlusPhoto = function() {
  this.setPlusPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasPlusPhoto = function() {
  return jspb.Message.getField(this, 27639957) != null;
};


/**
 * optional Place place = 35825640;
 * @return {?proto.Place}
 */
proto.EmbedItem.prototype.getPlace = function() {
  return /** @type{?proto.Place} */ (
    jspb.Message.getWrapperField(this, proto.Place, 35825640));
};


/** @param {?proto.Place|undefined} value */
proto.EmbedItem.prototype.setPlace = function(value) {
  jspb.Message.setWrapperField(this, 35825640, value);
};


proto.EmbedItem.prototype.clearPlace = function() {
  this.setPlace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasPlace = function() {
  return jspb.Message.getField(this, 35825640) != null;
};


/**
 * optional PostalAddress postal_address = 36003298;
 * @return {?proto.EmbedItem.PostalAddress}
 */
proto.EmbedItem.prototype.getPostalAddress = function() {
  return /** @type{?proto.EmbedItem.PostalAddress} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem.PostalAddress, 36003298));
};


/** @param {?proto.EmbedItem.PostalAddress|undefined} value */
proto.EmbedItem.prototype.setPostalAddress = function(value) {
  jspb.Message.setWrapperField(this, 36003298, value);
};


proto.EmbedItem.prototype.clearPostalAddress = function() {
  this.setPostalAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasPostalAddress = function() {
  return jspb.Message.getField(this, 36003298) != null;
};


/**
 * optional GeoCoordinates geo_coordinates = 36736749;
 * @return {?proto.EmbedItem.GeoCoordinates}
 */
proto.EmbedItem.prototype.getGeoCoordinates = function() {
  return /** @type{?proto.EmbedItem.GeoCoordinates} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem.GeoCoordinates, 36736749));
};


/** @param {?proto.EmbedItem.GeoCoordinates|undefined} value */
proto.EmbedItem.prototype.setGeoCoordinates = function(value) {
  jspb.Message.setWrapperField(this, 36736749, value);
};


proto.EmbedItem.prototype.clearGeoCoordinates = function() {
  this.setGeoCoordinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasGeoCoordinates = function() {
  return jspb.Message.getField(this, 36736749) != null;
};


/**
 * optional Image image = 40265033;
 * @return {?proto.EmbedItem.Image}
 */
proto.EmbedItem.prototype.getImage = function() {
  return /** @type{?proto.EmbedItem.Image} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem.Image, 40265033));
};


/** @param {?proto.EmbedItem.Image|undefined} value */
proto.EmbedItem.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 40265033, value);
};


proto.EmbedItem.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EmbedItem.prototype.hasImage = function() {
  return jspb.Message.getField(this, 40265033) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Attachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Attachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Attachment.displayName = 'proto.Attachment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Attachment.prototype.toObject = function(opt_includeInstance) {
  return proto.Attachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Attachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    embedItem: (f = msg.getEmbedItem()) && proto.EmbedItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Attachment}
 */
proto.Attachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Attachment;
  return proto.Attachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Attachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Attachment}
 */
proto.Attachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EmbedItem;
      reader.readMessage(value,proto.EmbedItem.deserializeBinaryFromReader);
      msg.setEmbedItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Attachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Attachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Attachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmbedItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EmbedItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional EmbedItem embed_item = 1;
 * @return {?proto.EmbedItem}
 */
proto.Attachment.prototype.getEmbedItem = function() {
  return /** @type{?proto.EmbedItem} */ (
    jspb.Message.getWrapperField(this, proto.EmbedItem, 1));
};


/** @param {?proto.EmbedItem|undefined} value */
proto.Attachment.prototype.setEmbedItem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Attachment.prototype.clearEmbedItem = function() {
  this.setEmbedItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Attachment.prototype.hasEmbedItem = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageContent.repeatedFields_, null);
};
goog.inherits(proto.MessageContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageContent.displayName = 'proto.MessageContent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageContent.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageContent.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto.Segment.toObject, includeInstance),
    attachmentList: jspb.Message.toObjectList(msg.getAttachmentList(),
    proto.Attachment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageContent}
 */
proto.MessageContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageContent;
  return proto.MessageContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageContent}
 */
proto.MessageContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Segment;
      reader.readMessage(value,proto.Segment.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    case 2:
      var value = new proto.Attachment;
      reader.readMessage(value,proto.Attachment.deserializeBinaryFromReader);
      msg.addAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Segment.serializeBinaryToWriter
    );
  }
  f = message.getAttachmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Attachment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Segment segment = 1;
 * @return {!Array.<!proto.Segment>}
 */
proto.MessageContent.prototype.getSegmentList = function() {
  return /** @type{!Array.<!proto.Segment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Segment, 1));
};


/** @param {!Array.<!proto.Segment>} value */
proto.MessageContent.prototype.setSegmentList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Segment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Segment}
 */
proto.MessageContent.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Segment, opt_index);
};


proto.MessageContent.prototype.clearSegmentList = function() {
  this.setSegmentList([]);
};


/**
 * repeated Attachment attachment = 2;
 * @return {!Array.<!proto.Attachment>}
 */
proto.MessageContent.prototype.getAttachmentList = function() {
  return /** @type{!Array.<!proto.Attachment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Attachment, 2));
};


/** @param {!Array.<!proto.Attachment>} value */
proto.MessageContent.prototype.setAttachmentList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Attachment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attachment}
 */
proto.MessageContent.prototype.addAttachment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Attachment, opt_index);
};


proto.MessageContent.prototype.clearAttachmentList = function() {
  this.setAttachmentList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventAnnotation.displayName = 'proto.EventAnnotation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.EventAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventAnnotation}
 */
proto.EventAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventAnnotation;
  return proto.EventAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventAnnotation}
 */
proto.EventAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.EventAnnotation.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.EventAnnotation.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EventAnnotation.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventAnnotation.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.EventAnnotation.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.EventAnnotation.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EventAnnotation.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventAnnotation.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatMessage.repeatedFields_, null);
};
goog.inherits(proto.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatMessage.displayName = 'proto.ChatMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    proto.EventAnnotation.toObject, includeInstance),
    messageContent: (f = msg.getMessageContent()) && proto.MessageContent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatMessage;
  return proto.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.EventAnnotation;
      reader.readMessage(value,proto.EventAnnotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 3:
      var value = new proto.MessageContent;
      reader.readMessage(value,proto.MessageContent.deserializeBinaryFromReader);
      msg.setMessageContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.EventAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getMessageContent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MessageContent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EventAnnotation annotation = 2;
 * @return {!Array.<!proto.EventAnnotation>}
 */
proto.ChatMessage.prototype.getAnnotationList = function() {
  return /** @type{!Array.<!proto.EventAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EventAnnotation, 2));
};


/** @param {!Array.<!proto.EventAnnotation>} value */
proto.ChatMessage.prototype.setAnnotationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.EventAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventAnnotation}
 */
proto.ChatMessage.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.EventAnnotation, opt_index);
};


proto.ChatMessage.prototype.clearAnnotationList = function() {
  this.setAnnotationList([]);
};


/**
 * optional MessageContent message_content = 3;
 * @return {?proto.MessageContent}
 */
proto.ChatMessage.prototype.getMessageContent = function() {
  return /** @type{?proto.MessageContent} */ (
    jspb.Message.getWrapperField(this, proto.MessageContent, 3));
};


/** @param {?proto.MessageContent|undefined} value */
proto.ChatMessage.prototype.setMessageContent = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ChatMessage.prototype.clearMessageContent = function() {
  this.setMessageContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatMessage.prototype.hasMessageContent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MembershipChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MembershipChange.repeatedFields_, null);
};
goog.inherits(proto.MembershipChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MembershipChange.displayName = 'proto.MembershipChange';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MembershipChange.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MembershipChange.prototype.toObject = function(opt_includeInstance) {
  return proto.MembershipChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MembershipChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MembershipChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    participantIdsList: jspb.Message.toObjectList(msg.getParticipantIdsList(),
    proto.ParticipantId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MembershipChange}
 */
proto.MembershipChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MembershipChange;
  return proto.MembershipChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MembershipChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MembershipChange}
 */
proto.MembershipChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MembershipChangeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.addParticipantIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MembershipChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MembershipChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MembershipChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MembershipChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MembershipChangeType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParticipantIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
};


/**
 * optional MembershipChangeType type = 1;
 * @return {!proto.MembershipChangeType}
 */
proto.MembershipChange.prototype.getType = function() {
  return /** @type {!proto.MembershipChangeType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.MembershipChangeType} value */
proto.MembershipChange.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MembershipChange.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MembershipChange.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ParticipantId participant_ids = 3;
 * @return {!Array.<!proto.ParticipantId>}
 */
proto.MembershipChange.prototype.getParticipantIdsList = function() {
  return /** @type{!Array.<!proto.ParticipantId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParticipantId, 3));
};


/** @param {!Array.<!proto.ParticipantId>} value */
proto.MembershipChange.prototype.setParticipantIdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ParticipantId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ParticipantId}
 */
proto.MembershipChange.prototype.addParticipantIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ParticipantId, opt_index);
};


proto.MembershipChange.prototype.clearParticipantIdsList = function() {
  this.setParticipantIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationRename = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationRename, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationRename.displayName = 'proto.ConversationRename';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationRename.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationRename.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationRename} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationRename.toObject = function(includeInstance, msg) {
  var f, obj = {
    newName: jspb.Message.getField(msg, 1),
    oldName: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationRename}
 */
proto.ConversationRename.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationRename;
  return proto.ConversationRename.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationRename} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationRename}
 */
proto.ConversationRename.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationRename.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationRename.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationRename} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationRename.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string new_name = 1;
 * @return {string}
 */
proto.ConversationRename.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ConversationRename.prototype.setNewName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ConversationRename.prototype.clearNewName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationRename.prototype.hasNewName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string old_name = 2;
 * @return {string}
 */
proto.ConversationRename.prototype.getOldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ConversationRename.prototype.setOldName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ConversationRename.prototype.clearOldName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationRename.prototype.hasOldName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HangoutEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.HangoutEvent.repeatedFields_, null);
};
goog.inherits(proto.HangoutEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.HangoutEvent.displayName = 'proto.HangoutEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.HangoutEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HangoutEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.HangoutEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HangoutEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HangoutEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getField(msg, 1),
    participantIdList: jspb.Message.toObjectList(msg.getParticipantIdList(),
    proto.ParticipantId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HangoutEvent}
 */
proto.HangoutEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HangoutEvent;
  return proto.HangoutEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HangoutEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HangoutEvent}
 */
proto.HangoutEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.HangoutEventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 2:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.addParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HangoutEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HangoutEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HangoutEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HangoutEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.HangoutEventType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParticipantIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
};


/**
 * optional HangoutEventType event_type = 1;
 * @return {!proto.HangoutEventType}
 */
proto.HangoutEvent.prototype.getEventType = function() {
  return /** @type {!proto.HangoutEventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.HangoutEventType} value */
proto.HangoutEvent.prototype.setEventType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.HangoutEvent.prototype.clearEventType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.HangoutEvent.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ParticipantId participant_id = 2;
 * @return {!Array.<!proto.ParticipantId>}
 */
proto.HangoutEvent.prototype.getParticipantIdList = function() {
  return /** @type{!Array.<!proto.ParticipantId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParticipantId, 2));
};


/** @param {!Array.<!proto.ParticipantId>} value */
proto.HangoutEvent.prototype.setParticipantIdList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ParticipantId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ParticipantId}
 */
proto.HangoutEvent.prototype.addParticipantId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ParticipantId, opt_index);
};


proto.HangoutEvent.prototype.clearParticipantIdList = function() {
  this.setParticipantIdList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OTRModification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OTRModification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OTRModification.displayName = 'proto.OTRModification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OTRModification.prototype.toObject = function(opt_includeInstance) {
  return proto.OTRModification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OTRModification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OTRModification.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldOtrStatus: jspb.Message.getField(msg, 1),
    newOtrStatus: jspb.Message.getField(msg, 2),
    oldOtrToggle: jspb.Message.getField(msg, 3),
    newOtrToggle: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OTRModification}
 */
proto.OTRModification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OTRModification;
  return proto.OTRModification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OTRModification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OTRModification}
 */
proto.OTRModification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setOldOtrStatus(value);
      break;
    case 2:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setNewOtrStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.OffTheRecordToggle} */ (reader.readEnum());
      msg.setOldOtrToggle(value);
      break;
    case 4:
      var value = /** @type {!proto.OffTheRecordToggle} */ (reader.readEnum());
      msg.setNewOtrToggle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OTRModification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OTRModification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OTRModification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OTRModification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional OffTheRecordStatus old_otr_status = 1;
 * @return {!proto.OffTheRecordStatus}
 */
proto.OTRModification.prototype.getOldOtrStatus = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.OTRModification.prototype.setOldOtrStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.OTRModification.prototype.clearOldOtrStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OTRModification.prototype.hasOldOtrStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OffTheRecordStatus new_otr_status = 2;
 * @return {!proto.OffTheRecordStatus}
 */
proto.OTRModification.prototype.getNewOtrStatus = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.OTRModification.prototype.setNewOtrStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.OTRModification.prototype.clearNewOtrStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OTRModification.prototype.hasNewOtrStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OffTheRecordToggle old_otr_toggle = 3;
 * @return {!proto.OffTheRecordToggle}
 */
proto.OTRModification.prototype.getOldOtrToggle = function() {
  return /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.OffTheRecordToggle} value */
proto.OTRModification.prototype.setOldOtrToggle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.OTRModification.prototype.clearOldOtrToggle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OTRModification.prototype.hasOldOtrToggle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OffTheRecordToggle new_otr_toggle = 4;
 * @return {!proto.OffTheRecordToggle}
 */
proto.OTRModification.prototype.getNewOtrToggle = function() {
  return /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.OffTheRecordToggle} value */
proto.OTRModification.prototype.setNewOtrToggle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.OTRModification.prototype.clearNewOtrToggle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OTRModification.prototype.hasNewOtrToggle = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HashModifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HashModifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.HashModifier.displayName = 'proto.HashModifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HashModifier.prototype.toObject = function(opt_includeInstance) {
  return proto.HashModifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HashModifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HashModifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateId: jspb.Message.getField(msg, 1),
    hashDiff: jspb.Message.getField(msg, 2),
    version: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HashModifier}
 */
proto.HashModifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HashModifier;
  return proto.HashModifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HashModifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HashModifier}
 */
proto.HashModifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHashDiff(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HashModifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HashModifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HashModifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HashModifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string update_id = 1;
 * @return {string}
 */
proto.HashModifier.prototype.getUpdateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.HashModifier.prototype.setUpdateId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.HashModifier.prototype.clearUpdateId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.HashModifier.prototype.hasUpdateId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 hash_diff = 2;
 * @return {number}
 */
proto.HashModifier.prototype.getHashDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.HashModifier.prototype.setHashDiff = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.HashModifier.prototype.clearHashDiff = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.HashModifier.prototype.hasHashDiff = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 version = 4;
 * @return {number}
 */
proto.HashModifier.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.HashModifier.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.HashModifier.prototype.clearVersion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.HashModifier.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Event.displayName = 'proto.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    senderId: (f = msg.getSenderId()) && proto.ParticipantId.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 3),
    selfEventState: (f = msg.getSelfEventState()) && proto.UserEventState.toObject(includeInstance, f),
    sourceType: jspb.Message.getField(msg, 6),
    chatMessage: (f = msg.getChatMessage()) && proto.ChatMessage.toObject(includeInstance, f),
    membershipChange: (f = msg.getMembershipChange()) && proto.MembershipChange.toObject(includeInstance, f),
    conversationRename: (f = msg.getConversationRename()) && proto.ConversationRename.toObject(includeInstance, f),
    hangoutEvent: (f = msg.getHangoutEvent()) && proto.HangoutEvent.toObject(includeInstance, f),
    eventId: jspb.Message.getField(msg, 12),
    expirationTimestamp: jspb.Message.getField(msg, 13),
    otrModification: (f = msg.getOtrModification()) && proto.OTRModification.toObject(includeInstance, f),
    advancesSortTimestamp: jspb.Message.getField(msg, 15),
    otrStatus: jspb.Message.getField(msg, 16),
    persisted: jspb.Message.getField(msg, 17),
    mediumType: (f = msg.getMediumType()) && proto.DeliveryMedium.toObject(includeInstance, f),
    eventType: jspb.Message.getField(msg, 23),
    eventVersion: jspb.Message.getField(msg, 24),
    hashModifier: (f = msg.getHashModifier()) && proto.HashModifier.toObject(includeInstance, f),
    groupLinkSharingModification: (f = msg.getGroupLinkSharingModification()) && proto.GroupLinkSharingModification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Event;
  return proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setSenderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.UserEventState;
      reader.readMessage(value,proto.UserEventState.deserializeBinaryFromReader);
      msg.setSelfEventState(value);
      break;
    case 6:
      var value = /** @type {!proto.SourceType} */ (reader.readEnum());
      msg.setSourceType(value);
      break;
    case 7:
      var value = new proto.ChatMessage;
      reader.readMessage(value,proto.ChatMessage.deserializeBinaryFromReader);
      msg.setChatMessage(value);
      break;
    case 9:
      var value = new proto.MembershipChange;
      reader.readMessage(value,proto.MembershipChange.deserializeBinaryFromReader);
      msg.setMembershipChange(value);
      break;
    case 10:
      var value = new proto.ConversationRename;
      reader.readMessage(value,proto.ConversationRename.deserializeBinaryFromReader);
      msg.setConversationRename(value);
      break;
    case 11:
      var value = new proto.HangoutEvent;
      reader.readMessage(value,proto.HangoutEvent.deserializeBinaryFromReader);
      msg.setHangoutEvent(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationTimestamp(value);
      break;
    case 14:
      var value = new proto.OTRModification;
      reader.readMessage(value,proto.OTRModification.deserializeBinaryFromReader);
      msg.setOtrModification(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdvancesSortTimestamp(value);
      break;
    case 16:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setOtrStatus(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersisted(value);
      break;
    case 20:
      var value = new proto.DeliveryMedium;
      reader.readMessage(value,proto.DeliveryMedium.deserializeBinaryFromReader);
      msg.setMediumType(value);
      break;
    case 23:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventVersion(value);
      break;
    case 26:
      var value = new proto.HashModifier;
      reader.readMessage(value,proto.HashModifier.deserializeBinaryFromReader);
      msg.setHashModifier(value);
      break;
    case 31:
      var value = new proto.GroupLinkSharingModification;
      reader.readMessage(value,proto.GroupLinkSharingModification.deserializeBinaryFromReader);
      msg.setGroupLinkSharingModification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getSenderId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSelfEventState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.UserEventState.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.SourceType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getChatMessage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getMembershipChange();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.MembershipChange.serializeBinaryToWriter
    );
  }
  f = message.getConversationRename();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ConversationRename.serializeBinaryToWriter
    );
  }
  f = message.getHangoutEvent();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.HangoutEvent.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getOtrModification();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.OTRModification.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getMediumType();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.DeliveryMedium.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.EventType} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeUint64(
      24,
      f
    );
  }
  f = message.getHashModifier();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.HashModifier.serializeBinaryToWriter
    );
  }
  f = message.getGroupLinkSharingModification();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.GroupLinkSharingModification.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.Event.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.Event.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Event.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParticipantId sender_id = 2;
 * @return {?proto.ParticipantId}
 */
proto.Event.prototype.getSenderId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 2));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.Event.prototype.setSenderId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Event.prototype.clearSenderId = function() {
  this.setSenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasSenderId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.Event.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Event.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UserEventState self_event_state = 4;
 * @return {?proto.UserEventState}
 */
proto.Event.prototype.getSelfEventState = function() {
  return /** @type{?proto.UserEventState} */ (
    jspb.Message.getWrapperField(this, proto.UserEventState, 4));
};


/** @param {?proto.UserEventState|undefined} value */
proto.Event.prototype.setSelfEventState = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Event.prototype.clearSelfEventState = function() {
  this.setSelfEventState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasSelfEventState = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SourceType source_type = 6;
 * @return {!proto.SourceType}
 */
proto.Event.prototype.getSourceType = function() {
  return /** @type {!proto.SourceType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.SourceType} value */
proto.Event.prototype.setSourceType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Event.prototype.clearSourceType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChatMessage chat_message = 7;
 * @return {?proto.ChatMessage}
 */
proto.Event.prototype.getChatMessage = function() {
  return /** @type{?proto.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.ChatMessage, 7));
};


/** @param {?proto.ChatMessage|undefined} value */
proto.Event.prototype.setChatMessage = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Event.prototype.clearChatMessage = function() {
  this.setChatMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasChatMessage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MembershipChange membership_change = 9;
 * @return {?proto.MembershipChange}
 */
proto.Event.prototype.getMembershipChange = function() {
  return /** @type{?proto.MembershipChange} */ (
    jspb.Message.getWrapperField(this, proto.MembershipChange, 9));
};


/** @param {?proto.MembershipChange|undefined} value */
proto.Event.prototype.setMembershipChange = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Event.prototype.clearMembershipChange = function() {
  this.setMembershipChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasMembershipChange = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ConversationRename conversation_rename = 10;
 * @return {?proto.ConversationRename}
 */
proto.Event.prototype.getConversationRename = function() {
  return /** @type{?proto.ConversationRename} */ (
    jspb.Message.getWrapperField(this, proto.ConversationRename, 10));
};


/** @param {?proto.ConversationRename|undefined} value */
proto.Event.prototype.setConversationRename = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Event.prototype.clearConversationRename = function() {
  this.setConversationRename(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasConversationRename = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional HangoutEvent hangout_event = 11;
 * @return {?proto.HangoutEvent}
 */
proto.Event.prototype.getHangoutEvent = function() {
  return /** @type{?proto.HangoutEvent} */ (
    jspb.Message.getWrapperField(this, proto.HangoutEvent, 11));
};


/** @param {?proto.HangoutEvent|undefined} value */
proto.Event.prototype.setHangoutEvent = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.Event.prototype.clearHangoutEvent = function() {
  this.setHangoutEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasHangoutEvent = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string event_id = 12;
 * @return {string}
 */
proto.Event.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Event.prototype.setEventId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Event.prototype.clearEventId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasEventId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint64 expiration_timestamp = 13;
 * @return {number}
 */
proto.Event.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Event.prototype.setExpirationTimestamp = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Event.prototype.clearExpirationTimestamp = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasExpirationTimestamp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional OTRModification otr_modification = 14;
 * @return {?proto.OTRModification}
 */
proto.Event.prototype.getOtrModification = function() {
  return /** @type{?proto.OTRModification} */ (
    jspb.Message.getWrapperField(this, proto.OTRModification, 14));
};


/** @param {?proto.OTRModification|undefined} value */
proto.Event.prototype.setOtrModification = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.Event.prototype.clearOtrModification = function() {
  this.setOtrModification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasOtrModification = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool advances_sort_timestamp = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Event.prototype.getAdvancesSortTimestamp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.Event.prototype.setAdvancesSortTimestamp = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.Event.prototype.clearAdvancesSortTimestamp = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasAdvancesSortTimestamp = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional OffTheRecordStatus otr_status = 16;
 * @return {!proto.OffTheRecordStatus}
 */
proto.Event.prototype.getOtrStatus = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.Event.prototype.setOtrStatus = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.Event.prototype.clearOtrStatus = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasOtrStatus = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool persisted = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Event.prototype.getPersisted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.Event.prototype.setPersisted = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.Event.prototype.clearPersisted = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasPersisted = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional DeliveryMedium medium_type = 20;
 * @return {?proto.DeliveryMedium}
 */
proto.Event.prototype.getMediumType = function() {
  return /** @type{?proto.DeliveryMedium} */ (
    jspb.Message.getWrapperField(this, proto.DeliveryMedium, 20));
};


/** @param {?proto.DeliveryMedium|undefined} value */
proto.Event.prototype.setMediumType = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.Event.prototype.clearMediumType = function() {
  this.setMediumType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasMediumType = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional EventType event_type = 23;
 * @return {!proto.EventType}
 */
proto.Event.prototype.getEventType = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {!proto.EventType} value */
proto.Event.prototype.setEventType = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.Event.prototype.clearEventType = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional uint64 event_version = 24;
 * @return {number}
 */
proto.Event.prototype.getEventVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.Event.prototype.setEventVersion = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.Event.prototype.clearEventVersion = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasEventVersion = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional HashModifier hash_modifier = 26;
 * @return {?proto.HashModifier}
 */
proto.Event.prototype.getHashModifier = function() {
  return /** @type{?proto.HashModifier} */ (
    jspb.Message.getWrapperField(this, proto.HashModifier, 26));
};


/** @param {?proto.HashModifier|undefined} value */
proto.Event.prototype.setHashModifier = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.Event.prototype.clearHashModifier = function() {
  this.setHashModifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasHashModifier = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional GroupLinkSharingModification group_link_sharing_modification = 31;
 * @return {?proto.GroupLinkSharingModification}
 */
proto.Event.prototype.getGroupLinkSharingModification = function() {
  return /** @type{?proto.GroupLinkSharingModification} */ (
    jspb.Message.getWrapperField(this, proto.GroupLinkSharingModification, 31));
};


/** @param {?proto.GroupLinkSharingModification|undefined} value */
proto.Event.prototype.setGroupLinkSharingModification = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.Event.prototype.clearGroupLinkSharingModification = function() {
  this.setGroupLinkSharingModification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasGroupLinkSharingModification = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserReadState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserReadState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserReadState.displayName = 'proto.UserReadState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserReadState.prototype.toObject = function(opt_includeInstance) {
  return proto.UserReadState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserReadState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserReadState.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantId: (f = msg.getParticipantId()) && proto.ParticipantId.toObject(includeInstance, f),
    latestReadTimestamp: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserReadState}
 */
proto.UserReadState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserReadState;
  return proto.UserReadState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserReadState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserReadState}
 */
proto.UserReadState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setParticipantId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestReadTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserReadState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserReadState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserReadState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserReadState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional ParticipantId participant_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.UserReadState.prototype.getParticipantId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.UserReadState.prototype.setParticipantId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UserReadState.prototype.clearParticipantId = function() {
  this.setParticipantId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserReadState.prototype.hasParticipantId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 latest_read_timestamp = 2;
 * @return {number}
 */
proto.UserReadState.prototype.getLatestReadTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UserReadState.prototype.setLatestReadTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UserReadState.prototype.clearLatestReadTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserReadState.prototype.hasLatestReadTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeliveryMedium = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeliveryMedium, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeliveryMedium.displayName = 'proto.DeliveryMedium';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeliveryMedium.prototype.toObject = function(opt_includeInstance) {
  return proto.DeliveryMedium.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeliveryMedium} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeliveryMedium.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediumType: jspb.Message.getField(msg, 1),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeliveryMedium}
 */
proto.DeliveryMedium.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeliveryMedium;
  return proto.DeliveryMedium.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeliveryMedium} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeliveryMedium}
 */
proto.DeliveryMedium.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DeliveryMediumType} */ (reader.readEnum());
      msg.setMediumType(value);
      break;
    case 2:
      var value = new proto.PhoneNumber;
      reader.readMessage(value,proto.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeliveryMedium.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeliveryMedium.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeliveryMedium} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeliveryMedium.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.DeliveryMediumType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeliveryMediumType medium_type = 1;
 * @return {!proto.DeliveryMediumType}
 */
proto.DeliveryMedium.prototype.getMediumType = function() {
  return /** @type {!proto.DeliveryMediumType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DeliveryMediumType} value */
proto.DeliveryMedium.prototype.setMediumType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DeliveryMedium.prototype.clearMediumType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeliveryMedium.prototype.hasMediumType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhoneNumber phone_number = 2;
 * @return {?proto.PhoneNumber}
 */
proto.DeliveryMedium.prototype.getPhoneNumber = function() {
  return /** @type{?proto.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.PhoneNumber, 2));
};


/** @param {?proto.PhoneNumber|undefined} value */
proto.DeliveryMedium.prototype.setPhoneNumber = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DeliveryMedium.prototype.clearPhoneNumber = function() {
  this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeliveryMedium.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeliveryMediumOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeliveryMediumOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeliveryMediumOption.displayName = 'proto.DeliveryMediumOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeliveryMediumOption.prototype.toObject = function(opt_includeInstance) {
  return proto.DeliveryMediumOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeliveryMediumOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeliveryMediumOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    deliveryMedium: (f = msg.getDeliveryMedium()) && proto.DeliveryMedium.toObject(includeInstance, f),
    currentDefault: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeliveryMediumOption}
 */
proto.DeliveryMediumOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeliveryMediumOption;
  return proto.DeliveryMediumOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeliveryMediumOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeliveryMediumOption}
 */
proto.DeliveryMediumOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DeliveryMedium;
      reader.readMessage(value,proto.DeliveryMedium.deserializeBinaryFromReader);
      msg.setDeliveryMedium(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCurrentDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeliveryMediumOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeliveryMediumOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeliveryMediumOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeliveryMediumOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeliveryMedium();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DeliveryMedium.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional DeliveryMedium delivery_medium = 1;
 * @return {?proto.DeliveryMedium}
 */
proto.DeliveryMediumOption.prototype.getDeliveryMedium = function() {
  return /** @type{?proto.DeliveryMedium} */ (
    jspb.Message.getWrapperField(this, proto.DeliveryMedium, 1));
};


/** @param {?proto.DeliveryMedium|undefined} value */
proto.DeliveryMediumOption.prototype.setDeliveryMedium = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DeliveryMediumOption.prototype.clearDeliveryMedium = function() {
  this.setDeliveryMedium(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeliveryMediumOption.prototype.hasDeliveryMedium = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool current_default = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeliveryMediumOption.prototype.getCurrentDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DeliveryMediumOption.prototype.setCurrentDefault = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DeliveryMediumOption.prototype.clearCurrentDefault = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeliveryMediumOption.prototype.hasCurrentDefault = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserConversationState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UserConversationState.repeatedFields_, null);
};
goog.inherits(proto.UserConversationState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserConversationState.displayName = 'proto.UserConversationState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UserConversationState.repeatedFields_ = [10,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserConversationState.prototype.toObject = function(opt_includeInstance) {
  return proto.UserConversationState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserConversationState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserConversationState.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientGeneratedId: jspb.Message.getField(msg, 2),
    selfReadState: (f = msg.getSelfReadState()) && proto.UserReadState.toObject(includeInstance, f),
    status: jspb.Message.getField(msg, 8),
    notificationLevel: jspb.Message.getField(msg, 9),
    viewList: jspb.Message.getRepeatedField(msg, 10),
    inviterId: (f = msg.getInviterId()) && proto.ParticipantId.toObject(includeInstance, f),
    inviteTimestamp: jspb.Message.getField(msg, 12),
    sortTimestamp: jspb.Message.getField(msg, 13),
    activeTimestamp: jspb.Message.getField(msg, 14),
    inviteAffinity: jspb.Message.getField(msg, 15),
    deliveryMediumOptionList: jspb.Message.toObjectList(msg.getDeliveryMediumOptionList(),
    proto.DeliveryMediumOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserConversationState}
 */
proto.UserConversationState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserConversationState;
  return proto.UserConversationState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserConversationState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserConversationState}
 */
proto.UserConversationState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientGeneratedId(value);
      break;
    case 7:
      var value = new proto.UserReadState;
      reader.readMessage(value,proto.UserReadState.deserializeBinaryFromReader);
      msg.setSelfReadState(value);
      break;
    case 8:
      var value = /** @type {!proto.ConversationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {!proto.NotificationLevel} */ (reader.readEnum());
      msg.setNotificationLevel(value);
      break;
    case 10:
      var value = /** @type {!proto.ConversationView} */ (reader.readEnum());
      msg.addView(value);
      break;
    case 11:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setInviterId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInviteTimestamp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSortTimestamp(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveTimestamp(value);
      break;
    case 15:
      var value = /** @type {!proto.InvitationAffinity} */ (reader.readEnum());
      msg.setInviteAffinity(value);
      break;
    case 17:
      var value = new proto.DeliveryMediumOption;
      reader.readMessage(value,proto.DeliveryMediumOption.deserializeBinaryFromReader);
      msg.addDeliveryMediumOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserConversationState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserConversationState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserConversationState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserConversationState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSelfReadState();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.UserReadState.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ConversationStatus} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {!proto.NotificationLevel} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getViewList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      10,
      f
    );
  }
  f = message.getInviterId();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = /** @type {!proto.InvitationAffinity} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getDeliveryMediumOptionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.DeliveryMediumOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_generated_id = 2;
 * @return {string}
 */
proto.UserConversationState.prototype.getClientGeneratedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UserConversationState.prototype.setClientGeneratedId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UserConversationState.prototype.clearClientGeneratedId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasClientGeneratedId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserReadState self_read_state = 7;
 * @return {?proto.UserReadState}
 */
proto.UserConversationState.prototype.getSelfReadState = function() {
  return /** @type{?proto.UserReadState} */ (
    jspb.Message.getWrapperField(this, proto.UserReadState, 7));
};


/** @param {?proto.UserReadState|undefined} value */
proto.UserConversationState.prototype.setSelfReadState = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.UserConversationState.prototype.clearSelfReadState = function() {
  this.setSelfReadState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasSelfReadState = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ConversationStatus status = 8;
 * @return {!proto.ConversationStatus}
 */
proto.UserConversationState.prototype.getStatus = function() {
  return /** @type {!proto.ConversationStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.ConversationStatus} value */
proto.UserConversationState.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.UserConversationState.prototype.clearStatus = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NotificationLevel notification_level = 9;
 * @return {!proto.NotificationLevel}
 */
proto.UserConversationState.prototype.getNotificationLevel = function() {
  return /** @type {!proto.NotificationLevel} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.NotificationLevel} value */
proto.UserConversationState.prototype.setNotificationLevel = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.UserConversationState.prototype.clearNotificationLevel = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasNotificationLevel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated ConversationView view = 10;
 * @return {!Array.<!proto.ConversationView>}
 */
proto.UserConversationState.prototype.getViewList = function() {
  return /** @type {!Array.<!proto.ConversationView>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<!proto.ConversationView>} value */
proto.UserConversationState.prototype.setViewList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.ConversationView} value
 * @param {number=} opt_index
 */
proto.UserConversationState.prototype.addView = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.UserConversationState.prototype.clearViewList = function() {
  this.setViewList([]);
};


/**
 * optional ParticipantId inviter_id = 11;
 * @return {?proto.ParticipantId}
 */
proto.UserConversationState.prototype.getInviterId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 11));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.UserConversationState.prototype.setInviterId = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.UserConversationState.prototype.clearInviterId = function() {
  this.setInviterId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasInviterId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint64 invite_timestamp = 12;
 * @return {number}
 */
proto.UserConversationState.prototype.getInviteTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.UserConversationState.prototype.setInviteTimestamp = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.UserConversationState.prototype.clearInviteTimestamp = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasInviteTimestamp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint64 sort_timestamp = 13;
 * @return {number}
 */
proto.UserConversationState.prototype.getSortTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.UserConversationState.prototype.setSortTimestamp = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.UserConversationState.prototype.clearSortTimestamp = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasSortTimestamp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 active_timestamp = 14;
 * @return {number}
 */
proto.UserConversationState.prototype.getActiveTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.UserConversationState.prototype.setActiveTimestamp = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.UserConversationState.prototype.clearActiveTimestamp = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasActiveTimestamp = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional InvitationAffinity invite_affinity = 15;
 * @return {!proto.InvitationAffinity}
 */
proto.UserConversationState.prototype.getInviteAffinity = function() {
  return /** @type {!proto.InvitationAffinity} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.InvitationAffinity} value */
proto.UserConversationState.prototype.setInviteAffinity = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.UserConversationState.prototype.clearInviteAffinity = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserConversationState.prototype.hasInviteAffinity = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * repeated DeliveryMediumOption delivery_medium_option = 17;
 * @return {!Array.<!proto.DeliveryMediumOption>}
 */
proto.UserConversationState.prototype.getDeliveryMediumOptionList = function() {
  return /** @type{!Array.<!proto.DeliveryMediumOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DeliveryMediumOption, 17));
};


/** @param {!Array.<!proto.DeliveryMediumOption>} value */
proto.UserConversationState.prototype.setDeliveryMediumOptionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.DeliveryMediumOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DeliveryMediumOption}
 */
proto.UserConversationState.prototype.addDeliveryMediumOption = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.DeliveryMediumOption, opt_index);
};


proto.UserConversationState.prototype.clearDeliveryMediumOptionList = function() {
  this.setDeliveryMediumOptionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationParticipantData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationParticipantData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationParticipantData.displayName = 'proto.ConversationParticipantData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationParticipantData.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationParticipantData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationParticipantData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationParticipantData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.ParticipantId.toObject(includeInstance, f),
    fallbackName: jspb.Message.getField(msg, 2),
    invitationStatus: jspb.Message.getField(msg, 3),
    participantType: jspb.Message.getField(msg, 5),
    newInvitationStatus: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationParticipantData}
 */
proto.ConversationParticipantData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationParticipantData;
  return proto.ConversationParticipantData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationParticipantData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationParticipantData}
 */
proto.ConversationParticipantData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackName(value);
      break;
    case 3:
      var value = /** @type {!proto.InvitationStatus} */ (reader.readEnum());
      msg.setInvitationStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.ParticipantType} */ (reader.readEnum());
      msg.setParticipantType(value);
      break;
    case 6:
      var value = /** @type {!proto.InvitationStatus} */ (reader.readEnum());
      msg.setNewInvitationStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationParticipantData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationParticipantData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationParticipantData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationParticipantData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.InvitationStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.ParticipantType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!proto.InvitationStatus} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional ParticipantId id = 1;
 * @return {?proto.ParticipantId}
 */
proto.ConversationParticipantData.prototype.getId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.ConversationParticipantData.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConversationParticipantData.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationParticipantData.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fallback_name = 2;
 * @return {string}
 */
proto.ConversationParticipantData.prototype.getFallbackName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ConversationParticipantData.prototype.setFallbackName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ConversationParticipantData.prototype.clearFallbackName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationParticipantData.prototype.hasFallbackName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InvitationStatus invitation_status = 3;
 * @return {!proto.InvitationStatus}
 */
proto.ConversationParticipantData.prototype.getInvitationStatus = function() {
  return /** @type {!proto.InvitationStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.InvitationStatus} value */
proto.ConversationParticipantData.prototype.setInvitationStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ConversationParticipantData.prototype.clearInvitationStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationParticipantData.prototype.hasInvitationStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ParticipantType participant_type = 5;
 * @return {!proto.ParticipantType}
 */
proto.ConversationParticipantData.prototype.getParticipantType = function() {
  return /** @type {!proto.ParticipantType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ParticipantType} value */
proto.ConversationParticipantData.prototype.setParticipantType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ConversationParticipantData.prototype.clearParticipantType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationParticipantData.prototype.hasParticipantType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InvitationStatus new_invitation_status = 6;
 * @return {!proto.InvitationStatus}
 */
proto.ConversationParticipantData.prototype.getNewInvitationStatus = function() {
  return /** @type {!proto.InvitationStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.InvitationStatus} value */
proto.ConversationParticipantData.prototype.setNewInvitationStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ConversationParticipantData.prototype.clearNewInvitationStatus = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationParticipantData.prototype.hasNewInvitationStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Conversation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Conversation.repeatedFields_, null);
};
goog.inherits(proto.Conversation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Conversation.displayName = 'proto.Conversation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Conversation.repeatedFields_ = [8,13,14,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Conversation.prototype.toObject = function(opt_includeInstance) {
  return proto.Conversation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Conversation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Conversation.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3),
    selfConversationState: (f = msg.getSelfConversationState()) && proto.UserConversationState.toObject(includeInstance, f),
    readStateList: jspb.Message.toObjectList(msg.getReadStateList(),
    proto.UserReadState.toObject, includeInstance),
    hasActiveHangout: jspb.Message.getField(msg, 9),
    otrStatus: jspb.Message.getField(msg, 10),
    otrToggle: jspb.Message.getField(msg, 11),
    conversationHistorySupported: jspb.Message.getField(msg, 12),
    currentParticipantList: jspb.Message.toObjectList(msg.getCurrentParticipantList(),
    proto.ParticipantId.toObject, includeInstance),
    participantDataList: jspb.Message.toObjectList(msg.getParticipantDataList(),
    proto.ConversationParticipantData.toObject, includeInstance),
    networkTypeList: jspb.Message.getRepeatedField(msg, 18),
    forceHistoryState: jspb.Message.getField(msg, 19),
    groupLinkSharingStatus: jspb.Message.getField(msg, 22)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Conversation}
 */
proto.Conversation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Conversation;
  return proto.Conversation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Conversation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Conversation}
 */
proto.Conversation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {!proto.ConversationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.UserConversationState;
      reader.readMessage(value,proto.UserConversationState.deserializeBinaryFromReader);
      msg.setSelfConversationState(value);
      break;
    case 8:
      var value = new proto.UserReadState;
      reader.readMessage(value,proto.UserReadState.deserializeBinaryFromReader);
      msg.addReadState(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasActiveHangout(value);
      break;
    case 10:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setOtrStatus(value);
      break;
    case 11:
      var value = /** @type {!proto.OffTheRecordToggle} */ (reader.readEnum());
      msg.setOtrToggle(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConversationHistorySupported(value);
      break;
    case 13:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.addCurrentParticipant(value);
      break;
    case 14:
      var value = new proto.ConversationParticipantData;
      reader.readMessage(value,proto.ConversationParticipantData.deserializeBinaryFromReader);
      msg.addParticipantData(value);
      break;
    case 18:
      var value = /** @type {!proto.NetworkType} */ (reader.readEnum());
      msg.addNetworkType(value);
      break;
    case 19:
      var value = /** @type {!proto.ForceHistory} */ (reader.readEnum());
      msg.setForceHistoryState(value);
      break;
    case 22:
      var value = /** @type {!proto.GroupLinkSharingStatus} */ (reader.readEnum());
      msg.setGroupLinkSharingStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Conversation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Conversation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Conversation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Conversation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ConversationType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSelfConversationState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.UserConversationState.serializeBinaryToWriter
    );
  }
  f = message.getReadStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.UserReadState.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCurrentParticipantList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getParticipantDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.ConversationParticipantData.serializeBinaryToWriter
    );
  }
  f = message.getNetworkTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      18,
      f
    );
  }
  f = /** @type {!proto.ForceHistory} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeEnum(
      22,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.Conversation.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.Conversation.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Conversation.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationType type = 2;
 * @return {!proto.ConversationType}
 */
proto.Conversation.prototype.getType = function() {
  return /** @type {!proto.ConversationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ConversationType} value */
proto.Conversation.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Conversation.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Conversation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Conversation.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Conversation.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UserConversationState self_conversation_state = 4;
 * @return {?proto.UserConversationState}
 */
proto.Conversation.prototype.getSelfConversationState = function() {
  return /** @type{?proto.UserConversationState} */ (
    jspb.Message.getWrapperField(this, proto.UserConversationState, 4));
};


/** @param {?proto.UserConversationState|undefined} value */
proto.Conversation.prototype.setSelfConversationState = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Conversation.prototype.clearSelfConversationState = function() {
  this.setSelfConversationState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasSelfConversationState = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated UserReadState read_state = 8;
 * @return {!Array.<!proto.UserReadState>}
 */
proto.Conversation.prototype.getReadStateList = function() {
  return /** @type{!Array.<!proto.UserReadState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UserReadState, 8));
};


/** @param {!Array.<!proto.UserReadState>} value */
proto.Conversation.prototype.setReadStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.UserReadState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UserReadState}
 */
proto.Conversation.prototype.addReadState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.UserReadState, opt_index);
};


proto.Conversation.prototype.clearReadStateList = function() {
  this.setReadStateList([]);
};


/**
 * optional bool has_active_hangout = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Conversation.prototype.getHasActiveHangout = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Conversation.prototype.setHasActiveHangout = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Conversation.prototype.clearHasActiveHangout = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasHasActiveHangout = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OffTheRecordStatus otr_status = 10;
 * @return {!proto.OffTheRecordStatus}
 */
proto.Conversation.prototype.getOtrStatus = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.Conversation.prototype.setOtrStatus = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Conversation.prototype.clearOtrStatus = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasOtrStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional OffTheRecordToggle otr_toggle = 11;
 * @return {!proto.OffTheRecordToggle}
 */
proto.Conversation.prototype.getOtrToggle = function() {
  return /** @type {!proto.OffTheRecordToggle} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.OffTheRecordToggle} value */
proto.Conversation.prototype.setOtrToggle = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Conversation.prototype.clearOtrToggle = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasOtrToggle = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool conversation_history_supported = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Conversation.prototype.getConversationHistorySupported = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.Conversation.prototype.setConversationHistorySupported = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Conversation.prototype.clearConversationHistorySupported = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasConversationHistorySupported = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated ParticipantId current_participant = 13;
 * @return {!Array.<!proto.ParticipantId>}
 */
proto.Conversation.prototype.getCurrentParticipantList = function() {
  return /** @type{!Array.<!proto.ParticipantId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParticipantId, 13));
};


/** @param {!Array.<!proto.ParticipantId>} value */
proto.Conversation.prototype.setCurrentParticipantList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.ParticipantId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ParticipantId}
 */
proto.Conversation.prototype.addCurrentParticipant = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.ParticipantId, opt_index);
};


proto.Conversation.prototype.clearCurrentParticipantList = function() {
  this.setCurrentParticipantList([]);
};


/**
 * repeated ConversationParticipantData participant_data = 14;
 * @return {!Array.<!proto.ConversationParticipantData>}
 */
proto.Conversation.prototype.getParticipantDataList = function() {
  return /** @type{!Array.<!proto.ConversationParticipantData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConversationParticipantData, 14));
};


/** @param {!Array.<!proto.ConversationParticipantData>} value */
proto.Conversation.prototype.setParticipantDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.ConversationParticipantData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConversationParticipantData}
 */
proto.Conversation.prototype.addParticipantData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.ConversationParticipantData, opt_index);
};


proto.Conversation.prototype.clearParticipantDataList = function() {
  this.setParticipantDataList([]);
};


/**
 * repeated NetworkType network_type = 18;
 * @return {!Array.<!proto.NetworkType>}
 */
proto.Conversation.prototype.getNetworkTypeList = function() {
  return /** @type {!Array.<!proto.NetworkType>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array.<!proto.NetworkType>} value */
proto.Conversation.prototype.setNetworkTypeList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!proto.NetworkType} value
 * @param {number=} opt_index
 */
proto.Conversation.prototype.addNetworkType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.Conversation.prototype.clearNetworkTypeList = function() {
  this.setNetworkTypeList([]);
};


/**
 * optional ForceHistory force_history_state = 19;
 * @return {!proto.ForceHistory}
 */
proto.Conversation.prototype.getForceHistoryState = function() {
  return /** @type {!proto.ForceHistory} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.ForceHistory} value */
proto.Conversation.prototype.setForceHistoryState = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.Conversation.prototype.clearForceHistoryState = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasForceHistoryState = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional GroupLinkSharingStatus group_link_sharing_status = 22;
 * @return {!proto.GroupLinkSharingStatus}
 */
proto.Conversation.prototype.getGroupLinkSharingStatus = function() {
  return /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {!proto.GroupLinkSharingStatus} value */
proto.Conversation.prototype.setGroupLinkSharingStatus = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.Conversation.prototype.clearGroupLinkSharingStatus = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Conversation.prototype.hasGroupLinkSharingStatus = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EasterEgg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EasterEgg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EasterEgg.displayName = 'proto.EasterEgg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EasterEgg.prototype.toObject = function(opt_includeInstance) {
  return proto.EasterEgg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EasterEgg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEgg.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EasterEgg}
 */
proto.EasterEgg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EasterEgg;
  return proto.EasterEgg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EasterEgg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EasterEgg}
 */
proto.EasterEgg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EasterEgg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EasterEgg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EasterEgg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEgg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.EasterEgg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EasterEgg.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EasterEgg.prototype.clearMessage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEgg.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockStateChange.displayName = 'proto.BlockStateChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockStateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantId: (f = msg.getParticipantId()) && proto.ParticipantId.toObject(includeInstance, f),
    newBlockState: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockStateChange}
 */
proto.BlockStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockStateChange;
  return proto.BlockStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockStateChange}
 */
proto.BlockStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setParticipantId(value);
      break;
    case 2:
      var value = /** @type {!proto.BlockState} */ (reader.readEnum());
      msg.setNewBlockState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockStateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockStateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.BlockState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ParticipantId participant_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.BlockStateChange.prototype.getParticipantId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.BlockStateChange.prototype.setParticipantId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BlockStateChange.prototype.clearParticipantId = function() {
  this.setParticipantId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockStateChange.prototype.hasParticipantId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockState new_block_state = 2;
 * @return {!proto.BlockState}
 */
proto.BlockStateChange.prototype.getNewBlockState = function() {
  return /** @type {!proto.BlockState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.BlockState} value */
proto.BlockStateChange.prototype.setNewBlockState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BlockStateChange.prototype.clearNewBlockState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockStateChange.prototype.hasNewBlockState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Photo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Photo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Photo.displayName = 'proto.Photo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Photo.prototype.toObject = function(opt_includeInstance) {
  return proto.Photo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Photo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Photo.toObject = function(includeInstance, msg) {
  var f, obj = {
    photoId: jspb.Message.getField(msg, 1),
    deleteAlbumlessSourcePhoto: jspb.Message.getField(msg, 2),
    userId: jspb.Message.getField(msg, 3),
    isCustomUserId: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Photo}
 */
proto.Photo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Photo;
  return proto.Photo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Photo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Photo}
 */
proto.Photo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhotoId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteAlbumlessSourcePhoto(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCustomUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Photo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Photo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Photo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Photo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string photo_id = 1;
 * @return {string}
 */
proto.Photo.prototype.getPhotoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Photo.prototype.setPhotoId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Photo.prototype.clearPhotoId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Photo.prototype.hasPhotoId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool delete_albumless_source_photo = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Photo.prototype.getDeleteAlbumlessSourcePhoto = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Photo.prototype.setDeleteAlbumlessSourcePhoto = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Photo.prototype.clearDeleteAlbumlessSourcePhoto = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Photo.prototype.hasDeleteAlbumlessSourcePhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.Photo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Photo.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Photo.prototype.clearUserId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Photo.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_custom_user_id = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Photo.prototype.getIsCustomUserId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Photo.prototype.setIsCustomUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Photo.prototype.clearIsCustomUserId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Photo.prototype.hasIsCustomUserId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExistingMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExistingMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExistingMedia.displayName = 'proto.ExistingMedia';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExistingMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.ExistingMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExistingMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExistingMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
    photo: (f = msg.getPhoto()) && proto.Photo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExistingMedia}
 */
proto.ExistingMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExistingMedia;
  return proto.ExistingMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExistingMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExistingMedia}
 */
proto.ExistingMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Photo;
      reader.readMessage(value,proto.Photo.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExistingMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExistingMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExistingMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExistingMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Photo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Photo photo = 1;
 * @return {?proto.Photo}
 */
proto.ExistingMedia.prototype.getPhoto = function() {
  return /** @type{?proto.Photo} */ (
    jspb.Message.getWrapperField(this, proto.Photo, 1));
};


/** @param {?proto.Photo|undefined} value */
proto.ExistingMedia.prototype.setPhoto = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ExistingMedia.prototype.clearPhoto = function() {
  this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ExistingMedia.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventRequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventRequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventRequestHeader.displayName = 'proto.EventRequestHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventRequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.EventRequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventRequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventRequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    clientGeneratedId: jspb.Message.getField(msg, 2),
    expectedOtr: jspb.Message.getField(msg, 3),
    deliveryMedium: (f = msg.getDeliveryMedium()) && proto.DeliveryMedium.toObject(includeInstance, f),
    eventType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventRequestHeader}
 */
proto.EventRequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventRequestHeader;
  return proto.EventRequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventRequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventRequestHeader}
 */
proto.EventRequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientGeneratedId(value);
      break;
    case 3:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setExpectedOtr(value);
      break;
    case 4:
      var value = new proto.DeliveryMedium;
      reader.readMessage(value,proto.DeliveryMedium.deserializeBinaryFromReader);
      msg.setDeliveryMedium(value);
      break;
    case 5:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventRequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventRequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventRequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventRequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDeliveryMedium();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DeliveryMedium.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.EventType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.EventRequestHeader.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.EventRequestHeader.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EventRequestHeader.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventRequestHeader.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 client_generated_id = 2;
 * @return {number}
 */
proto.EventRequestHeader.prototype.getClientGeneratedId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.EventRequestHeader.prototype.setClientGeneratedId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EventRequestHeader.prototype.clearClientGeneratedId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventRequestHeader.prototype.hasClientGeneratedId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OffTheRecordStatus expected_otr = 3;
 * @return {!proto.OffTheRecordStatus}
 */
proto.EventRequestHeader.prototype.getExpectedOtr = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.EventRequestHeader.prototype.setExpectedOtr = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EventRequestHeader.prototype.clearExpectedOtr = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventRequestHeader.prototype.hasExpectedOtr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeliveryMedium delivery_medium = 4;
 * @return {?proto.DeliveryMedium}
 */
proto.EventRequestHeader.prototype.getDeliveryMedium = function() {
  return /** @type{?proto.DeliveryMedium} */ (
    jspb.Message.getWrapperField(this, proto.DeliveryMedium, 4));
};


/** @param {?proto.DeliveryMedium|undefined} value */
proto.EventRequestHeader.prototype.setDeliveryMedium = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.EventRequestHeader.prototype.clearDeliveryMedium = function() {
  this.setDeliveryMedium(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventRequestHeader.prototype.hasDeliveryMedium = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventType event_type = 5;
 * @return {!proto.EventType}
 */
proto.EventRequestHeader.prototype.getEventType = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.EventType} value */
proto.EventRequestHeader.prototype.setEventType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.EventRequestHeader.prototype.clearEventType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventRequestHeader.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientVersion.displayName = 'proto.ClientVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getField(msg, 1),
    buildType: jspb.Message.getField(msg, 2),
    majorVersion: jspb.Message.getField(msg, 3),
    versionTimestamp: jspb.Message.getField(msg, 4),
    deviceOsVersion: jspb.Message.getField(msg, 5),
    deviceHardware: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientVersion}
 */
proto.ClientVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientVersion;
  return proto.ClientVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientVersion}
 */
proto.ClientVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ClientId} */ (reader.readEnum());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientBuildType} */ (reader.readEnum());
      msg.setBuildType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMajorVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersionTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceOsVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceHardware(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ClientId} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.ClientBuildType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional ClientId client_id = 1;
 * @return {!proto.ClientId}
 */
proto.ClientVersion.prototype.getClientId = function() {
  return /** @type {!proto.ClientId} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ClientId} value */
proto.ClientVersion.prototype.setClientId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ClientVersion.prototype.clearClientId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasClientId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientBuildType build_type = 2;
 * @return {!proto.ClientBuildType}
 */
proto.ClientVersion.prototype.getBuildType = function() {
  return /** @type {!proto.ClientBuildType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientBuildType} value */
proto.ClientVersion.prototype.setBuildType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ClientVersion.prototype.clearBuildType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasBuildType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string major_version = 3;
 * @return {string}
 */
proto.ClientVersion.prototype.getMajorVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ClientVersion.prototype.setMajorVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ClientVersion.prototype.clearMajorVersion = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasMajorVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 version_timestamp = 4;
 * @return {number}
 */
proto.ClientVersion.prototype.getVersionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ClientVersion.prototype.setVersionTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ClientVersion.prototype.clearVersionTimestamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasVersionTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string device_os_version = 5;
 * @return {string}
 */
proto.ClientVersion.prototype.getDeviceOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ClientVersion.prototype.setDeviceOsVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ClientVersion.prototype.clearDeviceOsVersion = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasDeviceOsVersion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string device_hardware = 6;
 * @return {string}
 */
proto.ClientVersion.prototype.getDeviceHardware = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ClientVersion.prototype.setDeviceHardware = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ClientVersion.prototype.clearDeviceHardware = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientVersion.prototype.hasDeviceHardware = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RequestHeader.displayName = 'proto.RequestHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.RequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientVersion: (f = msg.getClientVersion()) && proto.ClientVersion.toObject(includeInstance, f),
    clientIdentifier: (f = msg.getClientIdentifier()) && proto.ClientIdentifier.toObject(includeInstance, f),
    languageCode: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RequestHeader}
 */
proto.RequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RequestHeader;
  return proto.RequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RequestHeader}
 */
proto.RequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientVersion;
      reader.readMessage(value,proto.ClientVersion.deserializeBinaryFromReader);
      msg.setClientVersion(value);
      break;
    case 2:
      var value = new proto.ClientIdentifier;
      reader.readMessage(value,proto.ClientIdentifier.deserializeBinaryFromReader);
      msg.setClientIdentifier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientVersion.serializeBinaryToWriter
    );
  }
  f = message.getClientIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ClientIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional ClientVersion client_version = 1;
 * @return {?proto.ClientVersion}
 */
proto.RequestHeader.prototype.getClientVersion = function() {
  return /** @type{?proto.ClientVersion} */ (
    jspb.Message.getWrapperField(this, proto.ClientVersion, 1));
};


/** @param {?proto.ClientVersion|undefined} value */
proto.RequestHeader.prototype.setClientVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RequestHeader.prototype.clearClientVersion = function() {
  this.setClientVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestHeader.prototype.hasClientVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientIdentifier client_identifier = 2;
 * @return {?proto.ClientIdentifier}
 */
proto.RequestHeader.prototype.getClientIdentifier = function() {
  return /** @type{?proto.ClientIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.ClientIdentifier, 2));
};


/** @param {?proto.ClientIdentifier|undefined} value */
proto.RequestHeader.prototype.setClientIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RequestHeader.prototype.clearClientIdentifier = function() {
  this.setClientIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestHeader.prototype.hasClientIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string language_code = 4;
 * @return {string}
 */
proto.RequestHeader.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RequestHeader.prototype.setLanguageCode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.RequestHeader.prototype.clearLanguageCode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestHeader.prototype.hasLanguageCode = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResponseHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResponseHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResponseHeader.displayName = 'proto.ResponseHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResponseHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.ResponseHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResponseHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponseHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getField(msg, 1),
    errorDescription: jspb.Message.getField(msg, 2),
    debugUrl: jspb.Message.getField(msg, 3),
    requestTraceId: jspb.Message.getField(msg, 4),
    currentServerTime: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResponseHeader}
 */
proto.ResponseHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResponseHeader;
  return proto.ResponseHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResponseHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResponseHeader}
 */
proto.ResponseHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestTraceId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentServerTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResponseHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResponseHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResponseHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponseHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ResponseStatus} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {!proto.ResponseStatus}
 */
proto.ResponseHeader.prototype.getStatus = function() {
  return /** @type {!proto.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResponseStatus} value */
proto.ResponseHeader.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ResponseHeader.prototype.clearStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseHeader.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error_description = 2;
 * @return {string}
 */
proto.ResponseHeader.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ResponseHeader.prototype.setErrorDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ResponseHeader.prototype.clearErrorDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseHeader.prototype.hasErrorDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string debug_url = 3;
 * @return {string}
 */
proto.ResponseHeader.prototype.getDebugUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ResponseHeader.prototype.setDebugUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ResponseHeader.prototype.clearDebugUrl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseHeader.prototype.hasDebugUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string request_trace_id = 4;
 * @return {string}
 */
proto.ResponseHeader.prototype.getRequestTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ResponseHeader.prototype.setRequestTraceId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ResponseHeader.prototype.clearRequestTraceId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseHeader.prototype.hasRequestTraceId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 current_server_time = 5;
 * @return {number}
 */
proto.ResponseHeader.prototype.getCurrentServerTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ResponseHeader.prototype.setCurrentServerTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ResponseHeader.prototype.clearCurrentServerTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseHeader.prototype.hasCurrentServerTime = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Entity.displayName = 'proto.Entity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.ParticipantId.toObject(includeInstance, f),
    presence: (f = msg.getPresence()) && proto.Presence.toObject(includeInstance, f),
    properties: (f = msg.getProperties()) && proto.EntityProperties.toObject(includeInstance, f),
    entityType: jspb.Message.getField(msg, 13),
    hadPastHangoutState: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Entity}
 */
proto.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Entity;
  return proto.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Entity}
 */
proto.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 8:
      var value = new proto.Presence;
      reader.readMessage(value,proto.Presence.deserializeBinaryFromReader);
      msg.setPresence(value);
      break;
    case 10:
      var value = new proto.EntityProperties;
      reader.readMessage(value,proto.EntityProperties.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    case 13:
      var value = /** @type {!proto.ParticipantType} */ (reader.readEnum());
      msg.setEntityType(value);
      break;
    case 16:
      var value = /** @type {!proto.Entity.PastHangoutState} */ (reader.readEnum());
      msg.setHadPastHangoutState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getPresence();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Presence.serializeBinaryToWriter
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.EntityProperties.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ParticipantType} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = /** @type {!proto.Entity.PastHangoutState} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Entity.PastHangoutState = {
  PAST_HANGOUT_STATE_UNKNOWN: 0,
  PAST_HANGOUT_STATE_HAD_PAST_HANGOUT: 1,
  PAST_HANGOUT_STATE_NO_PAST_HANGOUT: 2
};

/**
 * optional ParticipantId id = 9;
 * @return {?proto.ParticipantId}
 */
proto.Entity.prototype.getId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 9));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.Entity.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Entity.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Entity.prototype.hasId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Presence presence = 8;
 * @return {?proto.Presence}
 */
proto.Entity.prototype.getPresence = function() {
  return /** @type{?proto.Presence} */ (
    jspb.Message.getWrapperField(this, proto.Presence, 8));
};


/** @param {?proto.Presence|undefined} value */
proto.Entity.prototype.setPresence = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Entity.prototype.clearPresence = function() {
  this.setPresence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Entity.prototype.hasPresence = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EntityProperties properties = 10;
 * @return {?proto.EntityProperties}
 */
proto.Entity.prototype.getProperties = function() {
  return /** @type{?proto.EntityProperties} */ (
    jspb.Message.getWrapperField(this, proto.EntityProperties, 10));
};


/** @param {?proto.EntityProperties|undefined} value */
proto.Entity.prototype.setProperties = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Entity.prototype.clearProperties = function() {
  this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Entity.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ParticipantType entity_type = 13;
 * @return {!proto.ParticipantType}
 */
proto.Entity.prototype.getEntityType = function() {
  return /** @type {!proto.ParticipantType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.ParticipantType} value */
proto.Entity.prototype.setEntityType = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Entity.prototype.clearEntityType = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Entity.prototype.hasEntityType = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional PastHangoutState had_past_hangout_state = 16;
 * @return {!proto.Entity.PastHangoutState}
 */
proto.Entity.prototype.getHadPastHangoutState = function() {
  return /** @type {!proto.Entity.PastHangoutState} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.Entity.PastHangoutState} value */
proto.Entity.prototype.setHadPastHangoutState = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.Entity.prototype.clearHadPastHangoutState = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Entity.prototype.hasHadPastHangoutState = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityProperties.repeatedFields_, null);
};
goog.inherits(proto.EntityProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityProperties.displayName = 'proto.EntityProperties';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityProperties.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    displayName: jspb.Message.getField(msg, 2),
    firstName: jspb.Message.getField(msg, 3),
    photoUrl: jspb.Message.getField(msg, 4),
    emailList: jspb.Message.getRepeatedField(msg, 5),
    phoneList: jspb.Message.getRepeatedField(msg, 6),
    inUsersDomain: jspb.Message.getField(msg, 10),
    gender: jspb.Message.getField(msg, 11),
    photoUrlStatus: jspb.Message.getField(msg, 12),
    canonicalEmail: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityProperties}
 */
proto.EntityProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityProperties;
  return proto.EntityProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityProperties}
 */
proto.EntityProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProfileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhotoUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addEmail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPhone(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInUsersDomain(value);
      break;
    case 11:
      var value = /** @type {!proto.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 12:
      var value = /** @type {!proto.PhotoUrlStatus} */ (reader.readEnum());
      msg.setPhotoUrlStatus(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCanonicalEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EntityProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EntityProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ProfileType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEmailList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getPhoneList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {!proto.Gender} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {!proto.PhotoUrlStatus} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional ProfileType type = 1;
 * @return {!proto.ProfileType}
 */
proto.EntityProperties.prototype.getType = function() {
  return /** @type {!proto.ProfileType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ProfileType} value */
proto.EntityProperties.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityProperties.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.EntityProperties.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.EntityProperties.prototype.setDisplayName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EntityProperties.prototype.clearDisplayName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string first_name = 3;
 * @return {string}
 */
proto.EntityProperties.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.EntityProperties.prototype.setFirstName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EntityProperties.prototype.clearFirstName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasFirstName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string photo_url = 4;
 * @return {string}
 */
proto.EntityProperties.prototype.getPhotoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.EntityProperties.prototype.setPhotoUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.EntityProperties.prototype.clearPhotoUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasPhotoUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string email = 5;
 * @return {!Array.<string>}
 */
proto.EntityProperties.prototype.getEmailList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.EntityProperties.prototype.setEmailList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.EntityProperties.prototype.addEmail = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.EntityProperties.prototype.clearEmailList = function() {
  this.setEmailList([]);
};


/**
 * repeated string phone = 6;
 * @return {!Array.<string>}
 */
proto.EntityProperties.prototype.getPhoneList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<string>} value */
proto.EntityProperties.prototype.setPhoneList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.EntityProperties.prototype.addPhone = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.EntityProperties.prototype.clearPhoneList = function() {
  this.setPhoneList([]);
};


/**
 * optional bool in_users_domain = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EntityProperties.prototype.getInUsersDomain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.EntityProperties.prototype.setInUsersDomain = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.EntityProperties.prototype.clearInUsersDomain = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasInUsersDomain = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Gender gender = 11;
 * @return {!proto.Gender}
 */
proto.EntityProperties.prototype.getGender = function() {
  return /** @type {!proto.Gender} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.Gender} value */
proto.EntityProperties.prototype.setGender = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.EntityProperties.prototype.clearGender = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasGender = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PhotoUrlStatus photo_url_status = 12;
 * @return {!proto.PhotoUrlStatus}
 */
proto.EntityProperties.prototype.getPhotoUrlStatus = function() {
  return /** @type {!proto.PhotoUrlStatus} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.PhotoUrlStatus} value */
proto.EntityProperties.prototype.setPhotoUrlStatus = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.EntityProperties.prototype.clearPhotoUrlStatus = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasPhotoUrlStatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string canonical_email = 15;
 * @return {string}
 */
proto.EntityProperties.prototype.getCanonicalEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.EntityProperties.prototype.setCanonicalEmail = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.EntityProperties.prototype.clearCanonicalEmail = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityProperties.prototype.hasCanonicalEmail = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ConversationState.repeatedFields_, null);
};
goog.inherits(proto.ConversationState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationState.displayName = 'proto.ConversationState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConversationState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationState.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationState.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    conversation: (f = msg.getConversation()) && proto.Conversation.toObject(includeInstance, f),
    eventList: jspb.Message.toObjectList(msg.getEventList(),
    proto.Event.toObject, includeInstance),
    eventContinuationToken: (f = msg.getEventContinuationToken()) && proto.EventContinuationToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationState}
 */
proto.ConversationState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationState;
  return proto.ConversationState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationState}
 */
proto.ConversationState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = new proto.Conversation;
      reader.readMessage(value,proto.Conversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    case 3:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.addEvent(value);
      break;
    case 5:
      var value = new proto.EventContinuationToken;
      reader.readMessage(value,proto.EventContinuationToken.deserializeBinaryFromReader);
      msg.setEventContinuationToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Conversation.serializeBinaryToWriter
    );
  }
  f = message.getEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getEventContinuationToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EventContinuationToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.ConversationState.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.ConversationState.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConversationState.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationState.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Conversation conversation = 2;
 * @return {?proto.Conversation}
 */
proto.ConversationState.prototype.getConversation = function() {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 2));
};


/** @param {?proto.Conversation|undefined} value */
proto.ConversationState.prototype.setConversation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ConversationState.prototype.clearConversation = function() {
  this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationState.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Event event = 3;
 * @return {!Array.<!proto.Event>}
 */
proto.ConversationState.prototype.getEventList = function() {
  return /** @type{!Array.<!proto.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Event, 3));
};


/** @param {!Array.<!proto.Event>} value */
proto.ConversationState.prototype.setEventList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event}
 */
proto.ConversationState.prototype.addEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Event, opt_index);
};


proto.ConversationState.prototype.clearEventList = function() {
  this.setEventList([]);
};


/**
 * optional EventContinuationToken event_continuation_token = 5;
 * @return {?proto.EventContinuationToken}
 */
proto.ConversationState.prototype.getEventContinuationToken = function() {
  return /** @type{?proto.EventContinuationToken} */ (
    jspb.Message.getWrapperField(this, proto.EventContinuationToken, 5));
};


/** @param {?proto.EventContinuationToken|undefined} value */
proto.ConversationState.prototype.setEventContinuationToken = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ConversationState.prototype.clearEventContinuationToken = function() {
  this.setEventContinuationToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationState.prototype.hasEventContinuationToken = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventContinuationToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventContinuationToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventContinuationToken.displayName = 'proto.EventContinuationToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventContinuationToken.prototype.toObject = function(opt_includeInstance) {
  return proto.EventContinuationToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventContinuationToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventContinuationToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getField(msg, 1),
    storageContinuationToken: msg.getStorageContinuationToken_asB64(),
    eventTimestamp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventContinuationToken}
 */
proto.EventContinuationToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventContinuationToken;
  return proto.EventContinuationToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventContinuationToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventContinuationToken}
 */
proto.EventContinuationToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStorageContinuationToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventContinuationToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventContinuationToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventContinuationToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventContinuationToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.EventContinuationToken.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EventContinuationToken.prototype.setEventId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EventContinuationToken.prototype.clearEventId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventContinuationToken.prototype.hasEventId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes storage_continuation_token = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EventContinuationToken.prototype.getStorageContinuationToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes storage_continuation_token = 2;
 * This is a type-conversion wrapper around `getStorageContinuationToken()`
 * @return {string}
 */
proto.EventContinuationToken.prototype.getStorageContinuationToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStorageContinuationToken()));
};


/**
 * optional bytes storage_continuation_token = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStorageContinuationToken()`
 * @return {!Uint8Array}
 */
proto.EventContinuationToken.prototype.getStorageContinuationToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStorageContinuationToken()));
};


/** @param {!(string|Uint8Array)} value */
proto.EventContinuationToken.prototype.setStorageContinuationToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EventContinuationToken.prototype.clearStorageContinuationToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventContinuationToken.prototype.hasStorageContinuationToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 event_timestamp = 3;
 * @return {number}
 */
proto.EventContinuationToken.prototype.getEventTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.EventContinuationToken.prototype.setEventTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EventContinuationToken.prototype.clearEventTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventContinuationToken.prototype.hasEventTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityLookupSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EntityLookupSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityLookupSpec.displayName = 'proto.EntityLookupSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityLookupSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityLookupSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityLookupSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityLookupSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    gaiaId: jspb.Message.getField(msg, 1),
    email: jspb.Message.getField(msg, 3),
    phone: jspb.Message.getField(msg, 4),
    createOffnetworkGaia: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityLookupSpec}
 */
proto.EntityLookupSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityLookupSpec;
  return proto.EntityLookupSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityLookupSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityLookupSpec}
 */
proto.EntityLookupSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGaiaId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateOffnetworkGaia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityLookupSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EntityLookupSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EntityLookupSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityLookupSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string gaia_id = 1;
 * @return {string}
 */
proto.EntityLookupSpec.prototype.getGaiaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EntityLookupSpec.prototype.setGaiaId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityLookupSpec.prototype.clearGaiaId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityLookupSpec.prototype.hasGaiaId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.EntityLookupSpec.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.EntityLookupSpec.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EntityLookupSpec.prototype.clearEmail = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityLookupSpec.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string phone = 4;
 * @return {string}
 */
proto.EntityLookupSpec.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.EntityLookupSpec.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.EntityLookupSpec.prototype.clearPhone = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityLookupSpec.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool create_offnetwork_gaia = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EntityLookupSpec.prototype.getCreateOffnetworkGaia = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.EntityLookupSpec.prototype.setCreateOffnetworkGaia = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.EntityLookupSpec.prototype.clearCreateOffnetworkGaia = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityLookupSpec.prototype.hasCreateOffnetworkGaia = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigurationBit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigurationBit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConfigurationBit.displayName = 'proto.ConfigurationBit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigurationBit.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigurationBit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigurationBit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationBit.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurationBitType: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigurationBit}
 */
proto.ConfigurationBit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigurationBit;
  return proto.ConfigurationBit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigurationBit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigurationBit}
 */
proto.ConfigurationBit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ConfigurationBitType} */ (reader.readEnum());
      msg.setConfigurationBitType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigurationBit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigurationBit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigurationBit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationBit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ConfigurationBitType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional ConfigurationBitType configuration_bit_type = 1;
 * @return {!proto.ConfigurationBitType}
 */
proto.ConfigurationBit.prototype.getConfigurationBitType = function() {
  return /** @type {!proto.ConfigurationBitType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ConfigurationBitType} value */
proto.ConfigurationBit.prototype.setConfigurationBitType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ConfigurationBit.prototype.clearConfigurationBitType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConfigurationBit.prototype.hasConfigurationBitType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ConfigurationBit.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ConfigurationBit.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ConfigurationBit.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConfigurationBit.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RichPresenceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RichPresenceState.repeatedFields_, null);
};
goog.inherits(proto.RichPresenceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RichPresenceState.displayName = 'proto.RichPresenceState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RichPresenceState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RichPresenceState.prototype.toObject = function(opt_includeInstance) {
  return proto.RichPresenceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RichPresenceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    getRichPresenceEnabledStateList: jspb.Message.toObjectList(msg.getGetRichPresenceEnabledStateList(),
    proto.RichPresenceEnabledState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RichPresenceState}
 */
proto.RichPresenceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RichPresenceState;
  return proto.RichPresenceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RichPresenceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RichPresenceState}
 */
proto.RichPresenceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.RichPresenceEnabledState;
      reader.readMessage(value,proto.RichPresenceEnabledState.deserializeBinaryFromReader);
      msg.addGetRichPresenceEnabledState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RichPresenceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RichPresenceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RichPresenceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetRichPresenceEnabledStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.RichPresenceEnabledState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RichPresenceEnabledState get_rich_presence_enabled_state = 3;
 * @return {!Array.<!proto.RichPresenceEnabledState>}
 */
proto.RichPresenceState.prototype.getGetRichPresenceEnabledStateList = function() {
  return /** @type{!Array.<!proto.RichPresenceEnabledState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RichPresenceEnabledState, 3));
};


/** @param {!Array.<!proto.RichPresenceEnabledState>} value */
proto.RichPresenceState.prototype.setGetRichPresenceEnabledStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.RichPresenceEnabledState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RichPresenceEnabledState}
 */
proto.RichPresenceState.prototype.addGetRichPresenceEnabledState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.RichPresenceEnabledState, opt_index);
};


proto.RichPresenceState.prototype.clearGetRichPresenceEnabledStateList = function() {
  this.setGetRichPresenceEnabledStateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RichPresenceEnabledState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RichPresenceEnabledState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RichPresenceEnabledState.displayName = 'proto.RichPresenceEnabledState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RichPresenceEnabledState.prototype.toObject = function(opt_includeInstance) {
  return proto.RichPresenceEnabledState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RichPresenceEnabledState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceEnabledState.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    enabled: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RichPresenceEnabledState}
 */
proto.RichPresenceEnabledState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RichPresenceEnabledState;
  return proto.RichPresenceEnabledState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RichPresenceEnabledState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RichPresenceEnabledState}
 */
proto.RichPresenceEnabledState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.RichPresenceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RichPresenceEnabledState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RichPresenceEnabledState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RichPresenceEnabledState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceEnabledState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.RichPresenceType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional RichPresenceType type = 1;
 * @return {!proto.RichPresenceType}
 */
proto.RichPresenceEnabledState.prototype.getType = function() {
  return /** @type {!proto.RichPresenceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.RichPresenceType} value */
proto.RichPresenceEnabledState.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RichPresenceEnabledState.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RichPresenceEnabledState.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RichPresenceEnabledState.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.RichPresenceEnabledState.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RichPresenceEnabledState.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RichPresenceEnabledState.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DesktopOffSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DesktopOffSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DesktopOffSetting.displayName = 'proto.DesktopOffSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DesktopOffSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.DesktopOffSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DesktopOffSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopOffSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    desktopOff: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DesktopOffSetting}
 */
proto.DesktopOffSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DesktopOffSetting;
  return proto.DesktopOffSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DesktopOffSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DesktopOffSetting}
 */
proto.DesktopOffSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesktopOff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DesktopOffSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DesktopOffSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DesktopOffSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopOffSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool desktop_off = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DesktopOffSetting.prototype.getDesktopOff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DesktopOffSetting.prototype.setDesktopOff = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DesktopOffSetting.prototype.clearDesktopOff = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DesktopOffSetting.prototype.hasDesktopOff = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DesktopOffState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DesktopOffState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DesktopOffState.displayName = 'proto.DesktopOffState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DesktopOffState.prototype.toObject = function(opt_includeInstance) {
  return proto.DesktopOffState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DesktopOffState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopOffState.toObject = function(includeInstance, msg) {
  var f, obj = {
    desktopOff: jspb.Message.getField(msg, 1),
    version: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DesktopOffState}
 */
proto.DesktopOffState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DesktopOffState;
  return proto.DesktopOffState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DesktopOffState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DesktopOffState}
 */
proto.DesktopOffState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesktopOff(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DesktopOffState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DesktopOffState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DesktopOffState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopOffState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bool desktop_off = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DesktopOffState.prototype.getDesktopOff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DesktopOffState.prototype.setDesktopOff = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DesktopOffState.prototype.clearDesktopOff = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DesktopOffState.prototype.hasDesktopOff = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.DesktopOffState.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DesktopOffState.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DesktopOffState.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DesktopOffState.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DndSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DndSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DndSetting.displayName = 'proto.DndSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DndSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.DndSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DndSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DndSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    doNotDisturb: jspb.Message.getField(msg, 1),
    timeoutSecs: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DndSetting}
 */
proto.DndSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DndSetting;
  return proto.DndSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DndSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DndSetting}
 */
proto.DndSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoNotDisturb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutSecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DndSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DndSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DndSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DndSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bool do_not_disturb = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DndSetting.prototype.getDoNotDisturb = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DndSetting.prototype.setDoNotDisturb = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DndSetting.prototype.clearDoNotDisturb = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DndSetting.prototype.hasDoNotDisturb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timeout_secs = 2;
 * @return {number}
 */
proto.DndSetting.prototype.getTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DndSetting.prototype.setTimeoutSecs = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DndSetting.prototype.clearTimeoutSecs = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DndSetting.prototype.hasTimeoutSecs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PresenceStateSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PresenceStateSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PresenceStateSetting.displayName = 'proto.PresenceStateSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PresenceStateSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.PresenceStateSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PresenceStateSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceStateSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeoutSecs: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PresenceStateSetting}
 */
proto.PresenceStateSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PresenceStateSetting;
  return proto.PresenceStateSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PresenceStateSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PresenceStateSetting}
 */
proto.PresenceStateSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutSecs(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientPresenceStateType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PresenceStateSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PresenceStateSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PresenceStateSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceStateSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.ClientPresenceStateType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 timeout_secs = 1;
 * @return {number}
 */
proto.PresenceStateSetting.prototype.getTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PresenceStateSetting.prototype.setTimeoutSecs = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PresenceStateSetting.prototype.clearTimeoutSecs = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PresenceStateSetting.prototype.hasTimeoutSecs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientPresenceStateType type = 2;
 * @return {!proto.ClientPresenceStateType}
 */
proto.PresenceStateSetting.prototype.getType = function() {
  return /** @type {!proto.ClientPresenceStateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientPresenceStateType} value */
proto.PresenceStateSetting.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PresenceStateSetting.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PresenceStateSetting.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoodMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MoodMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoodMessage.displayName = 'proto.MoodMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoodMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MoodMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoodMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    moodContent: (f = msg.getMoodContent()) && proto.MoodContent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoodMessage}
 */
proto.MoodMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoodMessage;
  return proto.MoodMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoodMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoodMessage}
 */
proto.MoodMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MoodContent;
      reader.readMessage(value,proto.MoodContent.deserializeBinaryFromReader);
      msg.setMoodContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoodMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MoodMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MoodMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoodContent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MoodContent.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoodContent mood_content = 1;
 * @return {?proto.MoodContent}
 */
proto.MoodMessage.prototype.getMoodContent = function() {
  return /** @type{?proto.MoodContent} */ (
    jspb.Message.getWrapperField(this, proto.MoodContent, 1));
};


/** @param {?proto.MoodContent|undefined} value */
proto.MoodMessage.prototype.setMoodContent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MoodMessage.prototype.clearMoodContent = function() {
  this.setMoodContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MoodMessage.prototype.hasMoodContent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoodContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MoodContent.repeatedFields_, null);
};
goog.inherits(proto.MoodContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoodContent.displayName = 'proto.MoodContent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MoodContent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoodContent.prototype.toObject = function(opt_includeInstance) {
  return proto.MoodContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoodContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto.Segment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoodContent}
 */
proto.MoodContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoodContent;
  return proto.MoodContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoodContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoodContent}
 */
proto.MoodContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Segment;
      reader.readMessage(value,proto.Segment.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoodContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MoodContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MoodContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Segment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Segment segment = 1;
 * @return {!Array.<!proto.Segment>}
 */
proto.MoodContent.prototype.getSegmentList = function() {
  return /** @type{!Array.<!proto.Segment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Segment, 1));
};


/** @param {!Array.<!proto.Segment>} value */
proto.MoodContent.prototype.setSegmentList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Segment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Segment}
 */
proto.MoodContent.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Segment, opt_index);
};


proto.MoodContent.prototype.clearSegmentList = function() {
  this.setSegmentList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoodSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MoodSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoodSetting.displayName = 'proto.MoodSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoodSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.MoodSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoodSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    moodMessage: (f = msg.getMoodMessage()) && proto.MoodMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoodSetting}
 */
proto.MoodSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoodSetting;
  return proto.MoodSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoodSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoodSetting}
 */
proto.MoodSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MoodMessage;
      reader.readMessage(value,proto.MoodMessage.deserializeBinaryFromReader);
      msg.setMoodMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoodSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MoodSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MoodSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoodMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MoodMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoodMessage mood_message = 1;
 * @return {?proto.MoodMessage}
 */
proto.MoodSetting.prototype.getMoodMessage = function() {
  return /** @type{?proto.MoodMessage} */ (
    jspb.Message.getWrapperField(this, proto.MoodMessage, 1));
};


/** @param {?proto.MoodMessage|undefined} value */
proto.MoodSetting.prototype.setMoodMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MoodSetting.prototype.clearMoodMessage = function() {
  this.setMoodMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MoodSetting.prototype.hasMoodMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoodState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MoodState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoodState.displayName = 'proto.MoodState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoodState.prototype.toObject = function(opt_includeInstance) {
  return proto.MoodState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoodState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodState.toObject = function(includeInstance, msg) {
  var f, obj = {
    moodSetting: (f = msg.getMoodSetting()) && proto.MoodSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoodState}
 */
proto.MoodState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoodState;
  return proto.MoodState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoodState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoodState}
 */
proto.MoodState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.MoodSetting;
      reader.readMessage(value,proto.MoodSetting.deserializeBinaryFromReader);
      msg.setMoodSetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoodState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MoodState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MoodState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MoodState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoodSetting();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MoodSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoodSetting mood_setting = 4;
 * @return {?proto.MoodSetting}
 */
proto.MoodState.prototype.getMoodSetting = function() {
  return /** @type{?proto.MoodSetting} */ (
    jspb.Message.getWrapperField(this, proto.MoodSetting, 4));
};


/** @param {?proto.MoodSetting|undefined} value */
proto.MoodState.prototype.setMoodSetting = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MoodState.prototype.clearMoodSetting = function() {
  this.setMoodSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MoodState.prototype.hasMoodSetting = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteAction.displayName = 'proto.DeleteAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteAction.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleteActionTimestamp: jspb.Message.getField(msg, 1),
    deleteUpperBoundTimestamp: jspb.Message.getField(msg, 2),
    deleteType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteAction}
 */
proto.DeleteAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteAction;
  return proto.DeleteAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteAction}
 */
proto.DeleteAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeleteActionTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeleteUpperBoundTimestamp(value);
      break;
    case 3:
      var value = /** @type {!proto.DeleteType} */ (reader.readEnum());
      msg.setDeleteType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!proto.DeleteType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 delete_action_timestamp = 1;
 * @return {number}
 */
proto.DeleteAction.prototype.getDeleteActionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DeleteAction.prototype.setDeleteActionTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DeleteAction.prototype.clearDeleteActionTimestamp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteAction.prototype.hasDeleteActionTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 delete_upper_bound_timestamp = 2;
 * @return {number}
 */
proto.DeleteAction.prototype.getDeleteUpperBoundTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DeleteAction.prototype.setDeleteUpperBoundTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DeleteAction.prototype.clearDeleteUpperBoundTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteAction.prototype.hasDeleteUpperBoundTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeleteType delete_type = 3;
 * @return {!proto.DeleteType}
 */
proto.DeleteAction.prototype.getDeleteType = function() {
  return /** @type {!proto.DeleteType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.DeleteType} value */
proto.DeleteAction.prototype.setDeleteType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DeleteAction.prototype.clearDeleteType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteAction.prototype.hasDeleteType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InviteeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InviteeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InviteeID.displayName = 'proto.InviteeID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InviteeID.prototype.toObject = function(opt_includeInstance) {
  return proto.InviteeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InviteeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InviteeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    gaiaId: jspb.Message.getField(msg, 1),
    fallbackName: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InviteeID}
 */
proto.InviteeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InviteeID;
  return proto.InviteeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InviteeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InviteeID}
 */
proto.InviteeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGaiaId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InviteeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InviteeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InviteeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InviteeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string gaia_id = 1;
 * @return {string}
 */
proto.InviteeID.prototype.getGaiaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.InviteeID.prototype.setGaiaId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.InviteeID.prototype.clearGaiaId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InviteeID.prototype.hasGaiaId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fallback_name = 4;
 * @return {string}
 */
proto.InviteeID.prototype.getFallbackName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.InviteeID.prototype.setFallbackName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.InviteeID.prototype.clearFallbackName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InviteeID.prototype.hasFallbackName = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Country = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Country, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Country.displayName = 'proto.Country';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Country.prototype.toObject = function(opt_includeInstance) {
  return proto.Country.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Country} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Country.toObject = function(includeInstance, msg) {
  var f, obj = {
    regionCode: jspb.Message.getField(msg, 1),
    countryCode: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Country}
 */
proto.Country.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Country;
  return proto.Country.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Country} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Country}
 */
proto.Country.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCountryCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Country.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Country.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Country} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Country.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string region_code = 1;
 * @return {string}
 */
proto.Country.prototype.getRegionCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Country.prototype.setRegionCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Country.prototype.clearRegionCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Country.prototype.hasRegionCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 country_code = 2;
 * @return {number}
 */
proto.Country.prototype.getCountryCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Country.prototype.setCountryCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Country.prototype.clearCountryCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Country.prototype.hasCountryCode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DesktopSoundSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DesktopSoundSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DesktopSoundSetting.displayName = 'proto.DesktopSoundSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DesktopSoundSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.DesktopSoundSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DesktopSoundSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopSoundSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    desktopSoundState: jspb.Message.getField(msg, 1),
    desktopRingSoundState: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DesktopSoundSetting}
 */
proto.DesktopSoundSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DesktopSoundSetting;
  return proto.DesktopSoundSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DesktopSoundSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DesktopSoundSetting}
 */
proto.DesktopSoundSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SoundState} */ (reader.readEnum());
      msg.setDesktopSoundState(value);
      break;
    case 2:
      var value = /** @type {!proto.SoundState} */ (reader.readEnum());
      msg.setDesktopRingSoundState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DesktopSoundSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DesktopSoundSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DesktopSoundSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DesktopSoundSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SoundState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.SoundState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional SoundState desktop_sound_state = 1;
 * @return {!proto.SoundState}
 */
proto.DesktopSoundSetting.prototype.getDesktopSoundState = function() {
  return /** @type {!proto.SoundState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SoundState} value */
proto.DesktopSoundSetting.prototype.setDesktopSoundState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DesktopSoundSetting.prototype.clearDesktopSoundState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DesktopSoundSetting.prototype.hasDesktopSoundState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SoundState desktop_ring_sound_state = 2;
 * @return {!proto.SoundState}
 */
proto.DesktopSoundSetting.prototype.getDesktopRingSoundState = function() {
  return /** @type {!proto.SoundState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SoundState} value */
proto.DesktopSoundSetting.prototype.setDesktopRingSoundState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DesktopSoundSetting.prototype.clearDesktopRingSoundState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DesktopSoundSetting.prototype.hasDesktopRingSoundState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PhoneData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PhoneData.repeatedFields_, null);
};
goog.inherits(proto.PhoneData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PhoneData.displayName = 'proto.PhoneData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PhoneData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PhoneData.prototype.toObject = function(opt_includeInstance) {
  return proto.PhoneData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PhoneData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PhoneData.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneList: jspb.Message.toObjectList(msg.getPhoneList(),
    proto.Phone.toObject, includeInstance),
    callerIdSettingsMask: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PhoneData}
 */
proto.PhoneData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PhoneData;
  return proto.PhoneData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PhoneData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PhoneData}
 */
proto.PhoneData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Phone;
      reader.readMessage(value,proto.Phone.deserializeBinaryFromReader);
      msg.addPhone(value);
      break;
    case 3:
      var value = /** @type {!proto.CallerIdSettingsMask} */ (reader.readEnum());
      msg.setCallerIdSettingsMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PhoneData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PhoneData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PhoneData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PhoneData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Phone.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.CallerIdSettingsMask} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated Phone phone = 1;
 * @return {!Array.<!proto.Phone>}
 */
proto.PhoneData.prototype.getPhoneList = function() {
  return /** @type{!Array.<!proto.Phone>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Phone, 1));
};


/** @param {!Array.<!proto.Phone>} value */
proto.PhoneData.prototype.setPhoneList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Phone=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Phone}
 */
proto.PhoneData.prototype.addPhone = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Phone, opt_index);
};


proto.PhoneData.prototype.clearPhoneList = function() {
  this.setPhoneList([]);
};


/**
 * optional CallerIdSettingsMask caller_id_settings_mask = 3;
 * @return {!proto.CallerIdSettingsMask}
 */
proto.PhoneData.prototype.getCallerIdSettingsMask = function() {
  return /** @type {!proto.CallerIdSettingsMask} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.CallerIdSettingsMask} value */
proto.PhoneData.prototype.setCallerIdSettingsMask = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PhoneData.prototype.clearCallerIdSettingsMask = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PhoneData.prototype.hasCallerIdSettingsMask = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Phone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Phone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Phone.displayName = 'proto.Phone';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Phone.prototype.toObject = function(opt_includeInstance) {
  return proto.Phone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Phone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Phone.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: (f = msg.getPhoneNumber()) && proto.PhoneNumber.toObject(includeInstance, f),
    googleVoice: jspb.Message.getField(msg, 2),
    verificationStatus: jspb.Message.getField(msg, 3),
    discoverable: jspb.Message.getField(msg, 4),
    discoverabilityStatus: jspb.Message.getField(msg, 5),
    primary: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Phone}
 */
proto.Phone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Phone;
  return proto.Phone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Phone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Phone}
 */
proto.Phone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PhoneNumber;
      reader.readMessage(value,proto.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGoogleVoice(value);
      break;
    case 3:
      var value = /** @type {!proto.PhoneVerificationStatus} */ (reader.readEnum());
      msg.setVerificationStatus(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiscoverable(value);
      break;
    case 5:
      var value = /** @type {!proto.PhoneDiscoverabilityStatus} */ (reader.readEnum());
      msg.setDiscoverabilityStatus(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrimary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Phone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Phone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Phone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Phone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.PhoneVerificationStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {!proto.PhoneDiscoverabilityStatus} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional PhoneNumber phone_number = 1;
 * @return {?proto.PhoneNumber}
 */
proto.Phone.prototype.getPhoneNumber = function() {
  return /** @type{?proto.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.PhoneNumber, 1));
};


/** @param {?proto.PhoneNumber|undefined} value */
proto.Phone.prototype.setPhoneNumber = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Phone.prototype.clearPhoneNumber = function() {
  this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool google_voice = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Phone.prototype.getGoogleVoice = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Phone.prototype.setGoogleVoice = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Phone.prototype.clearGoogleVoice = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasGoogleVoice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PhoneVerificationStatus verification_status = 3;
 * @return {!proto.PhoneVerificationStatus}
 */
proto.Phone.prototype.getVerificationStatus = function() {
  return /** @type {!proto.PhoneVerificationStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.PhoneVerificationStatus} value */
proto.Phone.prototype.setVerificationStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Phone.prototype.clearVerificationStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasVerificationStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool discoverable = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Phone.prototype.getDiscoverable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Phone.prototype.setDiscoverable = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Phone.prototype.clearDiscoverable = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasDiscoverable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PhoneDiscoverabilityStatus discoverability_status = 5;
 * @return {!proto.PhoneDiscoverabilityStatus}
 */
proto.Phone.prototype.getDiscoverabilityStatus = function() {
  return /** @type {!proto.PhoneDiscoverabilityStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.PhoneDiscoverabilityStatus} value */
proto.Phone.prototype.setDiscoverabilityStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Phone.prototype.clearDiscoverabilityStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasDiscoverabilityStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool primary = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Phone.prototype.getPrimary = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Phone.prototype.setPrimary = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Phone.prototype.clearPrimary = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Phone.prototype.hasPrimary = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.I18nData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.I18nData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.I18nData.displayName = 'proto.I18nData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.I18nData.prototype.toObject = function(opt_includeInstance) {
  return proto.I18nData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.I18nData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.I18nData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nationalNumber: jspb.Message.getField(msg, 1),
    internationalNumber: jspb.Message.getField(msg, 2),
    countryCode: jspb.Message.getField(msg, 3),
    regionCode: jspb.Message.getField(msg, 4),
    isValid: jspb.Message.getField(msg, 5),
    validationResult: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.I18nData}
 */
proto.I18nData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.I18nData;
  return proto.I18nData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.I18nData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.I18nData}
 */
proto.I18nData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNationalNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternationalNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCountryCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionCode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsValid(value);
      break;
    case 6:
      var value = /** @type {!proto.PhoneValidationResult} */ (reader.readEnum());
      msg.setValidationResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.I18nData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.I18nData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.I18nData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.I18nData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {!proto.PhoneValidationResult} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string national_number = 1;
 * @return {string}
 */
proto.I18nData.prototype.getNationalNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.I18nData.prototype.setNationalNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.I18nData.prototype.clearNationalNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasNationalNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string international_number = 2;
 * @return {string}
 */
proto.I18nData.prototype.getInternationalNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.I18nData.prototype.setInternationalNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.I18nData.prototype.clearInternationalNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasInternationalNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 country_code = 3;
 * @return {number}
 */
proto.I18nData.prototype.getCountryCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.I18nData.prototype.setCountryCode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.I18nData.prototype.clearCountryCode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasCountryCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string region_code = 4;
 * @return {string}
 */
proto.I18nData.prototype.getRegionCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.I18nData.prototype.setRegionCode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.I18nData.prototype.clearRegionCode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasRegionCode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_valid = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.I18nData.prototype.getIsValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.I18nData.prototype.setIsValid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.I18nData.prototype.clearIsValid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasIsValid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PhoneValidationResult validation_result = 6;
 * @return {!proto.PhoneValidationResult}
 */
proto.I18nData.prototype.getValidationResult = function() {
  return /** @type {!proto.PhoneValidationResult} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.PhoneValidationResult} value */
proto.I18nData.prototype.setValidationResult = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.I18nData.prototype.clearValidationResult = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.I18nData.prototype.hasValidationResult = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PhoneNumber.displayName = 'proto.PhoneNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    e164: jspb.Message.getField(msg, 1),
    i18nData: (f = msg.getI18nData()) && proto.I18nData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PhoneNumber}
 */
proto.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PhoneNumber;
  return proto.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PhoneNumber}
 */
proto.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setE164(value);
      break;
    case 2:
      var value = new proto.I18nData;
      reader.readMessage(value,proto.I18nData.deserializeBinaryFromReader);
      msg.setI18nData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getI18nData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.I18nData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string e164 = 1;
 * @return {string}
 */
proto.PhoneNumber.prototype.getE164 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PhoneNumber.prototype.setE164 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PhoneNumber.prototype.clearE164 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PhoneNumber.prototype.hasE164 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional I18nData i18n_data = 2;
 * @return {?proto.I18nData}
 */
proto.PhoneNumber.prototype.getI18nData = function() {
  return /** @type{?proto.I18nData} */ (
    jspb.Message.getWrapperField(this, proto.I18nData, 2));
};


/** @param {?proto.I18nData|undefined} value */
proto.PhoneNumber.prototype.setI18nData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PhoneNumber.prototype.clearI18nData = function() {
  this.setI18nData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PhoneNumber.prototype.hasI18nData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SuggestedContactGroupHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SuggestedContactGroupHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SuggestedContactGroupHash.displayName = 'proto.SuggestedContactGroupHash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SuggestedContactGroupHash.prototype.toObject = function(opt_includeInstance) {
  return proto.SuggestedContactGroupHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SuggestedContactGroupHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContactGroupHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxResults: jspb.Message.getField(msg, 1),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SuggestedContactGroupHash}
 */
proto.SuggestedContactGroupHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SuggestedContactGroupHash;
  return proto.SuggestedContactGroupHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SuggestedContactGroupHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SuggestedContactGroupHash}
 */
proto.SuggestedContactGroupHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxResults(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SuggestedContactGroupHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SuggestedContactGroupHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SuggestedContactGroupHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContactGroupHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 max_results = 1;
 * @return {number}
 */
proto.SuggestedContactGroupHash.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SuggestedContactGroupHash.prototype.setMaxResults = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SuggestedContactGroupHash.prototype.clearMaxResults = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContactGroupHash.prototype.hasMaxResults = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SuggestedContactGroupHash.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.SuggestedContactGroupHash.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.SuggestedContactGroupHash.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.SuggestedContactGroupHash.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SuggestedContactGroupHash.prototype.clearHash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContactGroupHash.prototype.hasHash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SuggestedContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SuggestedContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SuggestedContact.displayName = 'proto.SuggestedContact';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SuggestedContact.prototype.toObject = function(opt_includeInstance) {
  return proto.SuggestedContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SuggestedContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.Entity.toObject(includeInstance, f),
    invitationStatus: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SuggestedContact}
 */
proto.SuggestedContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SuggestedContact;
  return proto.SuggestedContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SuggestedContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SuggestedContact}
 */
proto.SuggestedContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {!proto.InvitationStatus} */ (reader.readEnum());
      msg.setInvitationStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SuggestedContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SuggestedContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SuggestedContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.InvitationStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Entity entity = 1;
 * @return {?proto.Entity}
 */
proto.SuggestedContact.prototype.getEntity = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 1));
};


/** @param {?proto.Entity|undefined} value */
proto.SuggestedContact.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SuggestedContact.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContact.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvitationStatus invitation_status = 2;
 * @return {!proto.InvitationStatus}
 */
proto.SuggestedContact.prototype.getInvitationStatus = function() {
  return /** @type {!proto.InvitationStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.InvitationStatus} value */
proto.SuggestedContact.prototype.setInvitationStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SuggestedContact.prototype.clearInvitationStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContact.prototype.hasInvitationStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SuggestedContactGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SuggestedContactGroup.repeatedFields_, null);
};
goog.inherits(proto.SuggestedContactGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SuggestedContactGroup.displayName = 'proto.SuggestedContactGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SuggestedContactGroup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SuggestedContactGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.SuggestedContactGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SuggestedContactGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContactGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashMatched: jspb.Message.getField(msg, 1),
    hash: msg.getHash_asB64(),
    contactList: jspb.Message.toObjectList(msg.getContactList(),
    proto.SuggestedContact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SuggestedContactGroup}
 */
proto.SuggestedContactGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SuggestedContactGroup;
  return proto.SuggestedContactGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SuggestedContactGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SuggestedContactGroup}
 */
proto.SuggestedContactGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHashMatched(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = new proto.SuggestedContact;
      reader.readMessage(value,proto.SuggestedContact.deserializeBinaryFromReader);
      msg.addContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SuggestedContactGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SuggestedContactGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SuggestedContactGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuggestedContactGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getContactList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SuggestedContact.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool hash_matched = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SuggestedContactGroup.prototype.getHashMatched = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SuggestedContactGroup.prototype.setHashMatched = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SuggestedContactGroup.prototype.clearHashMatched = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContactGroup.prototype.hasHashMatched = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SuggestedContactGroup.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.SuggestedContactGroup.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.SuggestedContactGroup.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.SuggestedContactGroup.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SuggestedContactGroup.prototype.clearHash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SuggestedContactGroup.prototype.hasHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SuggestedContact contact = 3;
 * @return {!Array.<!proto.SuggestedContact>}
 */
proto.SuggestedContactGroup.prototype.getContactList = function() {
  return /** @type{!Array.<!proto.SuggestedContact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SuggestedContact, 3));
};


/** @param {!Array.<!proto.SuggestedContact>} value */
proto.SuggestedContactGroup.prototype.setContactList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SuggestedContact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SuggestedContact}
 */
proto.SuggestedContactGroup.prototype.addContact = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SuggestedContact, opt_index);
};


proto.SuggestedContactGroup.prototype.clearContactList = function() {
  this.setContactList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupLinkSharingModification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupLinkSharingModification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GroupLinkSharingModification.displayName = 'proto.GroupLinkSharingModification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupLinkSharingModification.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupLinkSharingModification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupLinkSharingModification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupLinkSharingModification.toObject = function(includeInstance, msg) {
  var f, obj = {
    newStatus: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupLinkSharingModification}
 */
proto.GroupLinkSharingModification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupLinkSharingModification;
  return proto.GroupLinkSharingModification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupLinkSharingModification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupLinkSharingModification}
 */
proto.GroupLinkSharingModification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.GroupLinkSharingStatus} */ (reader.readEnum());
      msg.setNewStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupLinkSharingModification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupLinkSharingModification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupLinkSharingModification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupLinkSharingModification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional GroupLinkSharingStatus new_status = 1;
 * @return {!proto.GroupLinkSharingStatus}
 */
proto.GroupLinkSharingModification.prototype.getNewStatus = function() {
  return /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GroupLinkSharingStatus} value */
proto.GroupLinkSharingModification.prototype.setNewStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GroupLinkSharingModification.prototype.clearNewStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GroupLinkSharingModification.prototype.hasNewStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.StateUpdate.oneofGroups_);
};
goog.inherits(proto.StateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StateUpdate.displayName = 'proto.StateUpdate';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.StateUpdate.oneofGroups_ = [[2,3,4,5,6,7,8,11,12,14,15,16,17,19,20]];

/**
 * @enum {number}
 */
proto.StateUpdate.StateUpdateCase = {
  STATE_UPDATE_NOT_SET: 0,
  CONVERSATION_NOTIFICATION: 2,
  EVENT_NOTIFICATION: 3,
  FOCUS_NOTIFICATION: 4,
  TYPING_NOTIFICATION: 5,
  NOTIFICATION_LEVEL_NOTIFICATION: 6,
  REPLY_TO_INVITE_NOTIFICATION: 7,
  WATERMARK_NOTIFICATION: 8,
  VIEW_MODIFICATION: 11,
  EASTER_EGG_NOTIFICATION: 12,
  SELF_PRESENCE_NOTIFICATION: 14,
  DELETE_NOTIFICATION: 15,
  PRESENCE_NOTIFICATION: 16,
  BLOCK_NOTIFICATION: 17,
  NOTIFICATION_SETTING_NOTIFICATION: 19,
  RICH_PRESENCE_ENABLED_STATE_NOTIFICATION: 20
};

/**
 * @return {proto.StateUpdate.StateUpdateCase}
 */
proto.StateUpdate.prototype.getStateUpdateCase = function() {
  return /** @type {proto.StateUpdate.StateUpdateCase} */(jspb.Message.computeOneofCase(this, proto.StateUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.StateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateUpdateHeader: (f = msg.getStateUpdateHeader()) && proto.StateUpdateHeader.toObject(includeInstance, f),
    conversation: (f = msg.getConversation()) && proto.Conversation.toObject(includeInstance, f),
    conversationNotification: (f = msg.getConversationNotification()) && proto.ConversationNotification.toObject(includeInstance, f),
    eventNotification: (f = msg.getEventNotification()) && proto.EventNotification.toObject(includeInstance, f),
    focusNotification: (f = msg.getFocusNotification()) && proto.SetFocusNotification.toObject(includeInstance, f),
    typingNotification: (f = msg.getTypingNotification()) && proto.SetTypingNotification.toObject(includeInstance, f),
    notificationLevelNotification: (f = msg.getNotificationLevelNotification()) && proto.SetConversationNotificationLevelNotification.toObject(includeInstance, f),
    replyToInviteNotification: (f = msg.getReplyToInviteNotification()) && proto.ReplyToInviteNotification.toObject(includeInstance, f),
    watermarkNotification: (f = msg.getWatermarkNotification()) && proto.WatermarkNotification.toObject(includeInstance, f),
    viewModification: (f = msg.getViewModification()) && proto.ConversationViewModification.toObject(includeInstance, f),
    easterEggNotification: (f = msg.getEasterEggNotification()) && proto.EasterEggNotification.toObject(includeInstance, f),
    selfPresenceNotification: (f = msg.getSelfPresenceNotification()) && proto.SelfPresenceNotification.toObject(includeInstance, f),
    deleteNotification: (f = msg.getDeleteNotification()) && proto.DeleteActionNotification.toObject(includeInstance, f),
    presenceNotification: (f = msg.getPresenceNotification()) && proto.PresenceNotification.toObject(includeInstance, f),
    blockNotification: (f = msg.getBlockNotification()) && proto.BlockNotification.toObject(includeInstance, f),
    notificationSettingNotification: (f = msg.getNotificationSettingNotification()) && proto.SetNotificationSettingNotification.toObject(includeInstance, f),
    richPresenceEnabledStateNotification: (f = msg.getRichPresenceEnabledStateNotification()) && proto.RichPresenceEnabledStateNotification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StateUpdate}
 */
proto.StateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StateUpdate;
  return proto.StateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StateUpdate}
 */
proto.StateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StateUpdateHeader;
      reader.readMessage(value,proto.StateUpdateHeader.deserializeBinaryFromReader);
      msg.setStateUpdateHeader(value);
      break;
    case 13:
      var value = new proto.Conversation;
      reader.readMessage(value,proto.Conversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    case 2:
      var value = new proto.ConversationNotification;
      reader.readMessage(value,proto.ConversationNotification.deserializeBinaryFromReader);
      msg.setConversationNotification(value);
      break;
    case 3:
      var value = new proto.EventNotification;
      reader.readMessage(value,proto.EventNotification.deserializeBinaryFromReader);
      msg.setEventNotification(value);
      break;
    case 4:
      var value = new proto.SetFocusNotification;
      reader.readMessage(value,proto.SetFocusNotification.deserializeBinaryFromReader);
      msg.setFocusNotification(value);
      break;
    case 5:
      var value = new proto.SetTypingNotification;
      reader.readMessage(value,proto.SetTypingNotification.deserializeBinaryFromReader);
      msg.setTypingNotification(value);
      break;
    case 6:
      var value = new proto.SetConversationNotificationLevelNotification;
      reader.readMessage(value,proto.SetConversationNotificationLevelNotification.deserializeBinaryFromReader);
      msg.setNotificationLevelNotification(value);
      break;
    case 7:
      var value = new proto.ReplyToInviteNotification;
      reader.readMessage(value,proto.ReplyToInviteNotification.deserializeBinaryFromReader);
      msg.setReplyToInviteNotification(value);
      break;
    case 8:
      var value = new proto.WatermarkNotification;
      reader.readMessage(value,proto.WatermarkNotification.deserializeBinaryFromReader);
      msg.setWatermarkNotification(value);
      break;
    case 11:
      var value = new proto.ConversationViewModification;
      reader.readMessage(value,proto.ConversationViewModification.deserializeBinaryFromReader);
      msg.setViewModification(value);
      break;
    case 12:
      var value = new proto.EasterEggNotification;
      reader.readMessage(value,proto.EasterEggNotification.deserializeBinaryFromReader);
      msg.setEasterEggNotification(value);
      break;
    case 14:
      var value = new proto.SelfPresenceNotification;
      reader.readMessage(value,proto.SelfPresenceNotification.deserializeBinaryFromReader);
      msg.setSelfPresenceNotification(value);
      break;
    case 15:
      var value = new proto.DeleteActionNotification;
      reader.readMessage(value,proto.DeleteActionNotification.deserializeBinaryFromReader);
      msg.setDeleteNotification(value);
      break;
    case 16:
      var value = new proto.PresenceNotification;
      reader.readMessage(value,proto.PresenceNotification.deserializeBinaryFromReader);
      msg.setPresenceNotification(value);
      break;
    case 17:
      var value = new proto.BlockNotification;
      reader.readMessage(value,proto.BlockNotification.deserializeBinaryFromReader);
      msg.setBlockNotification(value);
      break;
    case 19:
      var value = new proto.SetNotificationSettingNotification;
      reader.readMessage(value,proto.SetNotificationSettingNotification.deserializeBinaryFromReader);
      msg.setNotificationSettingNotification(value);
      break;
    case 20:
      var value = new proto.RichPresenceEnabledStateNotification;
      reader.readMessage(value,proto.RichPresenceEnabledStateNotification.deserializeBinaryFromReader);
      msg.setRichPresenceEnabledStateNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateUpdateHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StateUpdateHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Conversation.serializeBinaryToWriter
    );
  }
  f = message.getConversationNotification();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationNotification.serializeBinaryToWriter
    );
  }
  f = message.getEventNotification();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EventNotification.serializeBinaryToWriter
    );
  }
  f = message.getFocusNotification();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SetFocusNotification.serializeBinaryToWriter
    );
  }
  f = message.getTypingNotification();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SetTypingNotification.serializeBinaryToWriter
    );
  }
  f = message.getNotificationLevelNotification();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SetConversationNotificationLevelNotification.serializeBinaryToWriter
    );
  }
  f = message.getReplyToInviteNotification();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ReplyToInviteNotification.serializeBinaryToWriter
    );
  }
  f = message.getWatermarkNotification();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.WatermarkNotification.serializeBinaryToWriter
    );
  }
  f = message.getViewModification();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ConversationViewModification.serializeBinaryToWriter
    );
  }
  f = message.getEasterEggNotification();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.EasterEggNotification.serializeBinaryToWriter
    );
  }
  f = message.getSelfPresenceNotification();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.SelfPresenceNotification.serializeBinaryToWriter
    );
  }
  f = message.getDeleteNotification();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.DeleteActionNotification.serializeBinaryToWriter
    );
  }
  f = message.getPresenceNotification();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.PresenceNotification.serializeBinaryToWriter
    );
  }
  f = message.getBlockNotification();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.BlockNotification.serializeBinaryToWriter
    );
  }
  f = message.getNotificationSettingNotification();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.SetNotificationSettingNotification.serializeBinaryToWriter
    );
  }
  f = message.getRichPresenceEnabledStateNotification();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.RichPresenceEnabledStateNotification.serializeBinaryToWriter
    );
  }
};


/**
 * optional StateUpdateHeader state_update_header = 1;
 * @return {?proto.StateUpdateHeader}
 */
proto.StateUpdate.prototype.getStateUpdateHeader = function() {
  return /** @type{?proto.StateUpdateHeader} */ (
    jspb.Message.getWrapperField(this, proto.StateUpdateHeader, 1));
};


/** @param {?proto.StateUpdateHeader|undefined} value */
proto.StateUpdate.prototype.setStateUpdateHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.StateUpdate.prototype.clearStateUpdateHeader = function() {
  this.setStateUpdateHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasStateUpdateHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Conversation conversation = 13;
 * @return {?proto.Conversation}
 */
proto.StateUpdate.prototype.getConversation = function() {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 13));
};


/** @param {?proto.Conversation|undefined} value */
proto.StateUpdate.prototype.setConversation = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.StateUpdate.prototype.clearConversation = function() {
  this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ConversationNotification conversation_notification = 2;
 * @return {?proto.ConversationNotification}
 */
proto.StateUpdate.prototype.getConversationNotification = function() {
  return /** @type{?proto.ConversationNotification} */ (
    jspb.Message.getWrapperField(this, proto.ConversationNotification, 2));
};


/** @param {?proto.ConversationNotification|undefined} value */
proto.StateUpdate.prototype.setConversationNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearConversationNotification = function() {
  this.setConversationNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasConversationNotification = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventNotification event_notification = 3;
 * @return {?proto.EventNotification}
 */
proto.StateUpdate.prototype.getEventNotification = function() {
  return /** @type{?proto.EventNotification} */ (
    jspb.Message.getWrapperField(this, proto.EventNotification, 3));
};


/** @param {?proto.EventNotification|undefined} value */
proto.StateUpdate.prototype.setEventNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearEventNotification = function() {
  this.setEventNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasEventNotification = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SetFocusNotification focus_notification = 4;
 * @return {?proto.SetFocusNotification}
 */
proto.StateUpdate.prototype.getFocusNotification = function() {
  return /** @type{?proto.SetFocusNotification} */ (
    jspb.Message.getWrapperField(this, proto.SetFocusNotification, 4));
};


/** @param {?proto.SetFocusNotification|undefined} value */
proto.StateUpdate.prototype.setFocusNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearFocusNotification = function() {
  this.setFocusNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasFocusNotification = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetTypingNotification typing_notification = 5;
 * @return {?proto.SetTypingNotification}
 */
proto.StateUpdate.prototype.getTypingNotification = function() {
  return /** @type{?proto.SetTypingNotification} */ (
    jspb.Message.getWrapperField(this, proto.SetTypingNotification, 5));
};


/** @param {?proto.SetTypingNotification|undefined} value */
proto.StateUpdate.prototype.setTypingNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearTypingNotification = function() {
  this.setTypingNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasTypingNotification = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SetConversationNotificationLevelNotification notification_level_notification = 6;
 * @return {?proto.SetConversationNotificationLevelNotification}
 */
proto.StateUpdate.prototype.getNotificationLevelNotification = function() {
  return /** @type{?proto.SetConversationNotificationLevelNotification} */ (
    jspb.Message.getWrapperField(this, proto.SetConversationNotificationLevelNotification, 6));
};


/** @param {?proto.SetConversationNotificationLevelNotification|undefined} value */
proto.StateUpdate.prototype.setNotificationLevelNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearNotificationLevelNotification = function() {
  this.setNotificationLevelNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasNotificationLevelNotification = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReplyToInviteNotification reply_to_invite_notification = 7;
 * @return {?proto.ReplyToInviteNotification}
 */
proto.StateUpdate.prototype.getReplyToInviteNotification = function() {
  return /** @type{?proto.ReplyToInviteNotification} */ (
    jspb.Message.getWrapperField(this, proto.ReplyToInviteNotification, 7));
};


/** @param {?proto.ReplyToInviteNotification|undefined} value */
proto.StateUpdate.prototype.setReplyToInviteNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearReplyToInviteNotification = function() {
  this.setReplyToInviteNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasReplyToInviteNotification = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional WatermarkNotification watermark_notification = 8;
 * @return {?proto.WatermarkNotification}
 */
proto.StateUpdate.prototype.getWatermarkNotification = function() {
  return /** @type{?proto.WatermarkNotification} */ (
    jspb.Message.getWrapperField(this, proto.WatermarkNotification, 8));
};


/** @param {?proto.WatermarkNotification|undefined} value */
proto.StateUpdate.prototype.setWatermarkNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearWatermarkNotification = function() {
  this.setWatermarkNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasWatermarkNotification = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ConversationViewModification view_modification = 11;
 * @return {?proto.ConversationViewModification}
 */
proto.StateUpdate.prototype.getViewModification = function() {
  return /** @type{?proto.ConversationViewModification} */ (
    jspb.Message.getWrapperField(this, proto.ConversationViewModification, 11));
};


/** @param {?proto.ConversationViewModification|undefined} value */
proto.StateUpdate.prototype.setViewModification = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearViewModification = function() {
  this.setViewModification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasViewModification = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional EasterEggNotification easter_egg_notification = 12;
 * @return {?proto.EasterEggNotification}
 */
proto.StateUpdate.prototype.getEasterEggNotification = function() {
  return /** @type{?proto.EasterEggNotification} */ (
    jspb.Message.getWrapperField(this, proto.EasterEggNotification, 12));
};


/** @param {?proto.EasterEggNotification|undefined} value */
proto.StateUpdate.prototype.setEasterEggNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearEasterEggNotification = function() {
  this.setEasterEggNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasEasterEggNotification = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SelfPresenceNotification self_presence_notification = 14;
 * @return {?proto.SelfPresenceNotification}
 */
proto.StateUpdate.prototype.getSelfPresenceNotification = function() {
  return /** @type{?proto.SelfPresenceNotification} */ (
    jspb.Message.getWrapperField(this, proto.SelfPresenceNotification, 14));
};


/** @param {?proto.SelfPresenceNotification|undefined} value */
proto.StateUpdate.prototype.setSelfPresenceNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearSelfPresenceNotification = function() {
  this.setSelfPresenceNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasSelfPresenceNotification = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional DeleteActionNotification delete_notification = 15;
 * @return {?proto.DeleteActionNotification}
 */
proto.StateUpdate.prototype.getDeleteNotification = function() {
  return /** @type{?proto.DeleteActionNotification} */ (
    jspb.Message.getWrapperField(this, proto.DeleteActionNotification, 15));
};


/** @param {?proto.DeleteActionNotification|undefined} value */
proto.StateUpdate.prototype.setDeleteNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearDeleteNotification = function() {
  this.setDeleteNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasDeleteNotification = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PresenceNotification presence_notification = 16;
 * @return {?proto.PresenceNotification}
 */
proto.StateUpdate.prototype.getPresenceNotification = function() {
  return /** @type{?proto.PresenceNotification} */ (
    jspb.Message.getWrapperField(this, proto.PresenceNotification, 16));
};


/** @param {?proto.PresenceNotification|undefined} value */
proto.StateUpdate.prototype.setPresenceNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearPresenceNotification = function() {
  this.setPresenceNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasPresenceNotification = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional BlockNotification block_notification = 17;
 * @return {?proto.BlockNotification}
 */
proto.StateUpdate.prototype.getBlockNotification = function() {
  return /** @type{?proto.BlockNotification} */ (
    jspb.Message.getWrapperField(this, proto.BlockNotification, 17));
};


/** @param {?proto.BlockNotification|undefined} value */
proto.StateUpdate.prototype.setBlockNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearBlockNotification = function() {
  this.setBlockNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasBlockNotification = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SetNotificationSettingNotification notification_setting_notification = 19;
 * @return {?proto.SetNotificationSettingNotification}
 */
proto.StateUpdate.prototype.getNotificationSettingNotification = function() {
  return /** @type{?proto.SetNotificationSettingNotification} */ (
    jspb.Message.getWrapperField(this, proto.SetNotificationSettingNotification, 19));
};


/** @param {?proto.SetNotificationSettingNotification|undefined} value */
proto.StateUpdate.prototype.setNotificationSettingNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearNotificationSettingNotification = function() {
  this.setNotificationSettingNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasNotificationSettingNotification = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RichPresenceEnabledStateNotification rich_presence_enabled_state_notification = 20;
 * @return {?proto.RichPresenceEnabledStateNotification}
 */
proto.StateUpdate.prototype.getRichPresenceEnabledStateNotification = function() {
  return /** @type{?proto.RichPresenceEnabledStateNotification} */ (
    jspb.Message.getWrapperField(this, proto.RichPresenceEnabledStateNotification, 20));
};


/** @param {?proto.RichPresenceEnabledStateNotification|undefined} value */
proto.StateUpdate.prototype.setRichPresenceEnabledStateNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.StateUpdate.oneofGroups_[0], value);
};


proto.StateUpdate.prototype.clearRichPresenceEnabledStateNotification = function() {
  this.setRichPresenceEnabledStateNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdate.prototype.hasRichPresenceEnabledStateNotification = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StateUpdateHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StateUpdateHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StateUpdateHeader.displayName = 'proto.StateUpdateHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StateUpdateHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.StateUpdateHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StateUpdateHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateUpdateHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeClientState: jspb.Message.getField(msg, 1),
    requestTraceId: jspb.Message.getField(msg, 3),
    notificationSettings: (f = msg.getNotificationSettings()) && proto.NotificationSettings.toObject(includeInstance, f),
    currentServerTime: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StateUpdateHeader}
 */
proto.StateUpdateHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StateUpdateHeader;
  return proto.StateUpdateHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StateUpdateHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StateUpdateHeader}
 */
proto.StateUpdateHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ActiveClientState} */ (reader.readEnum());
      msg.setActiveClientState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestTraceId(value);
      break;
    case 4:
      var value = new proto.NotificationSettings;
      reader.readMessage(value,proto.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentServerTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StateUpdateHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StateUpdateHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StateUpdateHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateUpdateHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ActiveClientState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.NotificationSettings.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional ActiveClientState active_client_state = 1;
 * @return {!proto.ActiveClientState}
 */
proto.StateUpdateHeader.prototype.getActiveClientState = function() {
  return /** @type {!proto.ActiveClientState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ActiveClientState} value */
proto.StateUpdateHeader.prototype.setActiveClientState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.StateUpdateHeader.prototype.clearActiveClientState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdateHeader.prototype.hasActiveClientState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string request_trace_id = 3;
 * @return {string}
 */
proto.StateUpdateHeader.prototype.getRequestTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.StateUpdateHeader.prototype.setRequestTraceId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.StateUpdateHeader.prototype.clearRequestTraceId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdateHeader.prototype.hasRequestTraceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NotificationSettings notification_settings = 4;
 * @return {?proto.NotificationSettings}
 */
proto.StateUpdateHeader.prototype.getNotificationSettings = function() {
  return /** @type{?proto.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.NotificationSettings, 4));
};


/** @param {?proto.NotificationSettings|undefined} value */
proto.StateUpdateHeader.prototype.setNotificationSettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.StateUpdateHeader.prototype.clearNotificationSettings = function() {
  this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdateHeader.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 current_server_time = 5;
 * @return {number}
 */
proto.StateUpdateHeader.prototype.getCurrentServerTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.StateUpdateHeader.prototype.setCurrentServerTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.StateUpdateHeader.prototype.clearCurrentServerTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StateUpdateHeader.prototype.hasCurrentServerTime = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BatchUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BatchUpdate.repeatedFields_, null);
};
goog.inherits(proto.BatchUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BatchUpdate.displayName = 'proto.BatchUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BatchUpdate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BatchUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.BatchUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BatchUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatchUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateUpdateList: jspb.Message.toObjectList(msg.getStateUpdateList(),
    proto.StateUpdate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BatchUpdate}
 */
proto.BatchUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BatchUpdate;
  return proto.BatchUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BatchUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BatchUpdate}
 */
proto.BatchUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StateUpdate;
      reader.readMessage(value,proto.StateUpdate.deserializeBinaryFromReader);
      msg.addStateUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BatchUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BatchUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BatchUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatchUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateUpdateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.StateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StateUpdate state_update = 1;
 * @return {!Array.<!proto.StateUpdate>}
 */
proto.BatchUpdate.prototype.getStateUpdateList = function() {
  return /** @type{!Array.<!proto.StateUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StateUpdate, 1));
};


/** @param {!Array.<!proto.StateUpdate>} value */
proto.BatchUpdate.prototype.setStateUpdateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.StateUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StateUpdate}
 */
proto.BatchUpdate.prototype.addStateUpdate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.StateUpdate, opt_index);
};


proto.BatchUpdate.prototype.clearStateUpdateList = function() {
  this.setStateUpdateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationNotification.displayName = 'proto.ConversationNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversation: (f = msg.getConversation()) && proto.Conversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationNotification}
 */
proto.ConversationNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationNotification;
  return proto.ConversationNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationNotification}
 */
proto.ConversationNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Conversation;
      reader.readMessage(value,proto.Conversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Conversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Conversation conversation = 1;
 * @return {?proto.Conversation}
 */
proto.ConversationNotification.prototype.getConversation = function() {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 1));
};


/** @param {?proto.Conversation|undefined} value */
proto.ConversationNotification.prototype.setConversation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConversationNotification.prototype.clearConversation = function() {
  this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationNotification.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventNotification.displayName = 'proto.EventNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.EventNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventNotification}
 */
proto.EventNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventNotification;
  return proto.EventNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventNotification}
 */
proto.EventNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.EventNotification.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.EventNotification.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EventNotification.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventNotification.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetFocusNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetFocusNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetFocusNotification.displayName = 'proto.SetFocusNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetFocusNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.SetFocusNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetFocusNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    senderId: (f = msg.getSenderId()) && proto.ParticipantId.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 3),
    type: jspb.Message.getField(msg, 4),
    device: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetFocusNotification}
 */
proto.SetFocusNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetFocusNotification;
  return proto.SetFocusNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetFocusNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetFocusNotification}
 */
proto.SetFocusNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setSenderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!proto.FocusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!proto.FocusDevice} */ (reader.readEnum());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetFocusNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetFocusNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetFocusNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getSenderId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.FocusType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.FocusDevice} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.SetFocusNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetFocusNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetFocusNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParticipantId sender_id = 2;
 * @return {?proto.ParticipantId}
 */
proto.SetFocusNotification.prototype.getSenderId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 2));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.SetFocusNotification.prototype.setSenderId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetFocusNotification.prototype.clearSenderId = function() {
  this.setSenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusNotification.prototype.hasSenderId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.SetFocusNotification.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SetFocusNotification.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetFocusNotification.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusNotification.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FocusType type = 4;
 * @return {!proto.FocusType}
 */
proto.SetFocusNotification.prototype.getType = function() {
  return /** @type {!proto.FocusType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.FocusType} value */
proto.SetFocusNotification.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetFocusNotification.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusNotification.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FocusDevice device = 5;
 * @return {!proto.FocusDevice}
 */
proto.SetFocusNotification.prototype.getDevice = function() {
  return /** @type {!proto.FocusDevice} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.FocusDevice} value */
proto.SetFocusNotification.prototype.setDevice = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SetFocusNotification.prototype.clearDevice = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusNotification.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetTypingNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetTypingNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetTypingNotification.displayName = 'proto.SetTypingNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetTypingNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.SetTypingNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetTypingNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    senderId: (f = msg.getSenderId()) && proto.ParticipantId.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 3),
    type: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetTypingNotification}
 */
proto.SetTypingNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetTypingNotification;
  return proto.SetTypingNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetTypingNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetTypingNotification}
 */
proto.SetTypingNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setSenderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!proto.TypingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetTypingNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetTypingNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetTypingNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getSenderId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.TypingType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.SetTypingNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetTypingNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetTypingNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParticipantId sender_id = 2;
 * @return {?proto.ParticipantId}
 */
proto.SetTypingNotification.prototype.getSenderId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 2));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.SetTypingNotification.prototype.setSenderId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetTypingNotification.prototype.clearSenderId = function() {
  this.setSenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingNotification.prototype.hasSenderId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.SetTypingNotification.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SetTypingNotification.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetTypingNotification.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingNotification.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypingType type = 4;
 * @return {!proto.TypingType}
 */
proto.SetTypingNotification.prototype.getType = function() {
  return /** @type {!proto.TypingType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.TypingType} value */
proto.SetTypingNotification.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetTypingNotification.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingNotification.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConversationNotificationLevelNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConversationNotificationLevelNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetConversationNotificationLevelNotification.displayName = 'proto.SetConversationNotificationLevelNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConversationNotificationLevelNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConversationNotificationLevelNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConversationNotificationLevelNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    level: jspb.Message.getField(msg, 2),
    timestamp: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConversationNotificationLevelNotification}
 */
proto.SetConversationNotificationLevelNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConversationNotificationLevelNotification;
  return proto.SetConversationNotificationLevelNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConversationNotificationLevelNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConversationNotificationLevelNotification}
 */
proto.SetConversationNotificationLevelNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {!proto.NotificationLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConversationNotificationLevelNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConversationNotificationLevelNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConversationNotificationLevelNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.NotificationLevel} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.SetConversationNotificationLevelNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetConversationNotificationLevelNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetConversationNotificationLevelNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NotificationLevel level = 2;
 * @return {!proto.NotificationLevel}
 */
proto.SetConversationNotificationLevelNotification.prototype.getLevel = function() {
  return /** @type {!proto.NotificationLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.NotificationLevel} value */
proto.SetConversationNotificationLevelNotification.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetConversationNotificationLevelNotification.prototype.clearLevel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelNotification.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.SetConversationNotificationLevelNotification.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SetConversationNotificationLevelNotification.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetConversationNotificationLevelNotification.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelNotification.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReplyToInviteNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReplyToInviteNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReplyToInviteNotification.displayName = 'proto.ReplyToInviteNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReplyToInviteNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.ReplyToInviteNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReplyToInviteNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplyToInviteNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReplyToInviteNotification}
 */
proto.ReplyToInviteNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReplyToInviteNotification;
  return proto.ReplyToInviteNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReplyToInviteNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReplyToInviteNotification}
 */
proto.ReplyToInviteNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReplyToInviteType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReplyToInviteNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReplyToInviteNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReplyToInviteNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplyToInviteNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ReplyToInviteType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.ReplyToInviteNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.ReplyToInviteNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ReplyToInviteNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReplyToInviteNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReplyToInviteType type = 2;
 * @return {!proto.ReplyToInviteType}
 */
proto.ReplyToInviteNotification.prototype.getType = function() {
  return /** @type {!proto.ReplyToInviteType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReplyToInviteType} value */
proto.ReplyToInviteNotification.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ReplyToInviteNotification.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReplyToInviteNotification.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WatermarkNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WatermarkNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WatermarkNotification.displayName = 'proto.WatermarkNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WatermarkNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.WatermarkNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WatermarkNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WatermarkNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: (f = msg.getSenderId()) && proto.ParticipantId.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    latestReadTimestamp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WatermarkNotification}
 */
proto.WatermarkNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WatermarkNotification;
  return proto.WatermarkNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WatermarkNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WatermarkNotification}
 */
proto.WatermarkNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setSenderId(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestReadTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WatermarkNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WatermarkNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WatermarkNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WatermarkNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional ParticipantId sender_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.WatermarkNotification.prototype.getSenderId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.WatermarkNotification.prototype.setSenderId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WatermarkNotification.prototype.clearSenderId = function() {
  this.setSenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WatermarkNotification.prototype.hasSenderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.WatermarkNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.WatermarkNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WatermarkNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WatermarkNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 latest_read_timestamp = 3;
 * @return {number}
 */
proto.WatermarkNotification.prototype.getLatestReadTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WatermarkNotification.prototype.setLatestReadTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.WatermarkNotification.prototype.clearLatestReadTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WatermarkNotification.prototype.hasLatestReadTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationViewModification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationViewModification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationViewModification.displayName = 'proto.ConversationViewModification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationViewModification.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationViewModification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationViewModification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationViewModification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    oldView: jspb.Message.getField(msg, 2),
    newView: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationViewModification}
 */
proto.ConversationViewModification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationViewModification;
  return proto.ConversationViewModification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationViewModification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationViewModification}
 */
proto.ConversationViewModification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {!proto.ConversationView} */ (reader.readEnum());
      msg.setOldView(value);
      break;
    case 3:
      var value = /** @type {!proto.ConversationView} */ (reader.readEnum());
      msg.setNewView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationViewModification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationViewModification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationViewModification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationViewModification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ConversationView} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.ConversationView} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.ConversationViewModification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.ConversationViewModification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConversationViewModification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationViewModification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationView old_view = 2;
 * @return {!proto.ConversationView}
 */
proto.ConversationViewModification.prototype.getOldView = function() {
  return /** @type {!proto.ConversationView} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ConversationView} value */
proto.ConversationViewModification.prototype.setOldView = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ConversationViewModification.prototype.clearOldView = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationViewModification.prototype.hasOldView = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConversationView new_view = 3;
 * @return {!proto.ConversationView}
 */
proto.ConversationViewModification.prototype.getNewView = function() {
  return /** @type {!proto.ConversationView} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ConversationView} value */
proto.ConversationViewModification.prototype.setNewView = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ConversationViewModification.prototype.clearNewView = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationViewModification.prototype.hasNewView = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EasterEggNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EasterEggNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EasterEggNotification.displayName = 'proto.EasterEggNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EasterEggNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.EasterEggNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EasterEggNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: (f = msg.getSenderId()) && proto.ParticipantId.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    easterEgg: (f = msg.getEasterEgg()) && proto.EasterEgg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EasterEggNotification}
 */
proto.EasterEggNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EasterEggNotification;
  return proto.EasterEggNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EasterEggNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EasterEggNotification}
 */
proto.EasterEggNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setSenderId(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = new proto.EasterEgg;
      reader.readMessage(value,proto.EasterEgg.deserializeBinaryFromReader);
      msg.setEasterEgg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EasterEggNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EasterEggNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EasterEggNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getEasterEgg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EasterEgg.serializeBinaryToWriter
    );
  }
};


/**
 * optional ParticipantId sender_id = 1;
 * @return {?proto.ParticipantId}
 */
proto.EasterEggNotification.prototype.getSenderId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 1));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.EasterEggNotification.prototype.setSenderId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EasterEggNotification.prototype.clearSenderId = function() {
  this.setSenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggNotification.prototype.hasSenderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.EasterEggNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.EasterEggNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.EasterEggNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EasterEgg easter_egg = 3;
 * @return {?proto.EasterEgg}
 */
proto.EasterEggNotification.prototype.getEasterEgg = function() {
  return /** @type{?proto.EasterEgg} */ (
    jspb.Message.getWrapperField(this, proto.EasterEgg, 3));
};


/** @param {?proto.EasterEgg|undefined} value */
proto.EasterEggNotification.prototype.setEasterEgg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.EasterEggNotification.prototype.clearEasterEgg = function() {
  this.setEasterEgg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggNotification.prototype.hasEasterEgg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelfPresenceNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SelfPresenceNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelfPresenceNotification.displayName = 'proto.SelfPresenceNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelfPresenceNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.SelfPresenceNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelfPresenceNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelfPresenceNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientPresenceState: (f = msg.getClientPresenceState()) && proto.ClientPresenceState.toObject(includeInstance, f),
    doNotDisturbSetting: (f = msg.getDoNotDisturbSetting()) && proto.DoNotDisturbSetting.toObject(includeInstance, f),
    desktopOffSetting: (f = msg.getDesktopOffSetting()) && proto.DesktopOffSetting.toObject(includeInstance, f),
    desktopOffState: (f = msg.getDesktopOffState()) && proto.DesktopOffState.toObject(includeInstance, f),
    moodState: (f = msg.getMoodState()) && proto.MoodState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelfPresenceNotification}
 */
proto.SelfPresenceNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelfPresenceNotification;
  return proto.SelfPresenceNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelfPresenceNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelfPresenceNotification}
 */
proto.SelfPresenceNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientPresenceState;
      reader.readMessage(value,proto.ClientPresenceState.deserializeBinaryFromReader);
      msg.setClientPresenceState(value);
      break;
    case 3:
      var value = new proto.DoNotDisturbSetting;
      reader.readMessage(value,proto.DoNotDisturbSetting.deserializeBinaryFromReader);
      msg.setDoNotDisturbSetting(value);
      break;
    case 4:
      var value = new proto.DesktopOffSetting;
      reader.readMessage(value,proto.DesktopOffSetting.deserializeBinaryFromReader);
      msg.setDesktopOffSetting(value);
      break;
    case 5:
      var value = new proto.DesktopOffState;
      reader.readMessage(value,proto.DesktopOffState.deserializeBinaryFromReader);
      msg.setDesktopOffState(value);
      break;
    case 6:
      var value = new proto.MoodState;
      reader.readMessage(value,proto.MoodState.deserializeBinaryFromReader);
      msg.setMoodState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelfPresenceNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelfPresenceNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelfPresenceNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelfPresenceNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientPresenceState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientPresenceState.serializeBinaryToWriter
    );
  }
  f = message.getDoNotDisturbSetting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DoNotDisturbSetting.serializeBinaryToWriter
    );
  }
  f = message.getDesktopOffSetting();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DesktopOffSetting.serializeBinaryToWriter
    );
  }
  f = message.getDesktopOffState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DesktopOffState.serializeBinaryToWriter
    );
  }
  f = message.getMoodState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MoodState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientPresenceState client_presence_state = 1;
 * @return {?proto.ClientPresenceState}
 */
proto.SelfPresenceNotification.prototype.getClientPresenceState = function() {
  return /** @type{?proto.ClientPresenceState} */ (
    jspb.Message.getWrapperField(this, proto.ClientPresenceState, 1));
};


/** @param {?proto.ClientPresenceState|undefined} value */
proto.SelfPresenceNotification.prototype.setClientPresenceState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SelfPresenceNotification.prototype.clearClientPresenceState = function() {
  this.setClientPresenceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelfPresenceNotification.prototype.hasClientPresenceState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DoNotDisturbSetting do_not_disturb_setting = 3;
 * @return {?proto.DoNotDisturbSetting}
 */
proto.SelfPresenceNotification.prototype.getDoNotDisturbSetting = function() {
  return /** @type{?proto.DoNotDisturbSetting} */ (
    jspb.Message.getWrapperField(this, proto.DoNotDisturbSetting, 3));
};


/** @param {?proto.DoNotDisturbSetting|undefined} value */
proto.SelfPresenceNotification.prototype.setDoNotDisturbSetting = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SelfPresenceNotification.prototype.clearDoNotDisturbSetting = function() {
  this.setDoNotDisturbSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelfPresenceNotification.prototype.hasDoNotDisturbSetting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DesktopOffSetting desktop_off_setting = 4;
 * @return {?proto.DesktopOffSetting}
 */
proto.SelfPresenceNotification.prototype.getDesktopOffSetting = function() {
  return /** @type{?proto.DesktopOffSetting} */ (
    jspb.Message.getWrapperField(this, proto.DesktopOffSetting, 4));
};


/** @param {?proto.DesktopOffSetting|undefined} value */
proto.SelfPresenceNotification.prototype.setDesktopOffSetting = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SelfPresenceNotification.prototype.clearDesktopOffSetting = function() {
  this.setDesktopOffSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelfPresenceNotification.prototype.hasDesktopOffSetting = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DesktopOffState desktop_off_state = 5;
 * @return {?proto.DesktopOffState}
 */
proto.SelfPresenceNotification.prototype.getDesktopOffState = function() {
  return /** @type{?proto.DesktopOffState} */ (
    jspb.Message.getWrapperField(this, proto.DesktopOffState, 5));
};


/** @param {?proto.DesktopOffState|undefined} value */
proto.SelfPresenceNotification.prototype.setDesktopOffState = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SelfPresenceNotification.prototype.clearDesktopOffState = function() {
  this.setDesktopOffState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelfPresenceNotification.prototype.hasDesktopOffState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MoodState mood_state = 6;
 * @return {?proto.MoodState}
 */
proto.SelfPresenceNotification.prototype.getMoodState = function() {
  return /** @type{?proto.MoodState} */ (
    jspb.Message.getWrapperField(this, proto.MoodState, 6));
};


/** @param {?proto.MoodState|undefined} value */
proto.SelfPresenceNotification.prototype.setMoodState = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SelfPresenceNotification.prototype.clearMoodState = function() {
  this.setMoodState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelfPresenceNotification.prototype.hasMoodState = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteActionNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteActionNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteActionNotification.displayName = 'proto.DeleteActionNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteActionNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteActionNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteActionNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteActionNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    deleteAction: (f = msg.getDeleteAction()) && proto.DeleteAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteActionNotification}
 */
proto.DeleteActionNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteActionNotification;
  return proto.DeleteActionNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteActionNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteActionNotification}
 */
proto.DeleteActionNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 2:
      var value = new proto.DeleteAction;
      reader.readMessage(value,proto.DeleteAction.deserializeBinaryFromReader);
      msg.setDeleteAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteActionNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteActionNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteActionNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteActionNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getDeleteAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DeleteAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.DeleteActionNotification.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.DeleteActionNotification.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DeleteActionNotification.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteActionNotification.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteAction delete_action = 2;
 * @return {?proto.DeleteAction}
 */
proto.DeleteActionNotification.prototype.getDeleteAction = function() {
  return /** @type{?proto.DeleteAction} */ (
    jspb.Message.getWrapperField(this, proto.DeleteAction, 2));
};


/** @param {?proto.DeleteAction|undefined} value */
proto.DeleteActionNotification.prototype.setDeleteAction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DeleteActionNotification.prototype.clearDeleteAction = function() {
  this.setDeleteAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteActionNotification.prototype.hasDeleteAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PresenceNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PresenceNotification.repeatedFields_, null);
};
goog.inherits(proto.PresenceNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PresenceNotification.displayName = 'proto.PresenceNotification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PresenceNotification.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PresenceNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.PresenceNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PresenceNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    presenceList: jspb.Message.toObjectList(msg.getPresenceList(),
    proto.PresenceResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PresenceNotification}
 */
proto.PresenceNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PresenceNotification;
  return proto.PresenceNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PresenceNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PresenceNotification}
 */
proto.PresenceNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PresenceResult;
      reader.readMessage(value,proto.PresenceResult.deserializeBinaryFromReader);
      msg.addPresence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PresenceNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PresenceNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PresenceNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PresenceNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PresenceResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PresenceResult presence = 1;
 * @return {!Array.<!proto.PresenceResult>}
 */
proto.PresenceNotification.prototype.getPresenceList = function() {
  return /** @type{!Array.<!proto.PresenceResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PresenceResult, 1));
};


/** @param {!Array.<!proto.PresenceResult>} value */
proto.PresenceNotification.prototype.setPresenceList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PresenceResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PresenceResult}
 */
proto.PresenceNotification.prototype.addPresence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PresenceResult, opt_index);
};


proto.PresenceNotification.prototype.clearPresenceList = function() {
  this.setPresenceList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockNotification.repeatedFields_, null);
};
goog.inherits(proto.BlockNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockNotification.displayName = 'proto.BlockNotification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockNotification.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockStateChangeList: jspb.Message.toObjectList(msg.getBlockStateChangeList(),
    proto.BlockStateChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockNotification}
 */
proto.BlockNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockNotification;
  return proto.BlockNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockNotification}
 */
proto.BlockNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BlockStateChange;
      reader.readMessage(value,proto.BlockStateChange.deserializeBinaryFromReader);
      msg.addBlockStateChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockStateChangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BlockStateChange.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlockStateChange block_state_change = 1;
 * @return {!Array.<!proto.BlockStateChange>}
 */
proto.BlockNotification.prototype.getBlockStateChangeList = function() {
  return /** @type{!Array.<!proto.BlockStateChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BlockStateChange, 1));
};


/** @param {!Array.<!proto.BlockStateChange>} value */
proto.BlockNotification.prototype.setBlockStateChangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BlockStateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BlockStateChange}
 */
proto.BlockNotification.prototype.addBlockStateChange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BlockStateChange, opt_index);
};


proto.BlockNotification.prototype.clearBlockStateChangeList = function() {
  this.setBlockStateChangeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetNotificationSettingNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetNotificationSettingNotification.repeatedFields_, null);
};
goog.inherits(proto.SetNotificationSettingNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetNotificationSettingNotification.displayName = 'proto.SetNotificationSettingNotification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetNotificationSettingNotification.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetNotificationSettingNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.SetNotificationSettingNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetNotificationSettingNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetNotificationSettingNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurationBitList: jspb.Message.toObjectList(msg.getConfigurationBitList(),
    proto.ConfigurationBit.toObject, includeInstance),
    desktopSoundSetting: (f = msg.getDesktopSoundSetting()) && proto.DesktopSoundSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetNotificationSettingNotification}
 */
proto.SetNotificationSettingNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetNotificationSettingNotification;
  return proto.SetNotificationSettingNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetNotificationSettingNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetNotificationSettingNotification}
 */
proto.SetNotificationSettingNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationBit;
      reader.readMessage(value,proto.ConfigurationBit.deserializeBinaryFromReader);
      msg.addConfigurationBit(value);
      break;
    case 2:
      var value = new proto.DesktopSoundSetting;
      reader.readMessage(value,proto.DesktopSoundSetting.deserializeBinaryFromReader);
      msg.setDesktopSoundSetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetNotificationSettingNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetNotificationSettingNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetNotificationSettingNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetNotificationSettingNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationBitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ConfigurationBit.serializeBinaryToWriter
    );
  }
  f = message.getDesktopSoundSetting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DesktopSoundSetting.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigurationBit configuration_bit = 1;
 * @return {!Array.<!proto.ConfigurationBit>}
 */
proto.SetNotificationSettingNotification.prototype.getConfigurationBitList = function() {
  return /** @type{!Array.<!proto.ConfigurationBit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigurationBit, 1));
};


/** @param {!Array.<!proto.ConfigurationBit>} value */
proto.SetNotificationSettingNotification.prototype.setConfigurationBitList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ConfigurationBit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigurationBit}
 */
proto.SetNotificationSettingNotification.prototype.addConfigurationBit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ConfigurationBit, opt_index);
};


proto.SetNotificationSettingNotification.prototype.clearConfigurationBitList = function() {
  this.setConfigurationBitList([]);
};


/**
 * optional DesktopSoundSetting desktop_sound_setting = 2;
 * @return {?proto.DesktopSoundSetting}
 */
proto.SetNotificationSettingNotification.prototype.getDesktopSoundSetting = function() {
  return /** @type{?proto.DesktopSoundSetting} */ (
    jspb.Message.getWrapperField(this, proto.DesktopSoundSetting, 2));
};


/** @param {?proto.DesktopSoundSetting|undefined} value */
proto.SetNotificationSettingNotification.prototype.setDesktopSoundSetting = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetNotificationSettingNotification.prototype.clearDesktopSoundSetting = function() {
  this.setDesktopSoundSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetNotificationSettingNotification.prototype.hasDesktopSoundSetting = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RichPresenceEnabledStateNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RichPresenceEnabledStateNotification.repeatedFields_, null);
};
goog.inherits(proto.RichPresenceEnabledStateNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RichPresenceEnabledStateNotification.displayName = 'proto.RichPresenceEnabledStateNotification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RichPresenceEnabledStateNotification.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RichPresenceEnabledStateNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.RichPresenceEnabledStateNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RichPresenceEnabledStateNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceEnabledStateNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    richPresenceEnabledStateList: jspb.Message.toObjectList(msg.getRichPresenceEnabledStateList(),
    proto.RichPresenceEnabledState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RichPresenceEnabledStateNotification}
 */
proto.RichPresenceEnabledStateNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RichPresenceEnabledStateNotification;
  return proto.RichPresenceEnabledStateNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RichPresenceEnabledStateNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RichPresenceEnabledStateNotification}
 */
proto.RichPresenceEnabledStateNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RichPresenceEnabledState;
      reader.readMessage(value,proto.RichPresenceEnabledState.deserializeBinaryFromReader);
      msg.addRichPresenceEnabledState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RichPresenceEnabledStateNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RichPresenceEnabledStateNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RichPresenceEnabledStateNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RichPresenceEnabledStateNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRichPresenceEnabledStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RichPresenceEnabledState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RichPresenceEnabledState rich_presence_enabled_state = 1;
 * @return {!Array.<!proto.RichPresenceEnabledState>}
 */
proto.RichPresenceEnabledStateNotification.prototype.getRichPresenceEnabledStateList = function() {
  return /** @type{!Array.<!proto.RichPresenceEnabledState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RichPresenceEnabledState, 1));
};


/** @param {!Array.<!proto.RichPresenceEnabledState>} value */
proto.RichPresenceEnabledStateNotification.prototype.setRichPresenceEnabledStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RichPresenceEnabledState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RichPresenceEnabledState}
 */
proto.RichPresenceEnabledStateNotification.prototype.addRichPresenceEnabledState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RichPresenceEnabledState, opt_index);
};


proto.RichPresenceEnabledStateNotification.prototype.clearRichPresenceEnabledStateList = function() {
  this.setRichPresenceEnabledStateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConversationSpec.displayName = 'proto.ConversationSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConversationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ConversationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConversationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationSpec}
 */
proto.ConversationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationSpec;
  return proto.ConversationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationSpec}
 */
proto.ConversationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConversationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConversationId conversation_id = 1;
 * @return {?proto.ConversationId}
 */
proto.ConversationSpec.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 1));
};


/** @param {?proto.ConversationId|undefined} value */
proto.ConversationSpec.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConversationSpec.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConversationSpec.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OffnetworkAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OffnetworkAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OffnetworkAddress.displayName = 'proto.OffnetworkAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OffnetworkAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.OffnetworkAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OffnetworkAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OffnetworkAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    email: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OffnetworkAddress}
 */
proto.OffnetworkAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OffnetworkAddress;
  return proto.OffnetworkAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OffnetworkAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OffnetworkAddress}
 */
proto.OffnetworkAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OffnetworkAddressType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OffnetworkAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OffnetworkAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OffnetworkAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OffnetworkAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.OffnetworkAddressType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional OffnetworkAddressType type = 1;
 * @return {!proto.OffnetworkAddressType}
 */
proto.OffnetworkAddress.prototype.getType = function() {
  return /** @type {!proto.OffnetworkAddressType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OffnetworkAddressType} value */
proto.OffnetworkAddress.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.OffnetworkAddress.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OffnetworkAddress.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.OffnetworkAddress.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.OffnetworkAddress.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.OffnetworkAddress.prototype.clearEmail = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OffnetworkAddress.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityResult.repeatedFields_, null);
};
goog.inherits(proto.EntityResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityResult.displayName = 'proto.EntityResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityResult.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    lookupSpec: (f = msg.getLookupSpec()) && proto.EntityLookupSpec.toObject(includeInstance, f),
    entityList: jspb.Message.toObjectList(msg.getEntityList(),
    proto.Entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityResult}
 */
proto.EntityResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityResult;
  return proto.EntityResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityResult}
 */
proto.EntityResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EntityLookupSpec;
      reader.readMessage(value,proto.EntityLookupSpec.deserializeBinaryFromReader);
      msg.setLookupSpec(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.addEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EntityResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EntityResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLookupSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EntityLookupSpec.serializeBinaryToWriter
    );
  }
  f = message.getEntityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional EntityLookupSpec lookup_spec = 1;
 * @return {?proto.EntityLookupSpec}
 */
proto.EntityResult.prototype.getLookupSpec = function() {
  return /** @type{?proto.EntityLookupSpec} */ (
    jspb.Message.getWrapperField(this, proto.EntityLookupSpec, 1));
};


/** @param {?proto.EntityLookupSpec|undefined} value */
proto.EntityResult.prototype.setLookupSpec = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EntityResult.prototype.clearLookupSpec = function() {
  this.setLookupSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EntityResult.prototype.hasLookupSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Entity entity = 2;
 * @return {!Array.<!proto.Entity>}
 */
proto.EntityResult.prototype.getEntityList = function() {
  return /** @type{!Array.<!proto.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Entity, 2));
};


/** @param {!Array.<!proto.Entity>} value */
proto.EntityResult.prototype.setEntityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Entity}
 */
proto.EntityResult.prototype.addEntity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Entity, opt_index);
};


proto.EntityResult.prototype.clearEntityList = function() {
  this.setEntityList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AddUserRequest.repeatedFields_, null);
};
goog.inherits(proto.AddUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddUserRequest.displayName = 'proto.AddUserRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddUserRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    inviteeIdList: jspb.Message.toObjectList(msg.getInviteeIdList(),
    proto.InviteeID.toObject, includeInstance),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddUserRequest}
 */
proto.AddUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddUserRequest;
  return proto.AddUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddUserRequest}
 */
proto.AddUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = new proto.InviteeID;
      reader.readMessage(value,proto.InviteeID.deserializeBinaryFromReader);
      msg.addInviteeId(value);
      break;
    case 5:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getInviteeIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.InviteeID.serializeBinaryToWriter
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.AddUserRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.AddUserRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AddUserRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddUserRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated InviteeID invitee_id = 3;
 * @return {!Array.<!proto.InviteeID>}
 */
proto.AddUserRequest.prototype.getInviteeIdList = function() {
  return /** @type{!Array.<!proto.InviteeID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InviteeID, 3));
};


/** @param {!Array.<!proto.InviteeID>} value */
proto.AddUserRequest.prototype.setInviteeIdList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.InviteeID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InviteeID}
 */
proto.AddUserRequest.prototype.addInviteeId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.InviteeID, opt_index);
};


proto.AddUserRequest.prototype.clearInviteeIdList = function() {
  this.setInviteeIdList([]);
};


/**
 * optional EventRequestHeader event_request_header = 5;
 * @return {?proto.EventRequestHeader}
 */
proto.AddUserRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 5));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.AddUserRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.AddUserRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddUserRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddUserResponse.displayName = 'proto.AddUserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AddUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddUserResponse}
 */
proto.AddUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddUserResponse;
  return proto.AddUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddUserResponse}
 */
proto.AddUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 5:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.AddUserResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.AddUserResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AddUserResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddUserResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 5;
 * @return {?proto.Event}
 */
proto.AddUserResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 5));
};


/** @param {?proto.Event|undefined} value */
proto.AddUserResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.AddUserResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddUserResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateConversationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateConversationRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateConversationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateConversationRequest.displayName = 'proto.CreateConversationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateConversationRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateConversationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateConversationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateConversationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConversationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 2),
    clientGeneratedId: jspb.Message.getField(msg, 3),
    name: jspb.Message.getField(msg, 4),
    inviteeIdList: jspb.Message.toObjectList(msg.getInviteeIdList(),
    proto.InviteeID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateConversationRequest}
 */
proto.CreateConversationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateConversationRequest;
  return proto.CreateConversationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateConversationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateConversationRequest}
 */
proto.CreateConversationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.ConversationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientGeneratedId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.InviteeID;
      reader.readMessage(value,proto.InviteeID.deserializeBinaryFromReader);
      msg.addInviteeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateConversationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateConversationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateConversationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConversationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.ConversationType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInviteeIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.InviteeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.CreateConversationRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.CreateConversationRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateConversationRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationType type = 2;
 * @return {!proto.ConversationType}
 */
proto.CreateConversationRequest.prototype.getType = function() {
  return /** @type {!proto.ConversationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ConversationType} value */
proto.CreateConversationRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CreateConversationRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 client_generated_id = 3;
 * @return {number}
 */
proto.CreateConversationRequest.prototype.getClientGeneratedId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CreateConversationRequest.prototype.setClientGeneratedId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.CreateConversationRequest.prototype.clearClientGeneratedId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationRequest.prototype.hasClientGeneratedId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.CreateConversationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CreateConversationRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.CreateConversationRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InviteeID invitee_id = 5;
 * @return {!Array.<!proto.InviteeID>}
 */
proto.CreateConversationRequest.prototype.getInviteeIdList = function() {
  return /** @type{!Array.<!proto.InviteeID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InviteeID, 5));
};


/** @param {!Array.<!proto.InviteeID>} value */
proto.CreateConversationRequest.prototype.setInviteeIdList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.InviteeID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InviteeID}
 */
proto.CreateConversationRequest.prototype.addInviteeId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.InviteeID, opt_index);
};


proto.CreateConversationRequest.prototype.clearInviteeIdList = function() {
  this.setInviteeIdList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateConversationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateConversationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateConversationResponse.displayName = 'proto.CreateConversationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateConversationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateConversationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateConversationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConversationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    conversation: (f = msg.getConversation()) && proto.Conversation.toObject(includeInstance, f),
    newConversationCreated: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateConversationResponse}
 */
proto.CreateConversationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateConversationResponse;
  return proto.CreateConversationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateConversationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateConversationResponse}
 */
proto.CreateConversationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Conversation;
      reader.readMessage(value,proto.Conversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewConversationCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateConversationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateConversationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateConversationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConversationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Conversation.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.CreateConversationResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.CreateConversationResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateConversationResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Conversation conversation = 2;
 * @return {?proto.Conversation}
 */
proto.CreateConversationResponse.prototype.getConversation = function() {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 2));
};


/** @param {?proto.Conversation|undefined} value */
proto.CreateConversationResponse.prototype.setConversation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CreateConversationResponse.prototype.clearConversation = function() {
  this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationResponse.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool new_conversation_created = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CreateConversationResponse.prototype.getNewConversationCreated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.CreateConversationResponse.prototype.setNewConversationCreated = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.CreateConversationResponse.prototype.clearNewConversationCreated = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateConversationResponse.prototype.hasNewConversationCreated = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteConversationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteConversationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteConversationRequest.displayName = 'proto.DeleteConversationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteConversationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteConversationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteConversationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConversationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    deleteUpperBoundTimestamp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteConversationRequest}
 */
proto.DeleteConversationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteConversationRequest;
  return proto.DeleteConversationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteConversationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteConversationRequest}
 */
proto.DeleteConversationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeleteUpperBoundTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteConversationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteConversationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteConversationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConversationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.DeleteConversationRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.DeleteConversationRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DeleteConversationRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteConversationRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.DeleteConversationRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.DeleteConversationRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DeleteConversationRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteConversationRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 delete_upper_bound_timestamp = 3;
 * @return {number}
 */
proto.DeleteConversationRequest.prototype.getDeleteUpperBoundTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DeleteConversationRequest.prototype.setDeleteUpperBoundTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DeleteConversationRequest.prototype.clearDeleteUpperBoundTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteConversationRequest.prototype.hasDeleteUpperBoundTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteConversationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteConversationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteConversationResponse.displayName = 'proto.DeleteConversationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteConversationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteConversationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteConversationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConversationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    deleteAction: (f = msg.getDeleteAction()) && proto.DeleteAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteConversationResponse}
 */
proto.DeleteConversationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteConversationResponse;
  return proto.DeleteConversationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteConversationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteConversationResponse}
 */
proto.DeleteConversationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.DeleteAction;
      reader.readMessage(value,proto.DeleteAction.deserializeBinaryFromReader);
      msg.setDeleteAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteConversationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteConversationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteConversationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConversationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getDeleteAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DeleteAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.DeleteConversationResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.DeleteConversationResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DeleteConversationResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteConversationResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteAction delete_action = 2;
 * @return {?proto.DeleteAction}
 */
proto.DeleteConversationResponse.prototype.getDeleteAction = function() {
  return /** @type{?proto.DeleteAction} */ (
    jspb.Message.getWrapperField(this, proto.DeleteAction, 2));
};


/** @param {?proto.DeleteAction|undefined} value */
proto.DeleteConversationResponse.prototype.setDeleteAction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DeleteConversationResponse.prototype.clearDeleteAction = function() {
  this.setDeleteAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeleteConversationResponse.prototype.hasDeleteAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EasterEggRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EasterEggRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EasterEggRequest.displayName = 'proto.EasterEggRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EasterEggRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.EasterEggRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EasterEggRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    easterEgg: (f = msg.getEasterEgg()) && proto.EasterEgg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EasterEggRequest}
 */
proto.EasterEggRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EasterEggRequest;
  return proto.EasterEggRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EasterEggRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EasterEggRequest}
 */
proto.EasterEggRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = new proto.EasterEgg;
      reader.readMessage(value,proto.EasterEgg.deserializeBinaryFromReader);
      msg.setEasterEgg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EasterEggRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EasterEggRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EasterEggRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = message.getEasterEgg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EasterEgg.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.EasterEggRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.EasterEggRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EasterEggRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.EasterEggRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.EasterEggRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.EasterEggRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EasterEgg easter_egg = 3;
 * @return {?proto.EasterEgg}
 */
proto.EasterEggRequest.prototype.getEasterEgg = function() {
  return /** @type{?proto.EasterEgg} */ (
    jspb.Message.getWrapperField(this, proto.EasterEgg, 3));
};


/** @param {?proto.EasterEgg|undefined} value */
proto.EasterEggRequest.prototype.setEasterEgg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.EasterEggRequest.prototype.clearEasterEgg = function() {
  this.setEasterEgg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggRequest.prototype.hasEasterEgg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EasterEggResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EasterEggResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EasterEggResponse.displayName = 'proto.EasterEggResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EasterEggResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.EasterEggResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EasterEggResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EasterEggResponse}
 */
proto.EasterEggResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EasterEggResponse;
  return proto.EasterEggResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EasterEggResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EasterEggResponse}
 */
proto.EasterEggResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EasterEggResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EasterEggResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EasterEggResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EasterEggResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.EasterEggResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.EasterEggResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EasterEggResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.EasterEggResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.EasterEggResponse.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EasterEggResponse.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EasterEggResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConversationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConversationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetConversationRequest.displayName = 'proto.GetConversationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConversationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConversationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConversationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConversationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationSpec: (f = msg.getConversationSpec()) && proto.ConversationSpec.toObject(includeInstance, f),
    includeConversationMetadata: jspb.Message.getField(msg, 3),
    includeEvent: jspb.Message.getField(msg, 4),
    maxEventsPerConversation: jspb.Message.getField(msg, 6),
    eventContinuationToken: (f = msg.getEventContinuationToken()) && proto.EventContinuationToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConversationRequest}
 */
proto.GetConversationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConversationRequest;
  return proto.GetConversationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConversationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConversationRequest}
 */
proto.GetConversationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationSpec;
      reader.readMessage(value,proto.ConversationSpec.deserializeBinaryFromReader);
      msg.setConversationSpec(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeConversationMetadata(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeEvent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxEventsPerConversation(value);
      break;
    case 7:
      var value = new proto.EventContinuationToken;
      reader.readMessage(value,proto.EventContinuationToken.deserializeBinaryFromReader);
      msg.setEventContinuationToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConversationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConversationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConversationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConversationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationSpec.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getEventContinuationToken();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.EventContinuationToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.GetConversationRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.GetConversationRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetConversationRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationSpec conversation_spec = 2;
 * @return {?proto.ConversationSpec}
 */
proto.GetConversationRequest.prototype.getConversationSpec = function() {
  return /** @type{?proto.ConversationSpec} */ (
    jspb.Message.getWrapperField(this, proto.ConversationSpec, 2));
};


/** @param {?proto.ConversationSpec|undefined} value */
proto.GetConversationRequest.prototype.setConversationSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetConversationRequest.prototype.clearConversationSpec = function() {
  this.setConversationSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasConversationSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool include_conversation_metadata = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetConversationRequest.prototype.getIncludeConversationMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.GetConversationRequest.prototype.setIncludeConversationMetadata = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetConversationRequest.prototype.clearIncludeConversationMetadata = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasIncludeConversationMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool include_event = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetConversationRequest.prototype.getIncludeEvent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.GetConversationRequest.prototype.setIncludeEvent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GetConversationRequest.prototype.clearIncludeEvent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasIncludeEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 max_events_per_conversation = 6;
 * @return {number}
 */
proto.GetConversationRequest.prototype.getMaxEventsPerConversation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GetConversationRequest.prototype.setMaxEventsPerConversation = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.GetConversationRequest.prototype.clearMaxEventsPerConversation = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasMaxEventsPerConversation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventContinuationToken event_continuation_token = 7;
 * @return {?proto.EventContinuationToken}
 */
proto.GetConversationRequest.prototype.getEventContinuationToken = function() {
  return /** @type{?proto.EventContinuationToken} */ (
    jspb.Message.getWrapperField(this, proto.EventContinuationToken, 7));
};


/** @param {?proto.EventContinuationToken|undefined} value */
proto.GetConversationRequest.prototype.setEventContinuationToken = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.GetConversationRequest.prototype.clearEventContinuationToken = function() {
  this.setEventContinuationToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationRequest.prototype.hasEventContinuationToken = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConversationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConversationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetConversationResponse.displayName = 'proto.GetConversationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConversationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConversationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConversationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConversationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    conversationState: (f = msg.getConversationState()) && proto.ConversationState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConversationResponse}
 */
proto.GetConversationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConversationResponse;
  return proto.GetConversationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConversationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConversationResponse}
 */
proto.GetConversationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.ConversationState;
      reader.readMessage(value,proto.ConversationState.deserializeBinaryFromReader);
      msg.setConversationState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConversationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConversationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConversationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConversationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.GetConversationResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.GetConversationResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetConversationResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationState conversation_state = 2;
 * @return {?proto.ConversationState}
 */
proto.GetConversationResponse.prototype.getConversationState = function() {
  return /** @type{?proto.ConversationState} */ (
    jspb.Message.getWrapperField(this, proto.ConversationState, 2));
};


/** @param {?proto.ConversationState|undefined} value */
proto.GetConversationResponse.prototype.setConversationState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetConversationResponse.prototype.clearConversationState = function() {
  this.setConversationState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetConversationResponse.prototype.hasConversationState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetEntityByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetEntityByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.GetEntityByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetEntityByIdRequest.displayName = 'proto.GetEntityByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetEntityByIdRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetEntityByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetEntityByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetEntityByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetEntityByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    batchLookupSpecList: jspb.Message.toObjectList(msg.getBatchLookupSpecList(),
    proto.EntityLookupSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetEntityByIdRequest}
 */
proto.GetEntityByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetEntityByIdRequest;
  return proto.GetEntityByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetEntityByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetEntityByIdRequest}
 */
proto.GetEntityByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = new proto.EntityLookupSpec;
      reader.readMessage(value,proto.EntityLookupSpec.deserializeBinaryFromReader);
      msg.addBatchLookupSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetEntityByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetEntityByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetEntityByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetEntityByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getBatchLookupSpecList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.EntityLookupSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.GetEntityByIdRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.GetEntityByIdRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetEntityByIdRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetEntityByIdRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EntityLookupSpec batch_lookup_spec = 3;
 * @return {!Array.<!proto.EntityLookupSpec>}
 */
proto.GetEntityByIdRequest.prototype.getBatchLookupSpecList = function() {
  return /** @type{!Array.<!proto.EntityLookupSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EntityLookupSpec, 3));
};


/** @param {!Array.<!proto.EntityLookupSpec>} value */
proto.GetEntityByIdRequest.prototype.setBatchLookupSpecList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EntityLookupSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EntityLookupSpec}
 */
proto.GetEntityByIdRequest.prototype.addBatchLookupSpec = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EntityLookupSpec, opt_index);
};


proto.GetEntityByIdRequest.prototype.clearBatchLookupSpecList = function() {
  this.setBatchLookupSpecList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetEntityByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetEntityByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.GetEntityByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetEntityByIdResponse.displayName = 'proto.GetEntityByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetEntityByIdResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetEntityByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetEntityByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetEntityByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetEntityByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    entityList: jspb.Message.toObjectList(msg.getEntityList(),
    proto.Entity.toObject, includeInstance),
    entityResultList: jspb.Message.toObjectList(msg.getEntityResultList(),
    proto.EntityResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetEntityByIdResponse}
 */
proto.GetEntityByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetEntityByIdResponse;
  return proto.GetEntityByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetEntityByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetEntityByIdResponse}
 */
proto.GetEntityByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.addEntity(value);
      break;
    case 3:
      var value = new proto.EntityResult;
      reader.readMessage(value,proto.EntityResult.deserializeBinaryFromReader);
      msg.addEntityResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetEntityByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetEntityByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetEntityByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetEntityByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getEntityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getEntityResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.EntityResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.GetEntityByIdResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.GetEntityByIdResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetEntityByIdResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetEntityByIdResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Entity entity = 2;
 * @return {!Array.<!proto.Entity>}
 */
proto.GetEntityByIdResponse.prototype.getEntityList = function() {
  return /** @type{!Array.<!proto.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Entity, 2));
};


/** @param {!Array.<!proto.Entity>} value */
proto.GetEntityByIdResponse.prototype.setEntityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Entity}
 */
proto.GetEntityByIdResponse.prototype.addEntity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Entity, opt_index);
};


proto.GetEntityByIdResponse.prototype.clearEntityList = function() {
  this.setEntityList([]);
};


/**
 * repeated EntityResult entity_result = 3;
 * @return {!Array.<!proto.EntityResult>}
 */
proto.GetEntityByIdResponse.prototype.getEntityResultList = function() {
  return /** @type{!Array.<!proto.EntityResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EntityResult, 3));
};


/** @param {!Array.<!proto.EntityResult>} value */
proto.GetEntityByIdResponse.prototype.setEntityResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EntityResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EntityResult}
 */
proto.GetEntityByIdResponse.prototype.addEntityResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EntityResult, opt_index);
};


proto.GetEntityByIdResponse.prototype.clearEntityResultList = function() {
  this.setEntityResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGroupConversationUrlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetGroupConversationUrlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGroupConversationUrlRequest.displayName = 'proto.GetGroupConversationUrlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGroupConversationUrlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGroupConversationUrlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGroupConversationUrlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGroupConversationUrlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGroupConversationUrlRequest}
 */
proto.GetGroupConversationUrlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGroupConversationUrlRequest;
  return proto.GetGroupConversationUrlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGroupConversationUrlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGroupConversationUrlRequest}
 */
proto.GetGroupConversationUrlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGroupConversationUrlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGroupConversationUrlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGroupConversationUrlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGroupConversationUrlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.GetGroupConversationUrlRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.GetGroupConversationUrlRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetGroupConversationUrlRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGroupConversationUrlRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.GetGroupConversationUrlRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.GetGroupConversationUrlRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetGroupConversationUrlRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGroupConversationUrlRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGroupConversationUrlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetGroupConversationUrlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGroupConversationUrlResponse.displayName = 'proto.GetGroupConversationUrlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGroupConversationUrlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGroupConversationUrlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGroupConversationUrlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGroupConversationUrlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    groupConversationUrl: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGroupConversationUrlResponse}
 */
proto.GetGroupConversationUrlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGroupConversationUrlResponse;
  return proto.GetGroupConversationUrlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGroupConversationUrlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGroupConversationUrlResponse}
 */
proto.GetGroupConversationUrlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupConversationUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGroupConversationUrlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGroupConversationUrlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGroupConversationUrlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGroupConversationUrlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.GetGroupConversationUrlResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.GetGroupConversationUrlResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetGroupConversationUrlResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGroupConversationUrlResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string group_conversation_url = 2;
 * @return {string}
 */
proto.GetGroupConversationUrlResponse.prototype.getGroupConversationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GetGroupConversationUrlResponse.prototype.setGroupConversationUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GetGroupConversationUrlResponse.prototype.clearGroupConversationUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGroupConversationUrlResponse.prototype.hasGroupConversationUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSuggestedEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetSuggestedEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetSuggestedEntitiesRequest.displayName = 'proto.GetSuggestedEntitiesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSuggestedEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSuggestedEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSuggestedEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSuggestedEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    maxCount: jspb.Message.getField(msg, 4),
    favorites: (f = msg.getFavorites()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f),
    contactsYouHangoutWith: (f = msg.getContactsYouHangoutWith()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f),
    otherContactsOnHangouts: (f = msg.getOtherContactsOnHangouts()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f),
    otherContacts: (f = msg.getOtherContacts()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f),
    dismissedContacts: (f = msg.getDismissedContacts()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f),
    pinnedFavorites: (f = msg.getPinnedFavorites()) && proto.SuggestedContactGroupHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSuggestedEntitiesRequest}
 */
proto.GetSuggestedEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSuggestedEntitiesRequest;
  return proto.GetSuggestedEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSuggestedEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSuggestedEntitiesRequest}
 */
proto.GetSuggestedEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxCount(value);
      break;
    case 8:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setFavorites(value);
      break;
    case 9:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setContactsYouHangoutWith(value);
      break;
    case 10:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setOtherContactsOnHangouts(value);
      break;
    case 11:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setOtherContacts(value);
      break;
    case 12:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setDismissedContacts(value);
      break;
    case 13:
      var value = new proto.SuggestedContactGroupHash;
      reader.readMessage(value,proto.SuggestedContactGroupHash.deserializeBinaryFromReader);
      msg.setPinnedFavorites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSuggestedEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSuggestedEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSuggestedEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSuggestedEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFavorites();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
  f = message.getContactsYouHangoutWith();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
  f = message.getOtherContactsOnHangouts();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
  f = message.getOtherContacts();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
  f = message.getDismissedContacts();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
  f = message.getPinnedFavorites();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.SuggestedContactGroupHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.GetSuggestedEntitiesRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 max_count = 4;
 * @return {number}
 */
proto.GetSuggestedEntitiesRequest.prototype.getMaxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GetSuggestedEntitiesRequest.prototype.setMaxCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearMaxCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasMaxCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SuggestedContactGroupHash favorites = 8;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getFavorites = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 8));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setFavorites = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearFavorites = function() {
  this.setFavorites(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasFavorites = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SuggestedContactGroupHash contacts_you_hangout_with = 9;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getContactsYouHangoutWith = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 9));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setContactsYouHangoutWith = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearContactsYouHangoutWith = function() {
  this.setContactsYouHangoutWith(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasContactsYouHangoutWith = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SuggestedContactGroupHash other_contacts_on_hangouts = 10;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getOtherContactsOnHangouts = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 10));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setOtherContactsOnHangouts = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearOtherContactsOnHangouts = function() {
  this.setOtherContactsOnHangouts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasOtherContactsOnHangouts = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SuggestedContactGroupHash other_contacts = 11;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getOtherContacts = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 11));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setOtherContacts = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearOtherContacts = function() {
  this.setOtherContacts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasOtherContacts = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SuggestedContactGroupHash dismissed_contacts = 12;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getDismissedContacts = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 12));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setDismissedContacts = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearDismissedContacts = function() {
  this.setDismissedContacts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasDismissedContacts = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SuggestedContactGroupHash pinned_favorites = 13;
 * @return {?proto.SuggestedContactGroupHash}
 */
proto.GetSuggestedEntitiesRequest.prototype.getPinnedFavorites = function() {
  return /** @type{?proto.SuggestedContactGroupHash} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroupHash, 13));
};


/** @param {?proto.SuggestedContactGroupHash|undefined} value */
proto.GetSuggestedEntitiesRequest.prototype.setPinnedFavorites = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.GetSuggestedEntitiesRequest.prototype.clearPinnedFavorites = function() {
  this.setPinnedFavorites(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesRequest.prototype.hasPinnedFavorites = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSuggestedEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetSuggestedEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.GetSuggestedEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetSuggestedEntitiesResponse.displayName = 'proto.GetSuggestedEntitiesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetSuggestedEntitiesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSuggestedEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSuggestedEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSuggestedEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSuggestedEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    entityList: jspb.Message.toObjectList(msg.getEntityList(),
    proto.Entity.toObject, includeInstance),
    favorites: (f = msg.getFavorites()) && proto.SuggestedContactGroup.toObject(includeInstance, f),
    contactsYouHangoutWith: (f = msg.getContactsYouHangoutWith()) && proto.SuggestedContactGroup.toObject(includeInstance, f),
    otherContactsOnHangouts: (f = msg.getOtherContactsOnHangouts()) && proto.SuggestedContactGroup.toObject(includeInstance, f),
    otherContacts: (f = msg.getOtherContacts()) && proto.SuggestedContactGroup.toObject(includeInstance, f),
    dismissedContacts: (f = msg.getDismissedContacts()) && proto.SuggestedContactGroup.toObject(includeInstance, f),
    pinnedFavorites: (f = msg.getPinnedFavorites()) && proto.SuggestedContactGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSuggestedEntitiesResponse}
 */
proto.GetSuggestedEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSuggestedEntitiesResponse;
  return proto.GetSuggestedEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSuggestedEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSuggestedEntitiesResponse}
 */
proto.GetSuggestedEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.addEntity(value);
      break;
    case 4:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setFavorites(value);
      break;
    case 5:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setContactsYouHangoutWith(value);
      break;
    case 6:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setOtherContactsOnHangouts(value);
      break;
    case 7:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setOtherContacts(value);
      break;
    case 8:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setDismissedContacts(value);
      break;
    case 9:
      var value = new proto.SuggestedContactGroup;
      reader.readMessage(value,proto.SuggestedContactGroup.deserializeBinaryFromReader);
      msg.setPinnedFavorites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSuggestedEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSuggestedEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSuggestedEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSuggestedEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getEntityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = message.getFavorites();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
  f = message.getContactsYouHangoutWith();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
  f = message.getOtherContactsOnHangouts();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
  f = message.getOtherContacts();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
  f = message.getDismissedContacts();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
  f = message.getPinnedFavorites();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SuggestedContactGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.GetSuggestedEntitiesResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Entity entity = 2;
 * @return {!Array.<!proto.Entity>}
 */
proto.GetSuggestedEntitiesResponse.prototype.getEntityList = function() {
  return /** @type{!Array.<!proto.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Entity, 2));
};


/** @param {!Array.<!proto.Entity>} value */
proto.GetSuggestedEntitiesResponse.prototype.setEntityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Entity}
 */
proto.GetSuggestedEntitiesResponse.prototype.addEntity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Entity, opt_index);
};


proto.GetSuggestedEntitiesResponse.prototype.clearEntityList = function() {
  this.setEntityList([]);
};


/**
 * optional SuggestedContactGroup favorites = 4;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getFavorites = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 4));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setFavorites = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearFavorites = function() {
  this.setFavorites(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasFavorites = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SuggestedContactGroup contacts_you_hangout_with = 5;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getContactsYouHangoutWith = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 5));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setContactsYouHangoutWith = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearContactsYouHangoutWith = function() {
  this.setContactsYouHangoutWith(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasContactsYouHangoutWith = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SuggestedContactGroup other_contacts_on_hangouts = 6;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getOtherContactsOnHangouts = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 6));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setOtherContactsOnHangouts = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearOtherContactsOnHangouts = function() {
  this.setOtherContactsOnHangouts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasOtherContactsOnHangouts = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SuggestedContactGroup other_contacts = 7;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getOtherContacts = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 7));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setOtherContacts = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearOtherContacts = function() {
  this.setOtherContacts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasOtherContacts = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SuggestedContactGroup dismissed_contacts = 8;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getDismissedContacts = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 8));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setDismissedContacts = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearDismissedContacts = function() {
  this.setDismissedContacts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasDismissedContacts = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SuggestedContactGroup pinned_favorites = 9;
 * @return {?proto.SuggestedContactGroup}
 */
proto.GetSuggestedEntitiesResponse.prototype.getPinnedFavorites = function() {
  return /** @type{?proto.SuggestedContactGroup} */ (
    jspb.Message.getWrapperField(this, proto.SuggestedContactGroup, 9));
};


/** @param {?proto.SuggestedContactGroup|undefined} value */
proto.GetSuggestedEntitiesResponse.prototype.setPinnedFavorites = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GetSuggestedEntitiesResponse.prototype.clearPinnedFavorites = function() {
  this.setPinnedFavorites(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSuggestedEntitiesResponse.prototype.hasPinnedFavorites = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSelfInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetSelfInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetSelfInfoRequest.displayName = 'proto.GetSelfInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSelfInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSelfInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSelfInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSelfInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSelfInfoRequest}
 */
proto.GetSelfInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSelfInfoRequest;
  return proto.GetSelfInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSelfInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSelfInfoRequest}
 */
proto.GetSelfInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSelfInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSelfInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSelfInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSelfInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.GetSelfInfoRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.GetSelfInfoRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetSelfInfoRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSelfInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetSelfInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.GetSelfInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetSelfInfoResponse.displayName = 'proto.GetSelfInfoResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetSelfInfoResponse.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSelfInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSelfInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSelfInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSelfInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    selfEntity: (f = msg.getSelfEntity()) && proto.Entity.toObject(includeInstance, f),
    isKnownMinor: jspb.Message.getField(msg, 3),
    dndState: (f = msg.getDndState()) && proto.DoNotDisturbSetting.toObject(includeInstance, f),
    desktopOffSetting: (f = msg.getDesktopOffSetting()) && proto.DesktopOffSetting.toObject(includeInstance, f),
    phoneData: (f = msg.getPhoneData()) && proto.PhoneData.toObject(includeInstance, f),
    configurationBitList: jspb.Message.toObjectList(msg.getConfigurationBitList(),
    proto.ConfigurationBit.toObject, includeInstance),
    desktopOffState: (f = msg.getDesktopOffState()) && proto.DesktopOffState.toObject(includeInstance, f),
    googlePlusUser: jspb.Message.getField(msg, 10),
    desktopSoundSetting: (f = msg.getDesktopSoundSetting()) && proto.DesktopSoundSetting.toObject(includeInstance, f),
    richPresenceState: (f = msg.getRichPresenceState()) && proto.RichPresenceState.toObject(includeInstance, f),
    defaultCountry: (f = msg.getDefaultCountry()) && proto.Country.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSelfInfoResponse}
 */
proto.GetSelfInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSelfInfoResponse;
  return proto.GetSelfInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSelfInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSelfInfoResponse}
 */
proto.GetSelfInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.setSelfEntity(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsKnownMinor(value);
      break;
    case 5:
      var value = new proto.DoNotDisturbSetting;
      reader.readMessage(value,proto.DoNotDisturbSetting.deserializeBinaryFromReader);
      msg.setDndState(value);
      break;
    case 6:
      var value = new proto.DesktopOffSetting;
      reader.readMessage(value,proto.DesktopOffSetting.deserializeBinaryFromReader);
      msg.setDesktopOffSetting(value);
      break;
    case 7:
      var value = new proto.PhoneData;
      reader.readMessage(value,proto.PhoneData.deserializeBinaryFromReader);
      msg.setPhoneData(value);
      break;
    case 8:
      var value = new proto.ConfigurationBit;
      reader.readMessage(value,proto.ConfigurationBit.deserializeBinaryFromReader);
      msg.addConfigurationBit(value);
      break;
    case 9:
      var value = new proto.DesktopOffState;
      reader.readMessage(value,proto.DesktopOffState.deserializeBinaryFromReader);
      msg.setDesktopOffState(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGooglePlusUser(value);
      break;
    case 11:
      var value = new proto.DesktopSoundSetting;
      reader.readMessage(value,proto.DesktopSoundSetting.deserializeBinaryFromReader);
      msg.setDesktopSoundSetting(value);
      break;
    case 12:
      var value = new proto.RichPresenceState;
      reader.readMessage(value,proto.RichPresenceState.deserializeBinaryFromReader);
      msg.setRichPresenceState(value);
      break;
    case 19:
      var value = new proto.Country;
      reader.readMessage(value,proto.Country.deserializeBinaryFromReader);
      msg.setDefaultCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSelfInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSelfInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSelfInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSelfInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getSelfEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDndState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DoNotDisturbSetting.serializeBinaryToWriter
    );
  }
  f = message.getDesktopOffSetting();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.DesktopOffSetting.serializeBinaryToWriter
    );
  }
  f = message.getPhoneData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PhoneData.serializeBinaryToWriter
    );
  }
  f = message.getConfigurationBitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ConfigurationBit.serializeBinaryToWriter
    );
  }
  f = message.getDesktopOffState();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.DesktopOffState.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDesktopSoundSetting();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.DesktopSoundSetting.serializeBinaryToWriter
    );
  }
  f = message.getRichPresenceState();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.RichPresenceState.serializeBinaryToWriter
    );
  }
  f = message.getDefaultCountry();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Country.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.GetSelfInfoResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.GetSelfInfoResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetSelfInfoResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Entity self_entity = 2;
 * @return {?proto.Entity}
 */
proto.GetSelfInfoResponse.prototype.getSelfEntity = function() {
  return /** @type{?proto.Entity} */ (
    jspb.Message.getWrapperField(this, proto.Entity, 2));
};


/** @param {?proto.Entity|undefined} value */
proto.GetSelfInfoResponse.prototype.setSelfEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetSelfInfoResponse.prototype.clearSelfEntity = function() {
  this.setSelfEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasSelfEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_known_minor = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetSelfInfoResponse.prototype.getIsKnownMinor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.GetSelfInfoResponse.prototype.setIsKnownMinor = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetSelfInfoResponse.prototype.clearIsKnownMinor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasIsKnownMinor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DoNotDisturbSetting dnd_state = 5;
 * @return {?proto.DoNotDisturbSetting}
 */
proto.GetSelfInfoResponse.prototype.getDndState = function() {
  return /** @type{?proto.DoNotDisturbSetting} */ (
    jspb.Message.getWrapperField(this, proto.DoNotDisturbSetting, 5));
};


/** @param {?proto.DoNotDisturbSetting|undefined} value */
proto.GetSelfInfoResponse.prototype.setDndState = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GetSelfInfoResponse.prototype.clearDndState = function() {
  this.setDndState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasDndState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DesktopOffSetting desktop_off_setting = 6;
 * @return {?proto.DesktopOffSetting}
 */
proto.GetSelfInfoResponse.prototype.getDesktopOffSetting = function() {
  return /** @type{?proto.DesktopOffSetting} */ (
    jspb.Message.getWrapperField(this, proto.DesktopOffSetting, 6));
};


/** @param {?proto.DesktopOffSetting|undefined} value */
proto.GetSelfInfoResponse.prototype.setDesktopOffSetting = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.GetSelfInfoResponse.prototype.clearDesktopOffSetting = function() {
  this.setDesktopOffSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasDesktopOffSetting = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PhoneData phone_data = 7;
 * @return {?proto.PhoneData}
 */
proto.GetSelfInfoResponse.prototype.getPhoneData = function() {
  return /** @type{?proto.PhoneData} */ (
    jspb.Message.getWrapperField(this, proto.PhoneData, 7));
};


/** @param {?proto.PhoneData|undefined} value */
proto.GetSelfInfoResponse.prototype.setPhoneData = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.GetSelfInfoResponse.prototype.clearPhoneData = function() {
  this.setPhoneData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasPhoneData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated ConfigurationBit configuration_bit = 8;
 * @return {!Array.<!proto.ConfigurationBit>}
 */
proto.GetSelfInfoResponse.prototype.getConfigurationBitList = function() {
  return /** @type{!Array.<!proto.ConfigurationBit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigurationBit, 8));
};


/** @param {!Array.<!proto.ConfigurationBit>} value */
proto.GetSelfInfoResponse.prototype.setConfigurationBitList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ConfigurationBit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigurationBit}
 */
proto.GetSelfInfoResponse.prototype.addConfigurationBit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ConfigurationBit, opt_index);
};


proto.GetSelfInfoResponse.prototype.clearConfigurationBitList = function() {
  this.setConfigurationBitList([]);
};


/**
 * optional DesktopOffState desktop_off_state = 9;
 * @return {?proto.DesktopOffState}
 */
proto.GetSelfInfoResponse.prototype.getDesktopOffState = function() {
  return /** @type{?proto.DesktopOffState} */ (
    jspb.Message.getWrapperField(this, proto.DesktopOffState, 9));
};


/** @param {?proto.DesktopOffState|undefined} value */
proto.GetSelfInfoResponse.prototype.setDesktopOffState = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GetSelfInfoResponse.prototype.clearDesktopOffState = function() {
  this.setDesktopOffState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasDesktopOffState = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool google_plus_user = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetSelfInfoResponse.prototype.getGooglePlusUser = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.GetSelfInfoResponse.prototype.setGooglePlusUser = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.GetSelfInfoResponse.prototype.clearGooglePlusUser = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasGooglePlusUser = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DesktopSoundSetting desktop_sound_setting = 11;
 * @return {?proto.DesktopSoundSetting}
 */
proto.GetSelfInfoResponse.prototype.getDesktopSoundSetting = function() {
  return /** @type{?proto.DesktopSoundSetting} */ (
    jspb.Message.getWrapperField(this, proto.DesktopSoundSetting, 11));
};


/** @param {?proto.DesktopSoundSetting|undefined} value */
proto.GetSelfInfoResponse.prototype.setDesktopSoundSetting = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.GetSelfInfoResponse.prototype.clearDesktopSoundSetting = function() {
  this.setDesktopSoundSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasDesktopSoundSetting = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RichPresenceState rich_presence_state = 12;
 * @return {?proto.RichPresenceState}
 */
proto.GetSelfInfoResponse.prototype.getRichPresenceState = function() {
  return /** @type{?proto.RichPresenceState} */ (
    jspb.Message.getWrapperField(this, proto.RichPresenceState, 12));
};


/** @param {?proto.RichPresenceState|undefined} value */
proto.GetSelfInfoResponse.prototype.setRichPresenceState = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.GetSelfInfoResponse.prototype.clearRichPresenceState = function() {
  this.setRichPresenceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasRichPresenceState = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Country default_country = 19;
 * @return {?proto.Country}
 */
proto.GetSelfInfoResponse.prototype.getDefaultCountry = function() {
  return /** @type{?proto.Country} */ (
    jspb.Message.getWrapperField(this, proto.Country, 19));
};


/** @param {?proto.Country|undefined} value */
proto.GetSelfInfoResponse.prototype.setDefaultCountry = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.GetSelfInfoResponse.prototype.clearDefaultCountry = function() {
  this.setDefaultCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSelfInfoResponse.prototype.hasDefaultCountry = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryPresenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.QueryPresenceRequest.repeatedFields_, null);
};
goog.inherits(proto.QueryPresenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryPresenceRequest.displayName = 'proto.QueryPresenceRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.QueryPresenceRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryPresenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryPresenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryPresenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryPresenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    participantIdList: jspb.Message.toObjectList(msg.getParticipantIdList(),
    proto.ParticipantId.toObject, includeInstance),
    fieldMaskList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryPresenceRequest}
 */
proto.QueryPresenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryPresenceRequest;
  return proto.QueryPresenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryPresenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryPresenceRequest}
 */
proto.QueryPresenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.addParticipantId(value);
      break;
    case 3:
      var value = /** @type {!proto.FieldMask} */ (reader.readEnum());
      msg.addFieldMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryPresenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryPresenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryPresenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryPresenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getParticipantIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.QueryPresenceRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.QueryPresenceRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.QueryPresenceRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryPresenceRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ParticipantId participant_id = 2;
 * @return {!Array.<!proto.ParticipantId>}
 */
proto.QueryPresenceRequest.prototype.getParticipantIdList = function() {
  return /** @type{!Array.<!proto.ParticipantId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParticipantId, 2));
};


/** @param {!Array.<!proto.ParticipantId>} value */
proto.QueryPresenceRequest.prototype.setParticipantIdList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ParticipantId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ParticipantId}
 */
proto.QueryPresenceRequest.prototype.addParticipantId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ParticipantId, opt_index);
};


proto.QueryPresenceRequest.prototype.clearParticipantIdList = function() {
  this.setParticipantIdList([]);
};


/**
 * repeated FieldMask field_mask = 3;
 * @return {!Array.<!proto.FieldMask>}
 */
proto.QueryPresenceRequest.prototype.getFieldMaskList = function() {
  return /** @type {!Array.<!proto.FieldMask>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.FieldMask>} value */
proto.QueryPresenceRequest.prototype.setFieldMaskList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.FieldMask} value
 * @param {number=} opt_index
 */
proto.QueryPresenceRequest.prototype.addFieldMask = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.QueryPresenceRequest.prototype.clearFieldMaskList = function() {
  this.setFieldMaskList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryPresenceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.QueryPresenceResponse.repeatedFields_, null);
};
goog.inherits(proto.QueryPresenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryPresenceResponse.displayName = 'proto.QueryPresenceResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.QueryPresenceResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryPresenceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryPresenceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryPresenceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryPresenceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    presenceResultList: jspb.Message.toObjectList(msg.getPresenceResultList(),
    proto.PresenceResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryPresenceResponse}
 */
proto.QueryPresenceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryPresenceResponse;
  return proto.QueryPresenceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryPresenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryPresenceResponse}
 */
proto.QueryPresenceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.PresenceResult;
      reader.readMessage(value,proto.PresenceResult.deserializeBinaryFromReader);
      msg.addPresenceResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryPresenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryPresenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryPresenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryPresenceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getPresenceResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PresenceResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.QueryPresenceResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.QueryPresenceResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.QueryPresenceResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryPresenceResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PresenceResult presence_result = 2;
 * @return {!Array.<!proto.PresenceResult>}
 */
proto.QueryPresenceResponse.prototype.getPresenceResultList = function() {
  return /** @type{!Array.<!proto.PresenceResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PresenceResult, 2));
};


/** @param {!Array.<!proto.PresenceResult>} value */
proto.QueryPresenceResponse.prototype.setPresenceResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PresenceResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PresenceResult}
 */
proto.QueryPresenceResponse.prototype.addPresenceResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PresenceResult, opt_index);
};


proto.QueryPresenceResponse.prototype.clearPresenceResultList = function() {
  this.setPresenceResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveUserRequest.displayName = 'proto.RemoveUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    participantId: (f = msg.getParticipantId()) && proto.ParticipantId.toObject(includeInstance, f),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveUserRequest}
 */
proto.RemoveUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveUserRequest;
  return proto.RemoveUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveUserRequest}
 */
proto.RemoveUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setParticipantId(value);
      break;
    case 5:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getParticipantId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.RemoveUserRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.RemoveUserRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RemoveUserRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemoveUserRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParticipantId participant_id = 3;
 * @return {?proto.ParticipantId}
 */
proto.RemoveUserRequest.prototype.getParticipantId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 3));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.RemoveUserRequest.prototype.setParticipantId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RemoveUserRequest.prototype.clearParticipantId = function() {
  this.setParticipantId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemoveUserRequest.prototype.hasParticipantId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventRequestHeader event_request_header = 5;
 * @return {?proto.EventRequestHeader}
 */
proto.RemoveUserRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 5));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.RemoveUserRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.RemoveUserRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemoveUserRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveUserResponse.displayName = 'proto.RemoveUserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveUserResponse}
 */
proto.RemoveUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveUserResponse;
  return proto.RemoveUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveUserResponse}
 */
proto.RemoveUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 4:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.RemoveUserResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.RemoveUserResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RemoveUserResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemoveUserResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 4;
 * @return {?proto.Event}
 */
proto.RemoveUserResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 4));
};


/** @param {?proto.Event|undefined} value */
proto.RemoveUserResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.RemoveUserResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemoveUserResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RenameConversationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RenameConversationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RenameConversationRequest.displayName = 'proto.RenameConversationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RenameConversationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RenameConversationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RenameConversationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenameConversationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    newName: jspb.Message.getField(msg, 3),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RenameConversationRequest}
 */
proto.RenameConversationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RenameConversationRequest;
  return proto.RenameConversationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RenameConversationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RenameConversationRequest}
 */
proto.RenameConversationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    case 5:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RenameConversationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RenameConversationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RenameConversationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenameConversationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.RenameConversationRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.RenameConversationRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RenameConversationRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RenameConversationRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string new_name = 3;
 * @return {string}
 */
proto.RenameConversationRequest.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RenameConversationRequest.prototype.setNewName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RenameConversationRequest.prototype.clearNewName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RenameConversationRequest.prototype.hasNewName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventRequestHeader event_request_header = 5;
 * @return {?proto.EventRequestHeader}
 */
proto.RenameConversationRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 5));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.RenameConversationRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.RenameConversationRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RenameConversationRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RenameConversationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RenameConversationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RenameConversationResponse.displayName = 'proto.RenameConversationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RenameConversationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RenameConversationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RenameConversationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenameConversationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RenameConversationResponse}
 */
proto.RenameConversationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RenameConversationResponse;
  return proto.RenameConversationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RenameConversationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RenameConversationResponse}
 */
proto.RenameConversationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 4:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RenameConversationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RenameConversationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RenameConversationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenameConversationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.RenameConversationResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.RenameConversationResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RenameConversationResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RenameConversationResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 4;
 * @return {?proto.Event}
 */
proto.RenameConversationResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 4));
};


/** @param {?proto.Event|undefined} value */
proto.RenameConversationResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.RenameConversationResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RenameConversationResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SearchEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchEntitiesRequest.displayName = 'proto.SearchEntitiesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    query: jspb.Message.getField(msg, 3),
    maxCount: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchEntitiesRequest}
 */
proto.SearchEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchEntitiesRequest;
  return proto.SearchEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchEntitiesRequest}
 */
proto.SearchEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SearchEntitiesRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SearchEntitiesRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SearchEntitiesRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SearchEntitiesRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 3;
 * @return {string}
 */
proto.SearchEntitiesRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SearchEntitiesRequest.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SearchEntitiesRequest.prototype.clearQuery = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SearchEntitiesRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 max_count = 4;
 * @return {number}
 */
proto.SearchEntitiesRequest.prototype.getMaxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SearchEntitiesRequest.prototype.setMaxCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SearchEntitiesRequest.prototype.clearMaxCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SearchEntitiesRequest.prototype.hasMaxCount = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.SearchEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchEntitiesResponse.displayName = 'proto.SearchEntitiesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchEntitiesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    entityList: jspb.Message.toObjectList(msg.getEntityList(),
    proto.Entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchEntitiesResponse}
 */
proto.SearchEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchEntitiesResponse;
  return proto.SearchEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchEntitiesResponse}
 */
proto.SearchEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Entity;
      reader.readMessage(value,proto.Entity.deserializeBinaryFromReader);
      msg.addEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getEntityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SearchEntitiesResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SearchEntitiesResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SearchEntitiesResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SearchEntitiesResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Entity entity = 2;
 * @return {!Array.<!proto.Entity>}
 */
proto.SearchEntitiesResponse.prototype.getEntityList = function() {
  return /** @type{!Array.<!proto.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Entity, 2));
};


/** @param {!Array.<!proto.Entity>} value */
proto.SearchEntitiesResponse.prototype.setEntityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Entity}
 */
proto.SearchEntitiesResponse.prototype.addEntity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Entity, opt_index);
};


proto.SearchEntitiesResponse.prototype.clearEntityList = function() {
  this.setEntityList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Location.displayName = 'proto.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    place: (f = msg.getPlace()) && proto.Place.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Location}
 */
proto.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Location;
  return proto.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Location}
 */
proto.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Place;
      reader.readMessage(value,proto.Place.deserializeBinaryFromReader);
      msg.setPlace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Place.serializeBinaryToWriter
    );
  }
};


/**
 * optional Place place = 1;
 * @return {?proto.Place}
 */
proto.Location.prototype.getPlace = function() {
  return /** @type{?proto.Place} */ (
    jspb.Message.getWrapperField(this, proto.Place, 1));
};


/** @param {?proto.Place|undefined} value */
proto.Location.prototype.setPlace = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Location.prototype.clearPlace = function() {
  this.setPlace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Location.prototype.hasPlace = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendChatMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SendChatMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.SendChatMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendChatMessageRequest.displayName = 'proto.SendChatMessageRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SendChatMessageRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendChatMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SendChatMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendChatMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendChatMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    proto.EventAnnotation.toObject, includeInstance),
    messageContent: (f = msg.getMessageContent()) && proto.MessageContent.toObject(includeInstance, f),
    existingMedia: (f = msg.getExistingMedia()) && proto.ExistingMedia.toObject(includeInstance, f),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f),
    userId: (f = msg.getUserId()) && proto.ParticipantId.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendChatMessageRequest}
 */
proto.SendChatMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendChatMessageRequest;
  return proto.SendChatMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendChatMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendChatMessageRequest}
 */
proto.SendChatMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 5:
      var value = new proto.EventAnnotation;
      reader.readMessage(value,proto.EventAnnotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 6:
      var value = new proto.MessageContent;
      reader.readMessage(value,proto.MessageContent.deserializeBinaryFromReader);
      msg.setMessageContent(value);
      break;
    case 7:
      var value = new proto.ExistingMedia;
      reader.readMessage(value,proto.ExistingMedia.deserializeBinaryFromReader);
      msg.setExistingMedia(value);
      break;
    case 8:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    case 9:
      var value = new proto.ParticipantId;
      reader.readMessage(value,proto.ParticipantId.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 10:
      var value = new proto.Location;
      reader.readMessage(value,proto.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendChatMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendChatMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendChatMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendChatMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.EventAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getMessageContent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MessageContent.serializeBinaryToWriter
    );
  }
  f = message.getExistingMedia();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ExistingMedia.serializeBinaryToWriter
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ParticipantId.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SendChatMessageRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SendChatMessageRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SendChatMessageRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EventAnnotation annotation = 5;
 * @return {!Array.<!proto.EventAnnotation>}
 */
proto.SendChatMessageRequest.prototype.getAnnotationList = function() {
  return /** @type{!Array.<!proto.EventAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EventAnnotation, 5));
};


/** @param {!Array.<!proto.EventAnnotation>} value */
proto.SendChatMessageRequest.prototype.setAnnotationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.EventAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventAnnotation}
 */
proto.SendChatMessageRequest.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.EventAnnotation, opt_index);
};


proto.SendChatMessageRequest.prototype.clearAnnotationList = function() {
  this.setAnnotationList([]);
};


/**
 * optional MessageContent message_content = 6;
 * @return {?proto.MessageContent}
 */
proto.SendChatMessageRequest.prototype.getMessageContent = function() {
  return /** @type{?proto.MessageContent} */ (
    jspb.Message.getWrapperField(this, proto.MessageContent, 6));
};


/** @param {?proto.MessageContent|undefined} value */
proto.SendChatMessageRequest.prototype.setMessageContent = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SendChatMessageRequest.prototype.clearMessageContent = function() {
  this.setMessageContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasMessageContent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ExistingMedia existing_media = 7;
 * @return {?proto.ExistingMedia}
 */
proto.SendChatMessageRequest.prototype.getExistingMedia = function() {
  return /** @type{?proto.ExistingMedia} */ (
    jspb.Message.getWrapperField(this, proto.ExistingMedia, 7));
};


/** @param {?proto.ExistingMedia|undefined} value */
proto.SendChatMessageRequest.prototype.setExistingMedia = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SendChatMessageRequest.prototype.clearExistingMedia = function() {
  this.setExistingMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasExistingMedia = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventRequestHeader event_request_header = 8;
 * @return {?proto.EventRequestHeader}
 */
proto.SendChatMessageRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 8));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.SendChatMessageRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SendChatMessageRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ParticipantId user_id = 9;
 * @return {?proto.ParticipantId}
 */
proto.SendChatMessageRequest.prototype.getUserId = function() {
  return /** @type{?proto.ParticipantId} */ (
    jspb.Message.getWrapperField(this, proto.ParticipantId, 9));
};


/** @param {?proto.ParticipantId|undefined} value */
proto.SendChatMessageRequest.prototype.setUserId = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.SendChatMessageRequest.prototype.clearUserId = function() {
  this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Location location = 10;
 * @return {?proto.Location}
 */
proto.SendChatMessageRequest.prototype.getLocation = function() {
  return /** @type{?proto.Location} */ (
    jspb.Message.getWrapperField(this, proto.Location, 10));
};


/** @param {?proto.Location|undefined} value */
proto.SendChatMessageRequest.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.SendChatMessageRequest.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageRequest.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendChatMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendChatMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendChatMessageResponse.displayName = 'proto.SendChatMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendChatMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SendChatMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendChatMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendChatMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendChatMessageResponse}
 */
proto.SendChatMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendChatMessageResponse;
  return proto.SendChatMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendChatMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendChatMessageResponse}
 */
proto.SendChatMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 6:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendChatMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendChatMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendChatMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendChatMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SendChatMessageResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SendChatMessageResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SendChatMessageResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 6;
 * @return {?proto.Event}
 */
proto.SendChatMessageResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 6));
};


/** @param {?proto.Event|undefined} value */
proto.SendChatMessageResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SendChatMessageResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendChatMessageResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModifyOTRStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ModifyOTRStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModifyOTRStatusRequest.displayName = 'proto.ModifyOTRStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModifyOTRStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ModifyOTRStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModifyOTRStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyOTRStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    otrStatus: jspb.Message.getField(msg, 3),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModifyOTRStatusRequest}
 */
proto.ModifyOTRStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModifyOTRStatusRequest;
  return proto.ModifyOTRStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModifyOTRStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModifyOTRStatusRequest}
 */
proto.ModifyOTRStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 3:
      var value = /** @type {!proto.OffTheRecordStatus} */ (reader.readEnum());
      msg.setOtrStatus(value);
      break;
    case 5:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModifyOTRStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModifyOTRStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModifyOTRStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyOTRStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.ModifyOTRStatusRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.ModifyOTRStatusRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ModifyOTRStatusRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModifyOTRStatusRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OffTheRecordStatus otr_status = 3;
 * @return {!proto.OffTheRecordStatus}
 */
proto.ModifyOTRStatusRequest.prototype.getOtrStatus = function() {
  return /** @type {!proto.OffTheRecordStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.OffTheRecordStatus} value */
proto.ModifyOTRStatusRequest.prototype.setOtrStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ModifyOTRStatusRequest.prototype.clearOtrStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModifyOTRStatusRequest.prototype.hasOtrStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventRequestHeader event_request_header = 5;
 * @return {?proto.EventRequestHeader}
 */
proto.ModifyOTRStatusRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 5));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.ModifyOTRStatusRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ModifyOTRStatusRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModifyOTRStatusRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModifyOTRStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ModifyOTRStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModifyOTRStatusResponse.displayName = 'proto.ModifyOTRStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModifyOTRStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ModifyOTRStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModifyOTRStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyOTRStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModifyOTRStatusResponse}
 */
proto.ModifyOTRStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModifyOTRStatusResponse;
  return proto.ModifyOTRStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModifyOTRStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModifyOTRStatusResponse}
 */
proto.ModifyOTRStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 4:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModifyOTRStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModifyOTRStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModifyOTRStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyOTRStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.ModifyOTRStatusResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.ModifyOTRStatusResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ModifyOTRStatusResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModifyOTRStatusResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 4;
 * @return {?proto.Event}
 */
proto.ModifyOTRStatusResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 4));
};


/** @param {?proto.Event|undefined} value */
proto.ModifyOTRStatusResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ModifyOTRStatusResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModifyOTRStatusResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendOffnetworkInvitationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendOffnetworkInvitationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendOffnetworkInvitationRequest.displayName = 'proto.SendOffnetworkInvitationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendOffnetworkInvitationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SendOffnetworkInvitationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendOffnetworkInvitationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOffnetworkInvitationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    inviteeAddress: (f = msg.getInviteeAddress()) && proto.OffnetworkAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendOffnetworkInvitationRequest}
 */
proto.SendOffnetworkInvitationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendOffnetworkInvitationRequest;
  return proto.SendOffnetworkInvitationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendOffnetworkInvitationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendOffnetworkInvitationRequest}
 */
proto.SendOffnetworkInvitationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.OffnetworkAddress;
      reader.readMessage(value,proto.OffnetworkAddress.deserializeBinaryFromReader);
      msg.setInviteeAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendOffnetworkInvitationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendOffnetworkInvitationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendOffnetworkInvitationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOffnetworkInvitationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getInviteeAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OffnetworkAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SendOffnetworkInvitationRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SendOffnetworkInvitationRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SendOffnetworkInvitationRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendOffnetworkInvitationRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OffnetworkAddress invitee_address = 2;
 * @return {?proto.OffnetworkAddress}
 */
proto.SendOffnetworkInvitationRequest.prototype.getInviteeAddress = function() {
  return /** @type{?proto.OffnetworkAddress} */ (
    jspb.Message.getWrapperField(this, proto.OffnetworkAddress, 2));
};


/** @param {?proto.OffnetworkAddress|undefined} value */
proto.SendOffnetworkInvitationRequest.prototype.setInviteeAddress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SendOffnetworkInvitationRequest.prototype.clearInviteeAddress = function() {
  this.setInviteeAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendOffnetworkInvitationRequest.prototype.hasInviteeAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendOffnetworkInvitationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendOffnetworkInvitationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendOffnetworkInvitationResponse.displayName = 'proto.SendOffnetworkInvitationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendOffnetworkInvitationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SendOffnetworkInvitationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendOffnetworkInvitationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOffnetworkInvitationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendOffnetworkInvitationResponse}
 */
proto.SendOffnetworkInvitationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendOffnetworkInvitationResponse;
  return proto.SendOffnetworkInvitationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendOffnetworkInvitationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendOffnetworkInvitationResponse}
 */
proto.SendOffnetworkInvitationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendOffnetworkInvitationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendOffnetworkInvitationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendOffnetworkInvitationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOffnetworkInvitationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SendOffnetworkInvitationResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SendOffnetworkInvitationResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SendOffnetworkInvitationResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SendOffnetworkInvitationResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetActiveClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetActiveClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetActiveClientRequest.displayName = 'proto.SetActiveClientRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetActiveClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetActiveClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetActiveClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetActiveClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    isActive: jspb.Message.getField(msg, 2),
    fullJid: jspb.Message.getField(msg, 3),
    timeoutSecs: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetActiveClientRequest}
 */
proto.SetActiveClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetActiveClientRequest;
  return proto.SetActiveClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetActiveClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetActiveClientRequest}
 */
proto.SetActiveClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullJid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutSecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetActiveClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetActiveClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetActiveClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetActiveClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetActiveClientRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetActiveClientRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetActiveClientRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetActiveClientRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_active = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SetActiveClientRequest.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SetActiveClientRequest.prototype.setIsActive = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetActiveClientRequest.prototype.clearIsActive = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetActiveClientRequest.prototype.hasIsActive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string full_jid = 3;
 * @return {string}
 */
proto.SetActiveClientRequest.prototype.getFullJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SetActiveClientRequest.prototype.setFullJid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetActiveClientRequest.prototype.clearFullJid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetActiveClientRequest.prototype.hasFullJid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 timeout_secs = 4;
 * @return {number}
 */
proto.SetActiveClientRequest.prototype.getTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SetActiveClientRequest.prototype.setTimeoutSecs = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetActiveClientRequest.prototype.clearTimeoutSecs = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetActiveClientRequest.prototype.hasTimeoutSecs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetActiveClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetActiveClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetActiveClientResponse.displayName = 'proto.SetActiveClientResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetActiveClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetActiveClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetActiveClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetActiveClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetActiveClientResponse}
 */
proto.SetActiveClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetActiveClientResponse;
  return proto.SetActiveClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetActiveClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetActiveClientResponse}
 */
proto.SetActiveClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetActiveClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetActiveClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetActiveClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetActiveClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetActiveClientResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetActiveClientResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetActiveClientResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetActiveClientResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConversationLevelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConversationLevelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetConversationLevelRequest.displayName = 'proto.SetConversationLevelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConversationLevelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConversationLevelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConversationLevelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationLevelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConversationLevelRequest}
 */
proto.SetConversationLevelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConversationLevelRequest;
  return proto.SetConversationLevelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConversationLevelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConversationLevelRequest}
 */
proto.SetConversationLevelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConversationLevelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConversationLevelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConversationLevelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationLevelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetConversationLevelRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetConversationLevelRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetConversationLevelRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationLevelRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConversationLevelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConversationLevelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetConversationLevelResponse.displayName = 'proto.SetConversationLevelResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConversationLevelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConversationLevelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConversationLevelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationLevelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConversationLevelResponse}
 */
proto.SetConversationLevelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConversationLevelResponse;
  return proto.SetConversationLevelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConversationLevelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConversationLevelResponse}
 */
proto.SetConversationLevelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConversationLevelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConversationLevelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConversationLevelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationLevelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetConversationLevelResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetConversationLevelResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetConversationLevelResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationLevelResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConversationNotificationLevelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConversationNotificationLevelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetConversationNotificationLevelRequest.displayName = 'proto.SetConversationNotificationLevelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConversationNotificationLevelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConversationNotificationLevelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConversationNotificationLevelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    level: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConversationNotificationLevelRequest}
 */
proto.SetConversationNotificationLevelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConversationNotificationLevelRequest;
  return proto.SetConversationNotificationLevelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConversationNotificationLevelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConversationNotificationLevelRequest}
 */
proto.SetConversationNotificationLevelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {!proto.NotificationLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConversationNotificationLevelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConversationNotificationLevelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConversationNotificationLevelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.NotificationLevel} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetConversationNotificationLevelRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetConversationNotificationLevelRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetConversationNotificationLevelRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.SetConversationNotificationLevelRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetConversationNotificationLevelRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetConversationNotificationLevelRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NotificationLevel level = 3;
 * @return {!proto.NotificationLevel}
 */
proto.SetConversationNotificationLevelRequest.prototype.getLevel = function() {
  return /** @type {!proto.NotificationLevel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.NotificationLevel} value */
proto.SetConversationNotificationLevelRequest.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetConversationNotificationLevelRequest.prototype.clearLevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelRequest.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConversationNotificationLevelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConversationNotificationLevelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetConversationNotificationLevelResponse.displayName = 'proto.SetConversationNotificationLevelResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConversationNotificationLevelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConversationNotificationLevelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConversationNotificationLevelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConversationNotificationLevelResponse}
 */
proto.SetConversationNotificationLevelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConversationNotificationLevelResponse;
  return proto.SetConversationNotificationLevelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConversationNotificationLevelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConversationNotificationLevelResponse}
 */
proto.SetConversationNotificationLevelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConversationNotificationLevelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConversationNotificationLevelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConversationNotificationLevelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConversationNotificationLevelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetConversationNotificationLevelResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetConversationNotificationLevelResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetConversationNotificationLevelResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.SetConversationNotificationLevelResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SetConversationNotificationLevelResponse.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetConversationNotificationLevelResponse.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetConversationNotificationLevelResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetFocusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetFocusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetFocusRequest.displayName = 'proto.SetFocusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetFocusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetFocusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetFocusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 3),
    timeoutSecs: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetFocusRequest}
 */
proto.SetFocusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetFocusRequest;
  return proto.SetFocusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetFocusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetFocusRequest}
 */
proto.SetFocusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {!proto.FocusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutSecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetFocusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetFocusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetFocusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.FocusType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetFocusRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetFocusRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetFocusRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.SetFocusRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetFocusRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetFocusRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FocusType type = 3;
 * @return {!proto.FocusType}
 */
proto.SetFocusRequest.prototype.getType = function() {
  return /** @type {!proto.FocusType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.FocusType} value */
proto.SetFocusRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetFocusRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 timeout_secs = 4;
 * @return {number}
 */
proto.SetFocusRequest.prototype.getTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SetFocusRequest.prototype.setTimeoutSecs = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetFocusRequest.prototype.clearTimeoutSecs = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusRequest.prototype.hasTimeoutSecs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetFocusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetFocusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetFocusResponse.displayName = 'proto.SetFocusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetFocusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetFocusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetFocusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetFocusResponse}
 */
proto.SetFocusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetFocusResponse;
  return proto.SetFocusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetFocusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetFocusResponse}
 */
proto.SetFocusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetFocusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetFocusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetFocusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetFocusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetFocusResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetFocusResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetFocusResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.SetFocusResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SetFocusResponse.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetFocusResponse.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetFocusResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetGroupLinkSharingEnabledRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetGroupLinkSharingEnabledRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetGroupLinkSharingEnabledRequest.displayName = 'proto.SetGroupLinkSharingEnabledRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetGroupLinkSharingEnabledRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetGroupLinkSharingEnabledRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetGroupLinkSharingEnabledRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    eventRequestHeader: (f = msg.getEventRequestHeader()) && proto.EventRequestHeader.toObject(includeInstance, f),
    groupLinkSharingStatus: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetGroupLinkSharingEnabledRequest}
 */
proto.SetGroupLinkSharingEnabledRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetGroupLinkSharingEnabledRequest;
  return proto.SetGroupLinkSharingEnabledRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetGroupLinkSharingEnabledRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetGroupLinkSharingEnabledRequest}
 */
proto.SetGroupLinkSharingEnabledRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.EventRequestHeader;
      reader.readMessage(value,proto.EventRequestHeader.deserializeBinaryFromReader);
      msg.setEventRequestHeader(value);
      break;
    case 4:
      var value = /** @type {!proto.GroupLinkSharingStatus} */ (reader.readEnum());
      msg.setGroupLinkSharingStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetGroupLinkSharingEnabledRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetGroupLinkSharingEnabledRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetGroupLinkSharingEnabledRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getEventRequestHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EventRequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetGroupLinkSharingEnabledRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetGroupLinkSharingEnabledRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventRequestHeader event_request_header = 2;
 * @return {?proto.EventRequestHeader}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.getEventRequestHeader = function() {
  return /** @type{?proto.EventRequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.EventRequestHeader, 2));
};


/** @param {?proto.EventRequestHeader|undefined} value */
proto.SetGroupLinkSharingEnabledRequest.prototype.setEventRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetGroupLinkSharingEnabledRequest.prototype.clearEventRequestHeader = function() {
  this.setEventRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.hasEventRequestHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GroupLinkSharingStatus group_link_sharing_status = 4;
 * @return {!proto.GroupLinkSharingStatus}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.getGroupLinkSharingStatus = function() {
  return /** @type {!proto.GroupLinkSharingStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.GroupLinkSharingStatus} value */
proto.SetGroupLinkSharingEnabledRequest.prototype.setGroupLinkSharingStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SetGroupLinkSharingEnabledRequest.prototype.clearGroupLinkSharingStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledRequest.prototype.hasGroupLinkSharingStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetGroupLinkSharingEnabledResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetGroupLinkSharingEnabledResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetGroupLinkSharingEnabledResponse.displayName = 'proto.SetGroupLinkSharingEnabledResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetGroupLinkSharingEnabledResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetGroupLinkSharingEnabledResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetGroupLinkSharingEnabledResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    createdEvent: (f = msg.getCreatedEvent()) && proto.Event.toObject(includeInstance, f),
    updatedConversation: (f = msg.getUpdatedConversation()) && proto.Conversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetGroupLinkSharingEnabledResponse}
 */
proto.SetGroupLinkSharingEnabledResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetGroupLinkSharingEnabledResponse;
  return proto.SetGroupLinkSharingEnabledResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetGroupLinkSharingEnabledResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetGroupLinkSharingEnabledResponse}
 */
proto.SetGroupLinkSharingEnabledResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setCreatedEvent(value);
      break;
    case 3:
      var value = new proto.Conversation;
      reader.readMessage(value,proto.Conversation.deserializeBinaryFromReader);
      msg.setUpdatedConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetGroupLinkSharingEnabledResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetGroupLinkSharingEnabledResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetGroupLinkSharingEnabledResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCreatedEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedConversation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Conversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetGroupLinkSharingEnabledResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetGroupLinkSharingEnabledResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event created_event = 2;
 * @return {?proto.Event}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.getCreatedEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 2));
};


/** @param {?proto.Event|undefined} value */
proto.SetGroupLinkSharingEnabledResponse.prototype.setCreatedEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetGroupLinkSharingEnabledResponse.prototype.clearCreatedEvent = function() {
  this.setCreatedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.hasCreatedEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Conversation updated_conversation = 3;
 * @return {?proto.Conversation}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.getUpdatedConversation = function() {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 3));
};


/** @param {?proto.Conversation|undefined} value */
proto.SetGroupLinkSharingEnabledResponse.prototype.setUpdatedConversation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SetGroupLinkSharingEnabledResponse.prototype.clearUpdatedConversation = function() {
  this.setUpdatedConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetGroupLinkSharingEnabledResponse.prototype.hasUpdatedConversation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetPresenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetPresenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetPresenceRequest.displayName = 'proto.SetPresenceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetPresenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetPresenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetPresenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetPresenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    presenceStateSetting: (f = msg.getPresenceStateSetting()) && proto.PresenceStateSetting.toObject(includeInstance, f),
    dndSetting: (f = msg.getDndSetting()) && proto.DndSetting.toObject(includeInstance, f),
    desktopOffSetting: (f = msg.getDesktopOffSetting()) && proto.DesktopOffSetting.toObject(includeInstance, f),
    moodSetting: (f = msg.getMoodSetting()) && proto.MoodSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetPresenceRequest}
 */
proto.SetPresenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetPresenceRequest;
  return proto.SetPresenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetPresenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetPresenceRequest}
 */
proto.SetPresenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.PresenceStateSetting;
      reader.readMessage(value,proto.PresenceStateSetting.deserializeBinaryFromReader);
      msg.setPresenceStateSetting(value);
      break;
    case 3:
      var value = new proto.DndSetting;
      reader.readMessage(value,proto.DndSetting.deserializeBinaryFromReader);
      msg.setDndSetting(value);
      break;
    case 5:
      var value = new proto.DesktopOffSetting;
      reader.readMessage(value,proto.DesktopOffSetting.deserializeBinaryFromReader);
      msg.setDesktopOffSetting(value);
      break;
    case 8:
      var value = new proto.MoodSetting;
      reader.readMessage(value,proto.MoodSetting.deserializeBinaryFromReader);
      msg.setMoodSetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetPresenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetPresenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetPresenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetPresenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getPresenceStateSetting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PresenceStateSetting.serializeBinaryToWriter
    );
  }
  f = message.getDndSetting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DndSetting.serializeBinaryToWriter
    );
  }
  f = message.getDesktopOffSetting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DesktopOffSetting.serializeBinaryToWriter
    );
  }
  f = message.getMoodSetting();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.MoodSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetPresenceRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetPresenceRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetPresenceRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PresenceStateSetting presence_state_setting = 2;
 * @return {?proto.PresenceStateSetting}
 */
proto.SetPresenceRequest.prototype.getPresenceStateSetting = function() {
  return /** @type{?proto.PresenceStateSetting} */ (
    jspb.Message.getWrapperField(this, proto.PresenceStateSetting, 2));
};


/** @param {?proto.PresenceStateSetting|undefined} value */
proto.SetPresenceRequest.prototype.setPresenceStateSetting = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetPresenceRequest.prototype.clearPresenceStateSetting = function() {
  this.setPresenceStateSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceRequest.prototype.hasPresenceStateSetting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DndSetting dnd_setting = 3;
 * @return {?proto.DndSetting}
 */
proto.SetPresenceRequest.prototype.getDndSetting = function() {
  return /** @type{?proto.DndSetting} */ (
    jspb.Message.getWrapperField(this, proto.DndSetting, 3));
};


/** @param {?proto.DndSetting|undefined} value */
proto.SetPresenceRequest.prototype.setDndSetting = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SetPresenceRequest.prototype.clearDndSetting = function() {
  this.setDndSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceRequest.prototype.hasDndSetting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DesktopOffSetting desktop_off_setting = 5;
 * @return {?proto.DesktopOffSetting}
 */
proto.SetPresenceRequest.prototype.getDesktopOffSetting = function() {
  return /** @type{?proto.DesktopOffSetting} */ (
    jspb.Message.getWrapperField(this, proto.DesktopOffSetting, 5));
};


/** @param {?proto.DesktopOffSetting|undefined} value */
proto.SetPresenceRequest.prototype.setDesktopOffSetting = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SetPresenceRequest.prototype.clearDesktopOffSetting = function() {
  this.setDesktopOffSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceRequest.prototype.hasDesktopOffSetting = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MoodSetting mood_setting = 8;
 * @return {?proto.MoodSetting}
 */
proto.SetPresenceRequest.prototype.getMoodSetting = function() {
  return /** @type{?proto.MoodSetting} */ (
    jspb.Message.getWrapperField(this, proto.MoodSetting, 8));
};


/** @param {?proto.MoodSetting|undefined} value */
proto.SetPresenceRequest.prototype.setMoodSetting = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SetPresenceRequest.prototype.clearMoodSetting = function() {
  this.setMoodSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceRequest.prototype.hasMoodSetting = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetPresenceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetPresenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetPresenceResponse.displayName = 'proto.SetPresenceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetPresenceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetPresenceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetPresenceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetPresenceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetPresenceResponse}
 */
proto.SetPresenceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetPresenceResponse;
  return proto.SetPresenceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetPresenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetPresenceResponse}
 */
proto.SetPresenceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetPresenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetPresenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetPresenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetPresenceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetPresenceResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetPresenceResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetPresenceResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetPresenceResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetTypingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetTypingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetTypingRequest.displayName = 'proto.SetTypingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetTypingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetTypingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetTypingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetTypingRequest}
 */
proto.SetTypingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetTypingRequest;
  return proto.SetTypingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetTypingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetTypingRequest}
 */
proto.SetTypingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {!proto.TypingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetTypingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetTypingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetTypingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.TypingType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SetTypingRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SetTypingRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetTypingRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.SetTypingRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.SetTypingRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetTypingRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypingType type = 3;
 * @return {!proto.TypingType}
 */
proto.SetTypingRequest.prototype.getType = function() {
  return /** @type {!proto.TypingType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TypingType} value */
proto.SetTypingRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SetTypingRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetTypingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetTypingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetTypingResponse.displayName = 'proto.SetTypingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetTypingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetTypingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetTypingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetTypingResponse}
 */
proto.SetTypingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetTypingResponse;
  return proto.SetTypingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetTypingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetTypingResponse}
 */
proto.SetTypingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetTypingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetTypingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetTypingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetTypingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SetTypingResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SetTypingResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetTypingResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.SetTypingResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SetTypingResponse.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetTypingResponse.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetTypingResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncAllNewEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SyncAllNewEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncAllNewEventsRequest.displayName = 'proto.SyncAllNewEventsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncAllNewEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncAllNewEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncAllNewEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncAllNewEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    lastSyncTimestamp: jspb.Message.getField(msg, 2),
    maxResponseSizeBytes: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncAllNewEventsRequest}
 */
proto.SyncAllNewEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncAllNewEventsRequest;
  return proto.SyncAllNewEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncAllNewEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncAllNewEventsRequest}
 */
proto.SyncAllNewEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSyncTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxResponseSizeBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncAllNewEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SyncAllNewEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SyncAllNewEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncAllNewEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SyncAllNewEventsRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SyncAllNewEventsRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SyncAllNewEventsRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncAllNewEventsRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 last_sync_timestamp = 2;
 * @return {number}
 */
proto.SyncAllNewEventsRequest.prototype.getLastSyncTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SyncAllNewEventsRequest.prototype.setLastSyncTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SyncAllNewEventsRequest.prototype.clearLastSyncTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncAllNewEventsRequest.prototype.hasLastSyncTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 max_response_size_bytes = 8;
 * @return {number}
 */
proto.SyncAllNewEventsRequest.prototype.getMaxResponseSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.SyncAllNewEventsRequest.prototype.setMaxResponseSizeBytes = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SyncAllNewEventsRequest.prototype.clearMaxResponseSizeBytes = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncAllNewEventsRequest.prototype.hasMaxResponseSizeBytes = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncAllNewEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SyncAllNewEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.SyncAllNewEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncAllNewEventsResponse.displayName = 'proto.SyncAllNewEventsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SyncAllNewEventsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncAllNewEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncAllNewEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncAllNewEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncAllNewEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    syncTimestamp: jspb.Message.getField(msg, 2),
    conversationStateList: jspb.Message.toObjectList(msg.getConversationStateList(),
    proto.ConversationState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncAllNewEventsResponse}
 */
proto.SyncAllNewEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncAllNewEventsResponse;
  return proto.SyncAllNewEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncAllNewEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncAllNewEventsResponse}
 */
proto.SyncAllNewEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSyncTimestamp(value);
      break;
    case 3:
      var value = new proto.ConversationState;
      reader.readMessage(value,proto.ConversationState.deserializeBinaryFromReader);
      msg.addConversationState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncAllNewEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SyncAllNewEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SyncAllNewEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncAllNewEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getConversationStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ConversationState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SyncAllNewEventsResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SyncAllNewEventsResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SyncAllNewEventsResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncAllNewEventsResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sync_timestamp = 2;
 * @return {number}
 */
proto.SyncAllNewEventsResponse.prototype.getSyncTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SyncAllNewEventsResponse.prototype.setSyncTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SyncAllNewEventsResponse.prototype.clearSyncTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncAllNewEventsResponse.prototype.hasSyncTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ConversationState conversation_state = 3;
 * @return {!Array.<!proto.ConversationState>}
 */
proto.SyncAllNewEventsResponse.prototype.getConversationStateList = function() {
  return /** @type{!Array.<!proto.ConversationState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConversationState, 3));
};


/** @param {!Array.<!proto.ConversationState>} value */
proto.SyncAllNewEventsResponse.prototype.setConversationStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ConversationState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConversationState}
 */
proto.SyncAllNewEventsResponse.prototype.addConversationState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConversationState, opt_index);
};


proto.SyncAllNewEventsResponse.prototype.clearConversationStateList = function() {
  this.setConversationStateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncRecentConversationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SyncRecentConversationsRequest.repeatedFields_, null);
};
goog.inherits(proto.SyncRecentConversationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncRecentConversationsRequest.displayName = 'proto.SyncRecentConversationsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SyncRecentConversationsRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncRecentConversationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncRecentConversationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncRecentConversationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRecentConversationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    lastEventTimestamp: jspb.Message.getField(msg, 2),
    maxConversations: jspb.Message.getField(msg, 3),
    maxEventsPerConversation: jspb.Message.getField(msg, 4),
    syncFilterList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncRecentConversationsRequest}
 */
proto.SyncRecentConversationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncRecentConversationsRequest;
  return proto.SyncRecentConversationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncRecentConversationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncRecentConversationsRequest}
 */
proto.SyncRecentConversationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastEventTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxConversations(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxEventsPerConversation(value);
      break;
    case 5:
      var value = /** @type {!proto.SyncFilter} */ (reader.readEnum());
      msg.addSyncFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncRecentConversationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SyncRecentConversationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SyncRecentConversationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRecentConversationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSyncFilterList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      5,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.SyncRecentConversationsRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.SyncRecentConversationsRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SyncRecentConversationsRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 last_event_timestamp = 2;
 * @return {number}
 */
proto.SyncRecentConversationsRequest.prototype.getLastEventTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SyncRecentConversationsRequest.prototype.setLastEventTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SyncRecentConversationsRequest.prototype.clearLastEventTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsRequest.prototype.hasLastEventTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 max_conversations = 3;
 * @return {number}
 */
proto.SyncRecentConversationsRequest.prototype.getMaxConversations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SyncRecentConversationsRequest.prototype.setMaxConversations = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SyncRecentConversationsRequest.prototype.clearMaxConversations = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsRequest.prototype.hasMaxConversations = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 max_events_per_conversation = 4;
 * @return {number}
 */
proto.SyncRecentConversationsRequest.prototype.getMaxEventsPerConversation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SyncRecentConversationsRequest.prototype.setMaxEventsPerConversation = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SyncRecentConversationsRequest.prototype.clearMaxEventsPerConversation = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsRequest.prototype.hasMaxEventsPerConversation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SyncFilter sync_filter = 5;
 * @return {!Array.<!proto.SyncFilter>}
 */
proto.SyncRecentConversationsRequest.prototype.getSyncFilterList = function() {
  return /** @type {!Array.<!proto.SyncFilter>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.SyncFilter>} value */
proto.SyncRecentConversationsRequest.prototype.setSyncFilterList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.SyncFilter} value
 * @param {number=} opt_index
 */
proto.SyncRecentConversationsRequest.prototype.addSyncFilter = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.SyncRecentConversationsRequest.prototype.clearSyncFilterList = function() {
  this.setSyncFilterList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncRecentConversationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SyncRecentConversationsResponse.repeatedFields_, null);
};
goog.inherits(proto.SyncRecentConversationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncRecentConversationsResponse.displayName = 'proto.SyncRecentConversationsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SyncRecentConversationsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncRecentConversationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncRecentConversationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncRecentConversationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRecentConversationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f),
    syncTimestamp: jspb.Message.getField(msg, 2),
    conversationStateList: jspb.Message.toObjectList(msg.getConversationStateList(),
    proto.ConversationState.toObject, includeInstance),
    continuationEndTimestamp: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncRecentConversationsResponse}
 */
proto.SyncRecentConversationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncRecentConversationsResponse;
  return proto.SyncRecentConversationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncRecentConversationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncRecentConversationsResponse}
 */
proto.SyncRecentConversationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSyncTimestamp(value);
      break;
    case 3:
      var value = new proto.ConversationState;
      reader.readMessage(value,proto.ConversationState.deserializeBinaryFromReader);
      msg.addConversationState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContinuationEndTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncRecentConversationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SyncRecentConversationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SyncRecentConversationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRecentConversationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getConversationStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ConversationState.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.SyncRecentConversationsResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.SyncRecentConversationsResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SyncRecentConversationsResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sync_timestamp = 2;
 * @return {number}
 */
proto.SyncRecentConversationsResponse.prototype.getSyncTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SyncRecentConversationsResponse.prototype.setSyncTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SyncRecentConversationsResponse.prototype.clearSyncTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsResponse.prototype.hasSyncTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ConversationState conversation_state = 3;
 * @return {!Array.<!proto.ConversationState>}
 */
proto.SyncRecentConversationsResponse.prototype.getConversationStateList = function() {
  return /** @type{!Array.<!proto.ConversationState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConversationState, 3));
};


/** @param {!Array.<!proto.ConversationState>} value */
proto.SyncRecentConversationsResponse.prototype.setConversationStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ConversationState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConversationState}
 */
proto.SyncRecentConversationsResponse.prototype.addConversationState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConversationState, opt_index);
};


proto.SyncRecentConversationsResponse.prototype.clearConversationStateList = function() {
  this.setConversationStateList([]);
};


/**
 * optional uint64 continuation_end_timestamp = 4;
 * @return {number}
 */
proto.SyncRecentConversationsResponse.prototype.getContinuationEndTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SyncRecentConversationsResponse.prototype.setContinuationEndTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SyncRecentConversationsResponse.prototype.clearContinuationEndTimestamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRecentConversationsResponse.prototype.hasContinuationEndTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateWatermarkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateWatermarkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateWatermarkRequest.displayName = 'proto.UpdateWatermarkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateWatermarkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateWatermarkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateWatermarkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateWatermarkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeader: (f = msg.getRequestHeader()) && proto.RequestHeader.toObject(includeInstance, f),
    conversationId: (f = msg.getConversationId()) && proto.ConversationId.toObject(includeInstance, f),
    lastReadTimestamp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateWatermarkRequest}
 */
proto.UpdateWatermarkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateWatermarkRequest;
  return proto.UpdateWatermarkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateWatermarkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateWatermarkRequest}
 */
proto.UpdateWatermarkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RequestHeader;
      reader.readMessage(value,proto.RequestHeader.deserializeBinaryFromReader);
      msg.setRequestHeader(value);
      break;
    case 2:
      var value = new proto.ConversationId;
      reader.readMessage(value,proto.ConversationId.deserializeBinaryFromReader);
      msg.setConversationId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastReadTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateWatermarkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateWatermarkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateWatermarkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateWatermarkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConversationId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader request_header = 1;
 * @return {?proto.RequestHeader}
 */
proto.UpdateWatermarkRequest.prototype.getRequestHeader = function() {
  return /** @type{?proto.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.RequestHeader, 1));
};


/** @param {?proto.RequestHeader|undefined} value */
proto.UpdateWatermarkRequest.prototype.setRequestHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateWatermarkRequest.prototype.clearRequestHeader = function() {
  this.setRequestHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateWatermarkRequest.prototype.hasRequestHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConversationId conversation_id = 2;
 * @return {?proto.ConversationId}
 */
proto.UpdateWatermarkRequest.prototype.getConversationId = function() {
  return /** @type{?proto.ConversationId} */ (
    jspb.Message.getWrapperField(this, proto.ConversationId, 2));
};


/** @param {?proto.ConversationId|undefined} value */
proto.UpdateWatermarkRequest.prototype.setConversationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UpdateWatermarkRequest.prototype.clearConversationId = function() {
  this.setConversationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateWatermarkRequest.prototype.hasConversationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 last_read_timestamp = 3;
 * @return {number}
 */
proto.UpdateWatermarkRequest.prototype.getLastReadTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UpdateWatermarkRequest.prototype.setLastReadTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UpdateWatermarkRequest.prototype.clearLastReadTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateWatermarkRequest.prototype.hasLastReadTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateWatermarkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateWatermarkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateWatermarkResponse.displayName = 'proto.UpdateWatermarkResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateWatermarkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateWatermarkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateWatermarkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateWatermarkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeader: (f = msg.getResponseHeader()) && proto.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateWatermarkResponse}
 */
proto.UpdateWatermarkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateWatermarkResponse;
  return proto.UpdateWatermarkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateWatermarkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateWatermarkResponse}
 */
proto.UpdateWatermarkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResponseHeader;
      reader.readMessage(value,proto.ResponseHeader.deserializeBinaryFromReader);
      msg.setResponseHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateWatermarkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateWatermarkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateWatermarkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateWatermarkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader response_header = 1;
 * @return {?proto.ResponseHeader}
 */
proto.UpdateWatermarkResponse.prototype.getResponseHeader = function() {
  return /** @type{?proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.ResponseHeader, 1));
};


/** @param {?proto.ResponseHeader|undefined} value */
proto.UpdateWatermarkResponse.prototype.setResponseHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateWatermarkResponse.prototype.clearResponseHeader = function() {
  this.setResponseHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateWatermarkResponse.prototype.hasResponseHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.ActiveClientState = {
  ACTIVE_CLIENT_STATE_NO_ACTIVE: 0,
  ACTIVE_CLIENT_STATE_IS_ACTIVE: 1,
  ACTIVE_CLIENT_STATE_OTHER_ACTIVE: 2
};

/**
 * @enum {number}
 */
proto.FocusType = {
  FOCUS_TYPE_UNKNOWN: 0,
  FOCUS_TYPE_FOCUSED: 1,
  FOCUS_TYPE_UNFOCUSED: 2
};

/**
 * @enum {number}
 */
proto.FocusDevice = {
  FOCUS_DEVICE_UNSPECIFIED: 0,
  FOCUS_DEVICE_DESKTOP: 20,
  FOCUS_DEVICE_MOBILE: 300
};

/**
 * @enum {number}
 */
proto.TypingType = {
  TYPING_TYPE_UNKNOWN: 0,
  TYPING_TYPE_STARTED: 1,
  TYPING_TYPE_PAUSED: 2,
  TYPING_TYPE_STOPPED: 3
};

/**
 * @enum {number}
 */
proto.ClientPresenceStateType = {
  CLIENT_PRESENCE_STATE_UNKNOWN: 0,
  CLIENT_PRESENCE_STATE_NONE: 1,
  CLIENT_PRESENCE_STATE_DESKTOP_IDLE: 30,
  CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE: 40
};

/**
 * @enum {number}
 */
proto.NotificationLevel = {
  NOTIFICATION_LEVEL_UNKNOWN: 0,
  NOTIFICATION_LEVEL_QUIET: 10,
  NOTIFICATION_LEVEL_RING: 30
};

/**
 * @enum {number}
 */
proto.SegmentType = {
  SEGMENT_TYPE_TEXT: 0,
  SEGMENT_TYPE_LINE_BREAK: 1,
  SEGMENT_TYPE_LINK: 2
};

/**
 * @enum {number}
 */
proto.ItemType = {
  ITEM_TYPE_THING: 0,
  ITEM_TYPE_PLUS_PHOTO: 249,
  ITEM_TYPE_PLACE: 335,
  ITEM_TYPE_PLACE_V2: 340
};

/**
 * @enum {number}
 */
proto.MembershipChangeType = {
  MEMBERSHIP_CHANGE_TYPE_JOIN: 1,
  MEMBERSHIP_CHANGE_TYPE_LEAVE: 2
};

/**
 * @enum {number}
 */
proto.HangoutEventType = {
  HANGOUT_EVENT_TYPE_UNKNOWN: 0,
  HANGOUT_EVENT_TYPE_START: 1,
  HANGOUT_EVENT_TYPE_END: 2,
  HANGOUT_EVENT_TYPE_JOIN: 3,
  HANGOUT_EVENT_TYPE_LEAVE: 4,
  HANGOUT_EVENT_TYPE_COMING_SOON: 5,
  HANGOUT_EVENT_TYPE_ONGOING: 6
};

/**
 * @enum {number}
 */
proto.OffTheRecordToggle = {
  OFF_THE_RECORD_TOGGLE_UNKNOWN: 0,
  OFF_THE_RECORD_TOGGLE_ENABLED: 1,
  OFF_THE_RECORD_TOGGLE_DISABLED: 2
};

/**
 * @enum {number}
 */
proto.OffTheRecordStatus = {
  OFF_THE_RECORD_STATUS_UNKNOWN: 0,
  OFF_THE_RECORD_STATUS_OFF_THE_RECORD: 1,
  OFF_THE_RECORD_STATUS_ON_THE_RECORD: 2
};

/**
 * @enum {number}
 */
proto.SourceType = {
  SOURCE_TYPE_UNKNOWN: 0
};

/**
 * @enum {number}
 */
proto.EventType = {
  EVENT_TYPE_UNKNOWN: 0,
  EVENT_TYPE_REGULAR_CHAT_MESSAGE: 1,
  EVENT_TYPE_SMS: 2,
  EVENT_TYPE_VOICEMAIL: 3,
  EVENT_TYPE_ADD_USER: 4,
  EVENT_TYPE_REMOVE_USER: 5,
  EVENT_TYPE_CONVERSATION_RENAME: 6,
  EVENT_TYPE_HANGOUT: 7,
  EVENT_TYPE_PHONE_CALL: 8,
  EVENT_TYPE_OTR_MODIFICATION: 9,
  EVENT_TYPE_PLAN_MUTATION: 10,
  EVENT_TYPE_MMS: 11,
  EVENT_TYPE_DEPRECATED_12: 12,
  EVENT_TYPE_OBSERVED_EVENT: 13,
  EVENT_TYPE_GROUP_LINK_SHARING_MODIFICATION: 14
};

/**
 * @enum {number}
 */
proto.ConversationType = {
  CONVERSATION_TYPE_UNKNOWN: 0,
  CONVERSATION_TYPE_ONE_TO_ONE: 1,
  CONVERSATION_TYPE_GROUP: 2
};

/**
 * @enum {number}
 */
proto.ConversationStatus = {
  CONVERSATION_STATUS_UNKNOWN: 0,
  CONVERSATION_STATUS_INVITED: 1,
  CONVERSATION_STATUS_ACTIVE: 2,
  CONVERSATION_STATUS_LEFT: 3
};

/**
 * @enum {number}
 */
proto.ConversationView = {
  CONVERSATION_VIEW_UNKNOWN: 0,
  CONVERSATION_VIEW_INBOX: 1,
  CONVERSATION_VIEW_ARCHIVED: 2
};

/**
 * @enum {number}
 */
proto.DeliveryMediumType = {
  DELIVERY_MEDIUM_UNKNOWN: 0,
  DELIVERY_MEDIUM_BABEL: 1,
  DELIVERY_MEDIUM_GOOGLE_VOICE: 2,
  DELIVERY_MEDIUM_LOCAL_SMS: 3
};

/**
 * @enum {number}
 */
proto.InvitationAffinity = {
  INVITE_AFFINITY_UNKNOWN: 0,
  INVITE_AFFINITY_HIGH: 1,
  INVITE_AFFINITY_LOW: 2
};

/**
 * @enum {number}
 */
proto.ParticipantType = {
  PARTICIPANT_TYPE_UNKNOWN: 0,
  PARTICIPANT_TYPE_GAIA: 2,
  PARTICIPANT_TYPE_GOOGLE_VOICE: 3
};

/**
 * @enum {number}
 */
proto.InvitationStatus = {
  INVITATION_STATUS_UNKNOWN: 0,
  INVITATION_STATUS_PENDING: 1,
  INVITATION_STATUS_ACCEPTED: 2
};

/**
 * @enum {number}
 */
proto.ForceHistory = {
  FORCE_HISTORY_UNKNOWN: 0,
  FORCE_HISTORY_NO: 1
};

/**
 * @enum {number}
 */
proto.NetworkType = {
  NETWORK_TYPE_UNKNOWN: 0,
  NETWORK_TYPE_BABEL: 1,
  NETWORK_TYPE_GOOGLE_VOICE: 2
};

/**
 * @enum {number}
 */
proto.BlockState = {
  BLOCK_STATE_UNKNOWN: 0,
  BLOCK_STATE_BLOCK: 1,
  BLOCK_STATE_UNBLOCK: 2
};

/**
 * @enum {number}
 */
proto.ReplyToInviteType = {
  REPLY_TO_INVITE_TYPE_UNKNOWN: 0,
  REPLY_TO_INVITE_TYPE_ACCEPT: 1,
  REPLY_TO_INVITE_TYPE_DECLINE: 2
};

/**
 * @enum {number}
 */
proto.ClientId = {
  CLIENT_ID_UNKNOWN: 0,
  CLIENT_ID_ANDROID: 1,
  CLIENT_ID_IOS: 2,
  CLIENT_ID_CHROME: 3,
  CLIENT_ID_WEB_GPLUS: 5,
  CLIENT_ID_WEB_GMAIL: 6,
  CLIENT_ID_ULTRAVIOLET: 13,
  CLIENT_ID_WEB_HANGOUTS: 44
};

/**
 * @enum {number}
 */
proto.ClientBuildType = {
  BUILD_TYPE_UNKNOWN: 0,
  BUILD_TYPE_PRODUCTION_WEB: 1,
  BUILD_TYPE_PRODUCTION_APP: 3
};

/**
 * @enum {number}
 */
proto.ResponseStatus = {
  RESPONSE_STATUS_UNKNOWN: 0,
  RESPONSE_STATUS_OK: 1,
  RESPONSE_STATUS_UNEXPECTED_ERROR: 3,
  RESPONSE_STATUS_INVALID_REQUEST: 4
};

/**
 * @enum {number}
 */
proto.PhotoUrlStatus = {
  PHOTO_URL_STATUS_UNKNOWN: 0,
  PHOTO_URL_STATUS_PLACEHOLDER: 1,
  PHOTO_URL_STATUS_USER_PHOTO: 2
};

/**
 * @enum {number}
 */
proto.Gender = {
  GENDER_UNKNOWN: 0,
  GENDER_MALE: 1,
  GENDER_FEMALE: 2
};

/**
 * @enum {number}
 */
proto.ProfileType = {
  PROFILE_TYPE_NONE: 0,
  PROFILE_TYPE_ES_USER: 1
};

/**
 * @enum {number}
 */
proto.ConfigurationBitType = {
  CONFIGURATION_BIT_TYPE_UNKNOWN: 0,
  CONFIGURATION_BIT_TYPE_UNKNOWN_1: 1,
  CONFIGURATION_BIT_TYPE_UNKNOWN_2: 2,
  CONFIGURATION_BIT_TYPE_UNKNOWN_3: 3,
  CONFIGURATION_BIT_TYPE_UNKNOWN_4: 4,
  CONFIGURATION_BIT_TYPE_UNKNOWN_5: 5,
  CONFIGURATION_BIT_TYPE_UNKNOWN_6: 6,
  CONFIGURATION_BIT_TYPE_UNKNOWN_7: 7,
  CONFIGURATION_BIT_TYPE_UNKNOWN_8: 8,
  CONFIGURATION_BIT_TYPE_UNKNOWN_9: 9,
  CONFIGURATION_BIT_TYPE_UNKNOWN_10: 10,
  CONFIGURATION_BIT_TYPE_UNKNOWN_11: 11,
  CONFIGURATION_BIT_TYPE_UNKNOWN_12: 12,
  CONFIGURATION_BIT_TYPE_UNKNOWN_13: 13,
  CONFIGURATION_BIT_TYPE_UNKNOWN_14: 14,
  CONFIGURATION_BIT_TYPE_UNKNOWN_15: 15,
  CONFIGURATION_BIT_TYPE_UNKNOWN_16: 16,
  CONFIGURATION_BIT_TYPE_UNKNOWN_17: 17,
  CONFIGURATION_BIT_TYPE_UNKNOWN_18: 18,
  CONFIGURATION_BIT_TYPE_UNKNOWN_19: 19,
  CONFIGURATION_BIT_TYPE_UNKNOWN_20: 20,
  CONFIGURATION_BIT_TYPE_UNKNOWN_21: 21,
  CONFIGURATION_BIT_TYPE_UNKNOWN_22: 22,
  CONFIGURATION_BIT_TYPE_UNKNOWN_23: 23,
  CONFIGURATION_BIT_TYPE_UNKNOWN_24: 24,
  CONFIGURATION_BIT_TYPE_UNKNOWN_25: 25,
  CONFIGURATION_BIT_TYPE_UNKNOWN_26: 26,
  CONFIGURATION_BIT_TYPE_UNKNOWN_27: 27,
  CONFIGURATION_BIT_TYPE_UNKNOWN_28: 28,
  CONFIGURATION_BIT_TYPE_UNKNOWN_29: 29,
  CONFIGURATION_BIT_TYPE_UNKNOWN_30: 30,
  CONFIGURATION_BIT_TYPE_UNKNOWN_31: 31,
  CONFIGURATION_BIT_TYPE_UNKNOWN_32: 32,
  CONFIGURATION_BIT_TYPE_UNKNOWN_33: 33,
  CONFIGURATION_BIT_TYPE_DESKTOP_AUTO_EMOJI_CONVERSION_ENABLED: 34,
  CONFIGURATION_BIT_TYPE_UNKNOWN_35: 35,
  CONFIGURATION_BIT_TYPE_UNKNOWN_36: 36,
  CONFIGURATION_BIT_TYPE_DESKTOP_COMPACT_MODE_ENABLED: 38
};

/**
 * @enum {number}
 */
proto.RichPresenceType = {
  RICH_PRESENCE_TYPE_UNKNOWN: 0,
  RICH_PRESENCE_TYPE_IN_CALL_STATE: 1,
  RICH_PRESENCE_TYPE_UNKNOWN_3: 3,
  RICH_PRESENCE_TYPE_UNKNOWN_4: 4,
  RICH_PRESENCE_TYPE_UNKNOWN_5: 5,
  RICH_PRESENCE_TYPE_DEVICE: 2,
  RICH_PRESENCE_TYPE_LAST_SEEN: 6
};

/**
 * @enum {number}
 */
proto.FieldMask = {
  FIELD_MASK_REACHABLE: 1,
  FIELD_MASK_AVAILABLE: 2,
  FIELD_MASK_MOOD: 3,
  FIELD_MASK_IN_CALL: 6,
  FIELD_MASK_DEVICE: 7,
  FIELD_MASK_LAST_SEEN: 10
};

/**
 * @enum {number}
 */
proto.DeleteType = {
  DELETE_TYPE_UNKNOWN: 0,
  DELETE_TYPE_UPPER_BOUND: 1
};

/**
 * @enum {number}
 */
proto.SyncFilter = {
  SYNC_FILTER_UNKNOWN: 0,
  SYNC_FILTER_INBOX: 1,
  SYNC_FILTER_ARCHIVED: 2
};

/**
 * @enum {number}
 */
proto.SoundState = {
  SOUND_STATE_UNKNOWN: 0,
  SOUND_STATE_ON: 1,
  SOUND_STATE_OFF: 2
};

/**
 * @enum {number}
 */
proto.CallerIdSettingsMask = {
  CALLER_ID_SETTINGS_MASK_UNKNOWN: 0,
  CALLER_ID_SETTINGS_MASK_PROVIDED: 1
};

/**
 * @enum {number}
 */
proto.PhoneVerificationStatus = {
  PHONE_VERIFICATION_STATUS_UNKNOWN: 0,
  PHONE_VERIFICATION_STATUS_VERIFIED: 1
};

/**
 * @enum {number}
 */
proto.PhoneDiscoverabilityStatus = {
  PHONE_DISCOVERABILITY_STATUS_UNKNOWN: 0,
  PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE: 2
};

/**
 * @enum {number}
 */
proto.PhoneValidationResult = {
  PHONE_VALIDATION_RESULT_IS_POSSIBLE: 0
};

/**
 * @enum {number}
 */
proto.OffnetworkAddressType = {
  OFFNETWORK_ADDRESS_TYPE_UNKNOWN: 0,
  OFFNETWORK_ADDRESS_TYPE_EMAIL: 1
};

/**
 * @enum {number}
 */
proto.GroupLinkSharingStatus = {
  GROUP_LINK_SHARING_STATUS_UNKNOWN: 0,
  GROUP_LINK_SHARING_STATUS_ON: 1,
  GROUP_LINK_SHARING_STATUS_OFF: 2
};

goog.object.extend(exports, proto);
